// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.9
// source: ws_payload.proto

package backend

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Header struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Header) Reset() {
	*x = Header{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Header) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Header) ProtoMessage() {}

func (x *Header) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Header.ProtoReflect.Descriptor instead.
func (*Header) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{0}
}

func (x *Header) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Header) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type Frame struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Seqid           uint64    `protobuf:"varint,1,opt,name=seqid,proto3" json:"seqid,omitempty"`
	Logid           uint64    `protobuf:"varint,2,opt,name=logid,proto3" json:"logid,omitempty"`
	Service         int32     `protobuf:"varint,3,opt,name=service,proto3" json:"service,omitempty"`
	Method          int32     `protobuf:"varint,4,opt,name=method,proto3" json:"method,omitempty"`
	Headers         []*Header `protobuf:"bytes,5,rep,name=headers,proto3" json:"headers,omitempty"`
	PayloadEncoding string    `protobuf:"bytes,6,opt,name=payload_encoding,json=payloadEncoding,proto3" json:"payload_encoding,omitempty"`
	PayloadType     string    `protobuf:"bytes,7,opt,name=payload_type,json=payloadType,proto3" json:"payload_type,omitempty"`
	Payload         []byte    `protobuf:"bytes,8,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *Frame) Reset() {
	*x = Frame{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Frame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Frame) ProtoMessage() {}

func (x *Frame) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Frame.ProtoReflect.Descriptor instead.
func (*Frame) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{1}
}

func (x *Frame) GetSeqid() uint64 {
	if x != nil {
		return x.Seqid
	}
	return 0
}

func (x *Frame) GetLogid() uint64 {
	if x != nil {
		return x.Logid
	}
	return 0
}

func (x *Frame) GetService() int32 {
	if x != nil {
		return x.Service
	}
	return 0
}

func (x *Frame) GetMethod() int32 {
	if x != nil {
		return x.Method
	}
	return 0
}

func (x *Frame) GetHeaders() []*Header {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *Frame) GetPayloadEncoding() string {
	if x != nil {
		return x.PayloadEncoding
	}
	return ""
}

func (x *Frame) GetPayloadType() string {
	if x != nil {
		return x.PayloadType
	}
	return ""
}

func (x *Frame) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

type MessagesPerUserInitV2RequestBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cursor      int64 `protobuf:"varint,1,opt,name=cursor,proto3" json:"cursor,omitempty"`
	NewUser     int32 `protobuf:"varint,2,opt,name=new_user,json=newUser,proto3" json:"new_user,omitempty"`
	InitSubType int32 `protobuf:"varint,3,opt,name=init_sub_type,json=initSubType,proto3" json:"init_sub_type,omitempty"`
}

func (x *MessagesPerUserInitV2RequestBody) Reset() {
	*x = MessagesPerUserInitV2RequestBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessagesPerUserInitV2RequestBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessagesPerUserInitV2RequestBody) ProtoMessage() {}

func (x *MessagesPerUserInitV2RequestBody) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessagesPerUserInitV2RequestBody.ProtoReflect.Descriptor instead.
func (*MessagesPerUserInitV2RequestBody) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{2}
}

func (x *MessagesPerUserInitV2RequestBody) GetCursor() int64 {
	if x != nil {
		return x.Cursor
	}
	return 0
}

func (x *MessagesPerUserInitV2RequestBody) GetNewUser() int32 {
	if x != nil {
		return x.NewUser
	}
	return 0
}

func (x *MessagesPerUserInitV2RequestBody) GetInitSubType() int32 {
	if x != nil {
		return x.InitSubType
	}
	return 0
}

type RequestBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessagesPerUserInitV2Body *MessagesPerUserInitV2RequestBody `protobuf:"bytes,203,opt,name=messages_per_user_init_v2_body,json=messagesPerUserInitV2Body,proto3" json:"messages_per_user_init_v2_body,omitempty"`
}

func (x *RequestBody) Reset() {
	*x = RequestBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestBody) ProtoMessage() {}

func (x *RequestBody) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestBody.ProtoReflect.Descriptor instead.
func (*RequestBody) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{3}
}

func (x *RequestBody) GetMessagesPerUserInitV2Body() *MessagesPerUserInitV2RequestBody {
	if x != nil {
		return x.MessagesPerUserInitV2Body
	}
	return nil
}

type Headers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Headers) Reset() {
	*x = Headers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Headers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Headers) ProtoMessage() {}

func (x *Headers) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Headers.ProtoReflect.Descriptor instead.
func (*Headers) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{4}
}

type Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd            int32             `protobuf:"varint,1,opt,name=cmd,proto3" json:"cmd,omitempty"`
	SequenceId     int64             `protobuf:"varint,2,opt,name=sequence_id,json=sequenceId,proto3" json:"sequence_id,omitempty"`
	SdkVersion     string            `protobuf:"bytes,3,opt,name=sdk_version,json=sdkVersion,proto3" json:"sdk_version,omitempty"`
	Token          string            `protobuf:"bytes,4,opt,name=token,proto3" json:"token,omitempty"`
	Refer          int32             `protobuf:"varint,5,opt,name=refer,proto3" json:"refer,omitempty"`
	InboxType      int32             `protobuf:"varint,6,opt,name=inbox_type,json=inboxType,proto3" json:"inbox_type,omitempty"`
	BuildNumber    string            `protobuf:"bytes,7,opt,name=build_number,json=buildNumber,proto3" json:"build_number,omitempty"`
	Body           *RequestBody      `protobuf:"bytes,8,opt,name=body,proto3" json:"body,omitempty"`
	DeviceId       string            `protobuf:"bytes,9,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	Channel        string            `protobuf:"bytes,10,opt,name=channel,proto3" json:"channel,omitempty"`
	DevicePlatform string            `protobuf:"bytes,11,opt,name=device_platform,json=devicePlatform,proto3" json:"device_platform,omitempty"`
	DeviceType     string            `protobuf:"bytes,12,opt,name=device_type,json=deviceType,proto3" json:"device_type,omitempty"`
	OsVersion      string            `protobuf:"bytes,13,opt,name=os_version,json=osVersion,proto3" json:"os_version,omitempty"`
	VersionCode    string            `protobuf:"bytes,14,opt,name=version_code,json=versionCode,proto3" json:"version_code,omitempty"`
	Headers        map[string]string `protobuf:"bytes,15,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ConfigId       int32             `protobuf:"varint,16,opt,name=config_id,json=configId,proto3" json:"config_id,omitempty"`
	TokenInfo      *TokenInfo        `protobuf:"bytes,17,opt,name=token_info,json=tokenInfo,proto3" json:"token_info,omitempty"`
	AuthType       int32             `protobuf:"varint,18,opt,name=auth_type,json=authType,proto3" json:"auth_type,omitempty"`
}

func (x *Request) Reset() {
	*x = Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Request) ProtoMessage() {}

func (x *Request) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Request.ProtoReflect.Descriptor instead.
func (*Request) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{5}
}

func (x *Request) GetCmd() int32 {
	if x != nil {
		return x.Cmd
	}
	return 0
}

func (x *Request) GetSequenceId() int64 {
	if x != nil {
		return x.SequenceId
	}
	return 0
}

func (x *Request) GetSdkVersion() string {
	if x != nil {
		return x.SdkVersion
	}
	return ""
}

func (x *Request) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *Request) GetRefer() int32 {
	if x != nil {
		return x.Refer
	}
	return 0
}

func (x *Request) GetInboxType() int32 {
	if x != nil {
		return x.InboxType
	}
	return 0
}

func (x *Request) GetBuildNumber() string {
	if x != nil {
		return x.BuildNumber
	}
	return ""
}

func (x *Request) GetBody() *RequestBody {
	if x != nil {
		return x.Body
	}
	return nil
}

func (x *Request) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *Request) GetChannel() string {
	if x != nil {
		return x.Channel
	}
	return ""
}

func (x *Request) GetDevicePlatform() string {
	if x != nil {
		return x.DevicePlatform
	}
	return ""
}

func (x *Request) GetDeviceType() string {
	if x != nil {
		return x.DeviceType
	}
	return ""
}

func (x *Request) GetOsVersion() string {
	if x != nil {
		return x.OsVersion
	}
	return ""
}

func (x *Request) GetVersionCode() string {
	if x != nil {
		return x.VersionCode
	}
	return ""
}

func (x *Request) GetHeaders() map[string]string {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *Request) GetConfigId() int32 {
	if x != nil {
		return x.ConfigId
	}
	return 0
}

func (x *Request) GetTokenInfo() *TokenInfo {
	if x != nil {
		return x.TokenInfo
	}
	return nil
}

func (x *Request) GetAuthType() int32 {
	if x != nil {
		return x.AuthType
	}
	return 0
}

type TokenInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MarkId    int32 `protobuf:"varint,1,opt,name=mark_id,json=markId,proto3" json:"mark_id,omitempty"`
	Type      int32 `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"`
	AppId     int32 `protobuf:"varint,3,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	UserId    int64 `protobuf:"varint,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Timestamp int64 `protobuf:"varint,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *TokenInfo) Reset() {
	*x = TokenInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TokenInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenInfo) ProtoMessage() {}

func (x *TokenInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenInfo.ProtoReflect.Descriptor instead.
func (*TokenInfo) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{6}
}

func (x *TokenInfo) GetMarkId() int32 {
	if x != nil {
		return x.MarkId
	}
	return 0
}

func (x *TokenInfo) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *TokenInfo) GetAppId() int32 {
	if x != nil {
		return x.AppId
	}
	return 0
}

func (x *TokenInfo) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *TokenInfo) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type SendMessageResponseBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerMessageId int64  `protobuf:"varint,1,opt,name=server_message_id,json=serverMessageId,proto3" json:"server_message_id,omitempty"`
	ExtraInfo       string `protobuf:"bytes,2,opt,name=extra_info,json=extraInfo,proto3" json:"extra_info,omitempty"`
	Status          int32  `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`
	ClientMessageId string `protobuf:"bytes,4,opt,name=client_message_id,json=clientMessageId,proto3" json:"client_message_id,omitempty"`
	CheckCode       int64  `protobuf:"varint,5,opt,name=check_code,json=checkCode,proto3" json:"check_code,omitempty"`
	CheckMessage    string `protobuf:"bytes,6,opt,name=check_message,json=checkMessage,proto3" json:"check_message,omitempty"`
}

func (x *SendMessageResponseBody) Reset() {
	*x = SendMessageResponseBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendMessageResponseBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendMessageResponseBody) ProtoMessage() {}

func (x *SendMessageResponseBody) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendMessageResponseBody.ProtoReflect.Descriptor instead.
func (*SendMessageResponseBody) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{7}
}

func (x *SendMessageResponseBody) GetServerMessageId() int64 {
	if x != nil {
		return x.ServerMessageId
	}
	return 0
}

func (x *SendMessageResponseBody) GetExtraInfo() string {
	if x != nil {
		return x.ExtraInfo
	}
	return ""
}

func (x *SendMessageResponseBody) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *SendMessageResponseBody) GetClientMessageId() string {
	if x != nil {
		return x.ClientMessageId
	}
	return ""
}

func (x *SendMessageResponseBody) GetCheckCode() int64 {
	if x != nil {
		return x.CheckCode
	}
	return 0
}

func (x *SendMessageResponseBody) GetCheckMessage() string {
	if x != nil {
		return x.CheckMessage
	}
	return ""
}

type MessageBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConversationId      string `protobuf:"bytes,1,opt,name=conversation_id,json=conversationId,proto3" json:"conversation_id,omitempty"`
	ConversationType    int32  `protobuf:"varint,2,opt,name=conversation_type,json=conversationType,proto3" json:"conversation_type,omitempty"`
	ServerMessageId     int64  `protobuf:"varint,3,opt,name=server_message_id,json=serverMessageId,proto3" json:"server_message_id,omitempty"`
	IndexInConversation int64  `protobuf:"varint,4,opt,name=index_in_conversation,json=indexInConversation,proto3" json:"index_in_conversation,omitempty"`
	ConversationShortId int64  `protobuf:"varint,5,opt,name=conversation_short_id,json=conversationShortId,proto3" json:"conversation_short_id,omitempty"`
	MessageType         int32  `protobuf:"varint,6,opt,name=message_type,json=messageType,proto3" json:"message_type,omitempty"`
	Sender              int64  `protobuf:"varint,7,opt,name=sender,proto3" json:"sender,omitempty"`
	Content             string `protobuf:"bytes,8,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *MessageBody) Reset() {
	*x = MessageBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageBody) ProtoMessage() {}

func (x *MessageBody) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageBody.ProtoReflect.Descriptor instead.
func (*MessageBody) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{8}
}

func (x *MessageBody) GetConversationId() string {
	if x != nil {
		return x.ConversationId
	}
	return ""
}

func (x *MessageBody) GetConversationType() int32 {
	if x != nil {
		return x.ConversationType
	}
	return 0
}

func (x *MessageBody) GetServerMessageId() int64 {
	if x != nil {
		return x.ServerMessageId
	}
	return 0
}

func (x *MessageBody) GetIndexInConversation() int64 {
	if x != nil {
		return x.IndexInConversation
	}
	return 0
}

func (x *MessageBody) GetConversationShortId() int64 {
	if x != nil {
		return x.ConversationShortId
	}
	return 0
}

func (x *MessageBody) GetMessageType() int32 {
	if x != nil {
		return x.MessageType
	}
	return 0
}

func (x *MessageBody) GetSender() int64 {
	if x != nil {
		return x.Sender
	}
	return 0
}

func (x *MessageBody) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

type MessagesPerUserResponseBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Messages   []*MessageBody `protobuf:"bytes,1,rep,name=messages,proto3" json:"messages,omitempty"`
	NextCursor int64          `protobuf:"varint,2,opt,name=next_cursor,json=nextCursor,proto3" json:"next_cursor,omitempty"`
	HasMore    bool           `protobuf:"varint,3,opt,name=has_more,json=hasMore,proto3" json:"has_more,omitempty"`
}

func (x *MessagesPerUserResponseBody) Reset() {
	*x = MessagesPerUserResponseBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessagesPerUserResponseBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessagesPerUserResponseBody) ProtoMessage() {}

func (x *MessagesPerUserResponseBody) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessagesPerUserResponseBody.ProtoReflect.Descriptor instead.
func (*MessagesPerUserResponseBody) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{9}
}

func (x *MessagesPerUserResponseBody) GetMessages() []*MessageBody {
	if x != nil {
		return x.Messages
	}
	return nil
}

func (x *MessagesPerUserResponseBody) GetNextCursor() int64 {
	if x != nil {
		return x.NextCursor
	}
	return 0
}

func (x *MessagesPerUserResponseBody) GetHasMore() bool {
	if x != nil {
		return x.HasMore
	}
	return false
}

type MessageInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status int32        `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Body   *MessageBody `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *MessageInfo) Reset() {
	*x = MessageInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageInfo) ProtoMessage() {}

func (x *MessageInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageInfo.ProtoReflect.Descriptor instead.
func (*MessageInfo) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{10}
}

func (x *MessageInfo) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *MessageInfo) GetBody() *MessageBody {
	if x != nil {
		return x.Body
	}
	return nil
}

type GetMessageByIdResponseBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgInfo *MessageInfo `protobuf:"bytes,1,opt,name=msg_info,json=msgInfo,proto3" json:"msg_info,omitempty"`
}

func (x *GetMessageByIdResponseBody) Reset() {
	*x = GetMessageByIdResponseBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMessageByIdResponseBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMessageByIdResponseBody) ProtoMessage() {}

func (x *GetMessageByIdResponseBody) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMessageByIdResponseBody.ProtoReflect.Descriptor instead.
func (*GetMessageByIdResponseBody) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{11}
}

func (x *GetMessageByIdResponseBody) GetMsgInfo() *MessageInfo {
	if x != nil {
		return x.MsgInfo
	}
	return nil
}

type MessagesInConversationResponseBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Messages   []*MessageBody `protobuf:"bytes,1,rep,name=messages,proto3" json:"messages,omitempty"`
	NextCursor int64          `protobuf:"varint,2,opt,name=next_cursor,json=nextCursor,proto3" json:"next_cursor,omitempty"`
	HasMore    bool           `protobuf:"varint,3,opt,name=has_more,json=hasMore,proto3" json:"has_more,omitempty"`
}

func (x *MessagesInConversationResponseBody) Reset() {
	*x = MessagesInConversationResponseBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessagesInConversationResponseBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessagesInConversationResponseBody) ProtoMessage() {}

func (x *MessagesInConversationResponseBody) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessagesInConversationResponseBody.ProtoReflect.Descriptor instead.
func (*MessagesInConversationResponseBody) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{12}
}

func (x *MessagesInConversationResponseBody) GetMessages() []*MessageBody {
	if x != nil {
		return x.Messages
	}
	return nil
}

func (x *MessagesInConversationResponseBody) GetNextCursor() int64 {
	if x != nil {
		return x.NextCursor
	}
	return 0
}

func (x *MessagesInConversationResponseBody) GetHasMore() bool {
	if x != nil {
		return x.HasMore
	}
	return false
}

type MessagesCheckInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HeadMsgIndex    int64  `protobuf:"varint,1,opt,name=head_msg_index,json=headMsgIndex,proto3" json:"head_msg_index,omitempty"`
	TailMsgIndex    int64  `protobuf:"varint,2,opt,name=tail_msg_index,json=tailMsgIndex,proto3" json:"tail_msg_index,omitempty"`
	MsgCount        int32  `protobuf:"varint,3,opt,name=msg_count,json=msgCount,proto3" json:"msg_count,omitempty"`
	IndexesChecksum uint32 `protobuf:"varint,4,opt,name=indexes_checksum,json=indexesChecksum,proto3" json:"indexes_checksum,omitempty"`
}

func (x *MessagesCheckInfo) Reset() {
	*x = MessagesCheckInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessagesCheckInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessagesCheckInfo) ProtoMessage() {}

func (x *MessagesCheckInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessagesCheckInfo.ProtoReflect.Descriptor instead.
func (*MessagesCheckInfo) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{13}
}

func (x *MessagesCheckInfo) GetHeadMsgIndex() int64 {
	if x != nil {
		return x.HeadMsgIndex
	}
	return 0
}

func (x *MessagesCheckInfo) GetTailMsgIndex() int64 {
	if x != nil {
		return x.TailMsgIndex
	}
	return 0
}

func (x *MessagesCheckInfo) GetMsgCount() int32 {
	if x != nil {
		return x.MsgCount
	}
	return 0
}

func (x *MessagesCheckInfo) GetIndexesChecksum() uint32 {
	if x != nil {
		return x.IndexesChecksum
	}
	return 0
}

type GetMessagesCheckInfoInConversationResponseBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgsCheckinfoList []*MessagesCheckInfo `protobuf:"bytes,1,rep,name=msgs_checkinfo_list,json=msgsCheckinfoList,proto3" json:"msgs_checkinfo_list,omitempty"`
	RealMsgTotalCount int32                `protobuf:"varint,2,opt,name=real_msg_total_count,json=realMsgTotalCount,proto3" json:"real_msg_total_count,omitempty"`
	CursorReverseNext int64                `protobuf:"varint,4,opt,name=cursor_reverse_next,json=cursorReverseNext,proto3" json:"cursor_reverse_next,omitempty"`
}

func (x *GetMessagesCheckInfoInConversationResponseBody) Reset() {
	*x = GetMessagesCheckInfoInConversationResponseBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMessagesCheckInfoInConversationResponseBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMessagesCheckInfoInConversationResponseBody) ProtoMessage() {}

func (x *GetMessagesCheckInfoInConversationResponseBody) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMessagesCheckInfoInConversationResponseBody.ProtoReflect.Descriptor instead.
func (*GetMessagesCheckInfoInConversationResponseBody) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{14}
}

func (x *GetMessagesCheckInfoInConversationResponseBody) GetMsgsCheckinfoList() []*MessagesCheckInfo {
	if x != nil {
		return x.MsgsCheckinfoList
	}
	return nil
}

func (x *GetMessagesCheckInfoInConversationResponseBody) GetRealMsgTotalCount() int32 {
	if x != nil {
		return x.RealMsgTotalCount
	}
	return 0
}

func (x *GetMessagesCheckInfoInConversationResponseBody) GetCursorReverseNext() int64 {
	if x != nil {
		return x.CursorReverseNext
	}
	return 0
}

type ReferenceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReferencedMessageId     int64  `protobuf:"varint,1,opt,name=referenced_message_id,json=referencedMessageId,proto3" json:"referenced_message_id,omitempty"`
	Hint                    string `protobuf:"bytes,2,opt,name=hint,proto3" json:"hint,omitempty"`
	RefMessageType          int64  `protobuf:"varint,3,opt,name=ref_message_type,json=refMessageType,proto3" json:"ref_message_type,omitempty"`
	ReferencedMessageStatus int32  `protobuf:"varint,4,opt,name=referenced_message_status,json=referencedMessageStatus,proto3" json:"referenced_message_status,omitempty"`
	RootMessageId           int64  `protobuf:"varint,5,opt,name=root_message_id,json=rootMessageId,proto3" json:"root_message_id,omitempty"`
	RootMessageConvIndex    int64  `protobuf:"varint,6,opt,name=root_message_conv_index,json=rootMessageConvIndex,proto3" json:"root_message_conv_index,omitempty"`
}

func (x *ReferenceInfo) Reset() {
	*x = ReferenceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReferenceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReferenceInfo) ProtoMessage() {}

func (x *ReferenceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReferenceInfo.ProtoReflect.Descriptor instead.
func (*ReferenceInfo) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{15}
}

func (x *ReferenceInfo) GetReferencedMessageId() int64 {
	if x != nil {
		return x.ReferencedMessageId
	}
	return 0
}

func (x *ReferenceInfo) GetHint() string {
	if x != nil {
		return x.Hint
	}
	return ""
}

func (x *ReferenceInfo) GetRefMessageType() int64 {
	if x != nil {
		return x.RefMessageType
	}
	return 0
}

func (x *ReferenceInfo) GetReferencedMessageStatus() int32 {
	if x != nil {
		return x.ReferencedMessageStatus
	}
	return 0
}

func (x *ReferenceInfo) GetRootMessageId() int64 {
	if x != nil {
		return x.RootMessageId
	}
	return 0
}

func (x *ReferenceInfo) GetRootMessageConvIndex() int64 {
	if x != nil {
		return x.RootMessageConvIndex
	}
	return 0
}

type NewMessageNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConversationId      string         `protobuf:"bytes,2,opt,name=conversation_id,json=conversationId,proto3" json:"conversation_id,omitempty"`
	ConversationType    int32          `protobuf:"varint,3,opt,name=conversation_type,json=conversationType,proto3" json:"conversation_type,omitempty"`
	NotifyType          int32          `protobuf:"varint,4,opt,name=notify_type,json=notifyType,proto3" json:"notify_type,omitempty"`
	Message             *MessageBody   `protobuf:"bytes,5,opt,name=message,proto3" json:"message,omitempty"`
	PreviousCursor      int64          `protobuf:"varint,6,opt,name=previous_cursor,json=previousCursor,proto3" json:"previous_cursor,omitempty"`
	NextCursor          int64          `protobuf:"varint,7,opt,name=next_cursor,json=nextCursor,proto3" json:"next_cursor,omitempty"`
	IndexInConversation int64          `protobuf:"varint,8,opt,name=index_in_conversation,json=indexInConversation,proto3" json:"index_in_conversation,omitempty"`
	RefMsgInfo          *ReferenceInfo `protobuf:"bytes,15,opt,name=ref_msg_info,json=refMsgInfo,proto3" json:"ref_msg_info,omitempty"`
}

func (x *NewMessageNotify) Reset() {
	*x = NewMessageNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewMessageNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewMessageNotify) ProtoMessage() {}

func (x *NewMessageNotify) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewMessageNotify.ProtoReflect.Descriptor instead.
func (*NewMessageNotify) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{16}
}

func (x *NewMessageNotify) GetConversationId() string {
	if x != nil {
		return x.ConversationId
	}
	return ""
}

func (x *NewMessageNotify) GetConversationType() int32 {
	if x != nil {
		return x.ConversationType
	}
	return 0
}

func (x *NewMessageNotify) GetNotifyType() int32 {
	if x != nil {
		return x.NotifyType
	}
	return 0
}

func (x *NewMessageNotify) GetMessage() *MessageBody {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *NewMessageNotify) GetPreviousCursor() int64 {
	if x != nil {
		return x.PreviousCursor
	}
	return 0
}

func (x *NewMessageNotify) GetNextCursor() int64 {
	if x != nil {
		return x.NextCursor
	}
	return 0
}

func (x *NewMessageNotify) GetIndexInConversation() int64 {
	if x != nil {
		return x.IndexInConversation
	}
	return 0
}

func (x *NewMessageNotify) GetRefMsgInfo() *ReferenceInfo {
	if x != nil {
		return x.RefMsgInfo
	}
	return nil
}

type ConversationCheckInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConversationShortId int64  `protobuf:"varint,1,opt,name=conversation_short_id,json=conversationShortId,proto3" json:"conversation_short_id,omitempty"`
	ConversationId      string `protobuf:"bytes,2,opt,name=conversation_id,json=conversationId,proto3" json:"conversation_id,omitempty"`
	ConversationType    int32  `protobuf:"varint,3,opt,name=conversation_type,json=conversationType,proto3" json:"conversation_type,omitempty"`
}

func (x *ConversationCheckInfo) Reset() {
	*x = ConversationCheckInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConversationCheckInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConversationCheckInfo) ProtoMessage() {}

func (x *ConversationCheckInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConversationCheckInfo.ProtoReflect.Descriptor instead.
func (*ConversationCheckInfo) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{17}
}

func (x *ConversationCheckInfo) GetConversationShortId() int64 {
	if x != nil {
		return x.ConversationShortId
	}
	return 0
}

func (x *ConversationCheckInfo) GetConversationId() string {
	if x != nil {
		return x.ConversationId
	}
	return ""
}

func (x *ConversationCheckInfo) GetConversationType() int32 {
	if x != nil {
		return x.ConversationType
	}
	return 0
}

type GetConversationsCheckInfoResponseBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConversationCheckinfoList []*ConversationCheckInfo `protobuf:"bytes,1,rep,name=conversation_checkinfo_list,json=conversationCheckinfoList,proto3" json:"conversation_checkinfo_list,omitempty"`
}

func (x *GetConversationsCheckInfoResponseBody) Reset() {
	*x = GetConversationsCheckInfoResponseBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConversationsCheckInfoResponseBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConversationsCheckInfoResponseBody) ProtoMessage() {}

func (x *GetConversationsCheckInfoResponseBody) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConversationsCheckInfoResponseBody.ProtoReflect.Descriptor instead.
func (*GetConversationsCheckInfoResponseBody) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{18}
}

func (x *GetConversationsCheckInfoResponseBody) GetConversationCheckinfoList() []*ConversationCheckInfo {
	if x != nil {
		return x.ConversationCheckinfoList
	}
	return nil
}

type Participant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId        int64  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	SortOrder     int64  `protobuf:"varint,2,opt,name=sort_order,json=sortOrder,proto3" json:"sort_order,omitempty"`
	Role          int32  `protobuf:"varint,3,opt,name=role,proto3" json:"role,omitempty"`
	Alias         string `protobuf:"bytes,4,opt,name=alias,proto3" json:"alias,omitempty"`
	SecUid        string `protobuf:"bytes,5,opt,name=sec_uid,json=secUid,proto3" json:"sec_uid,omitempty"`
	Blocked       int32  `protobuf:"varint,6,opt,name=blocked,proto3" json:"blocked,omitempty"`
	LeftBlockTime int64  `protobuf:"varint,7,opt,name=left_block_time,json=leftBlockTime,proto3" json:"left_block_time,omitempty"`
}

func (x *Participant) Reset() {
	*x = Participant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Participant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Participant) ProtoMessage() {}

func (x *Participant) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Participant.ProtoReflect.Descriptor instead.
func (*Participant) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{19}
}

func (x *Participant) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *Participant) GetSortOrder() int64 {
	if x != nil {
		return x.SortOrder
	}
	return 0
}

func (x *Participant) GetRole() int32 {
	if x != nil {
		return x.Role
	}
	return 0
}

func (x *Participant) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

func (x *Participant) GetSecUid() string {
	if x != nil {
		return x.SecUid
	}
	return ""
}

func (x *Participant) GetBlocked() int32 {
	if x != nil {
		return x.Blocked
	}
	return 0
}

func (x *Participant) GetLeftBlockTime() int64 {
	if x != nil {
		return x.LeftBlockTime
	}
	return 0
}

type ParticipantsPage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Participants []*Participant `protobuf:"bytes,1,rep,name=participants,proto3" json:"participants,omitempty"`
	HasMore      bool           `protobuf:"varint,2,opt,name=has_more,json=hasMore,proto3" json:"has_more,omitempty"`
	Cursor       int64          `protobuf:"varint,3,opt,name=cursor,proto3" json:"cursor,omitempty"`
}

func (x *ParticipantsPage) Reset() {
	*x = ParticipantsPage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParticipantsPage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParticipantsPage) ProtoMessage() {}

func (x *ParticipantsPage) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParticipantsPage.ProtoReflect.Descriptor instead.
func (*ParticipantsPage) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{20}
}

func (x *ParticipantsPage) GetParticipants() []*Participant {
	if x != nil {
		return x.Participants
	}
	return nil
}

func (x *ParticipantsPage) GetHasMore() bool {
	if x != nil {
		return x.HasMore
	}
	return false
}

func (x *ParticipantsPage) GetCursor() int64 {
	if x != nil {
		return x.Cursor
	}
	return 0
}

type ConversationParticipantsListResponseBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParticipantsPage *ParticipantsPage `protobuf:"bytes,1,opt,name=participants_page,json=participantsPage,proto3" json:"participants_page,omitempty"`
}

func (x *ConversationParticipantsListResponseBody) Reset() {
	*x = ConversationParticipantsListResponseBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConversationParticipantsListResponseBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConversationParticipantsListResponseBody) ProtoMessage() {}

func (x *ConversationParticipantsListResponseBody) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConversationParticipantsListResponseBody.ProtoReflect.Descriptor instead.
func (*ConversationParticipantsListResponseBody) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{21}
}

func (x *ConversationParticipantsListResponseBody) GetParticipantsPage() *ParticipantsPage {
	if x != nil {
		return x.ParticipantsPage
	}
	return nil
}

type SecUidPair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid    int64  `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	SecUid string `protobuf:"bytes,2,opt,name=sec_uid,json=secUid,proto3" json:"sec_uid,omitempty"`
}

func (x *SecUidPair) Reset() {
	*x = SecUidPair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecUidPair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecUidPair) ProtoMessage() {}

func (x *SecUidPair) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecUidPair.ProtoReflect.Descriptor instead.
func (*SecUidPair) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{22}
}

func (x *SecUidPair) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *SecUidPair) GetSecUid() string {
	if x != nil {
		return x.SecUid
	}
	return ""
}

type ConversationAddParticipantsResponseBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SuccessParticipants    []int64       `protobuf:"varint,1,rep,packed,name=success_participants,json=successParticipants,proto3" json:"success_participants,omitempty"`
	FailedParticipants     []int64       `protobuf:"varint,2,rep,packed,name=failed_participants,json=failedParticipants,proto3" json:"failed_participants,omitempty"`
	Status                 int32         `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`
	ExtraInfo              string        `protobuf:"bytes,4,opt,name=extra_info,json=extraInfo,proto3" json:"extra_info,omitempty"`
	CheckCode              int64         `protobuf:"varint,5,opt,name=check_code,json=checkCode,proto3" json:"check_code,omitempty"`
	CheckMessage           string        `protobuf:"bytes,6,opt,name=check_message,json=checkMessage,proto3" json:"check_message,omitempty"`
	SecSuccessParticipants []*SecUidPair `protobuf:"bytes,7,rep,name=sec_success_participants,json=secSuccessParticipants,proto3" json:"sec_success_participants,omitempty"`
	SecFailedParticipants  []*SecUidPair `protobuf:"bytes,8,rep,name=sec_failed_participants,json=secFailedParticipants,proto3" json:"sec_failed_participants,omitempty"`
}

func (x *ConversationAddParticipantsResponseBody) Reset() {
	*x = ConversationAddParticipantsResponseBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConversationAddParticipantsResponseBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConversationAddParticipantsResponseBody) ProtoMessage() {}

func (x *ConversationAddParticipantsResponseBody) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConversationAddParticipantsResponseBody.ProtoReflect.Descriptor instead.
func (*ConversationAddParticipantsResponseBody) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{23}
}

func (x *ConversationAddParticipantsResponseBody) GetSuccessParticipants() []int64 {
	if x != nil {
		return x.SuccessParticipants
	}
	return nil
}

func (x *ConversationAddParticipantsResponseBody) GetFailedParticipants() []int64 {
	if x != nil {
		return x.FailedParticipants
	}
	return nil
}

func (x *ConversationAddParticipantsResponseBody) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *ConversationAddParticipantsResponseBody) GetExtraInfo() string {
	if x != nil {
		return x.ExtraInfo
	}
	return ""
}

func (x *ConversationAddParticipantsResponseBody) GetCheckCode() int64 {
	if x != nil {
		return x.CheckCode
	}
	return 0
}

func (x *ConversationAddParticipantsResponseBody) GetCheckMessage() string {
	if x != nil {
		return x.CheckMessage
	}
	return ""
}

func (x *ConversationAddParticipantsResponseBody) GetSecSuccessParticipants() []*SecUidPair {
	if x != nil {
		return x.SecSuccessParticipants
	}
	return nil
}

func (x *ConversationAddParticipantsResponseBody) GetSecFailedParticipants() []*SecUidPair {
	if x != nil {
		return x.SecFailedParticipants
	}
	return nil
}

type ConversationRemoveParticipantsResponseBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FailedParticipants    []int64       `protobuf:"varint,1,rep,packed,name=failed_participants,json=failedParticipants,proto3" json:"failed_participants,omitempty"`
	Status                int32         `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
	ExtraInfo             string        `protobuf:"bytes,3,opt,name=extra_info,json=extraInfo,proto3" json:"extra_info,omitempty"`
	CheckCode             int64         `protobuf:"varint,4,opt,name=check_code,json=checkCode,proto3" json:"check_code,omitempty"`
	CheckMessage          string        `protobuf:"bytes,5,opt,name=check_message,json=checkMessage,proto3" json:"check_message,omitempty"`
	FailedSecParticipants []*SecUidPair `protobuf:"bytes,6,rep,name=failed_sec_participants,json=failedSecParticipants,proto3" json:"failed_sec_participants,omitempty"`
}

func (x *ConversationRemoveParticipantsResponseBody) Reset() {
	*x = ConversationRemoveParticipantsResponseBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConversationRemoveParticipantsResponseBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConversationRemoveParticipantsResponseBody) ProtoMessage() {}

func (x *ConversationRemoveParticipantsResponseBody) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConversationRemoveParticipantsResponseBody.ProtoReflect.Descriptor instead.
func (*ConversationRemoveParticipantsResponseBody) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{24}
}

func (x *ConversationRemoveParticipantsResponseBody) GetFailedParticipants() []int64 {
	if x != nil {
		return x.FailedParticipants
	}
	return nil
}

func (x *ConversationRemoveParticipantsResponseBody) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *ConversationRemoveParticipantsResponseBody) GetExtraInfo() string {
	if x != nil {
		return x.ExtraInfo
	}
	return ""
}

func (x *ConversationRemoveParticipantsResponseBody) GetCheckCode() int64 {
	if x != nil {
		return x.CheckCode
	}
	return 0
}

func (x *ConversationRemoveParticipantsResponseBody) GetCheckMessage() string {
	if x != nil {
		return x.CheckMessage
	}
	return ""
}

func (x *ConversationRemoveParticipantsResponseBody) GetFailedSecParticipants() []*SecUidPair {
	if x != nil {
		return x.FailedSecParticipants
	}
	return nil
}

type UpdateConversationParticipantResponseBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Participant  *Participant `protobuf:"bytes,1,opt,name=participant,proto3" json:"participant,omitempty"`
	Status       int32        `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
	ExtraInfo    string       `protobuf:"bytes,3,opt,name=extra_info,json=extraInfo,proto3" json:"extra_info,omitempty"`
	CheckCode    int64        `protobuf:"varint,4,opt,name=check_code,json=checkCode,proto3" json:"check_code,omitempty"`
	CheckMessage string       `protobuf:"bytes,5,opt,name=check_message,json=checkMessage,proto3" json:"check_message,omitempty"`
}

func (x *UpdateConversationParticipantResponseBody) Reset() {
	*x = UpdateConversationParticipantResponseBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateConversationParticipantResponseBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateConversationParticipantResponseBody) ProtoMessage() {}

func (x *UpdateConversationParticipantResponseBody) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateConversationParticipantResponseBody.ProtoReflect.Descriptor instead.
func (*UpdateConversationParticipantResponseBody) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{25}
}

func (x *UpdateConversationParticipantResponseBody) GetParticipant() *Participant {
	if x != nil {
		return x.Participant
	}
	return nil
}

func (x *UpdateConversationParticipantResponseBody) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *UpdateConversationParticipantResponseBody) GetExtraInfo() string {
	if x != nil {
		return x.ExtraInfo
	}
	return ""
}

func (x *UpdateConversationParticipantResponseBody) GetCheckCode() int64 {
	if x != nil {
		return x.CheckCode
	}
	return 0
}

func (x *UpdateConversationParticipantResponseBody) GetCheckMessage() string {
	if x != nil {
		return x.CheckMessage
	}
	return ""
}

type ModifyMessagePropertyResponseBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  int32 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Version int64 `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *ModifyMessagePropertyResponseBody) Reset() {
	*x = ModifyMessagePropertyResponseBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyMessagePropertyResponseBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyMessagePropertyResponseBody) ProtoMessage() {}

func (x *ModifyMessagePropertyResponseBody) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyMessagePropertyResponseBody.ProtoReflect.Descriptor instead.
func (*ModifyMessagePropertyResponseBody) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{26}
}

func (x *ModifyMessagePropertyResponseBody) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *ModifyMessagePropertyResponseBody) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

type Ext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Ext) Reset() {
	*x = Ext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ext) ProtoMessage() {}

func (x *Ext) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ext.ProtoReflect.Descriptor instead.
func (*Ext) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{27}
}

type ConversationCoreInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConversationId      string            `protobuf:"bytes,1,opt,name=conversation_id,json=conversationId,proto3" json:"conversation_id,omitempty"`
	ConversationShortId int64             `protobuf:"varint,2,opt,name=conversation_short_id,json=conversationShortId,proto3" json:"conversation_short_id,omitempty"`
	ConversationType    int32             `protobuf:"varint,3,opt,name=conversation_type,json=conversationType,proto3" json:"conversation_type,omitempty"`
	InfoVersion         int64             `protobuf:"varint,4,opt,name=info_version,json=infoVersion,proto3" json:"info_version,omitempty"`
	Name                string            `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	Desc                string            `protobuf:"bytes,6,opt,name=desc,proto3" json:"desc,omitempty"`
	Icon                string            `protobuf:"bytes,7,opt,name=icon,proto3" json:"icon,omitempty"`
	InboxType           int32             `protobuf:"varint,8,opt,name=inbox_type,json=inboxType,proto3" json:"inbox_type,omitempty"`
	Notice              string            `protobuf:"bytes,9,opt,name=notice,proto3" json:"notice,omitempty"`
	Ext                 map[string]string `protobuf:"bytes,11,rep,name=ext,proto3" json:"ext,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Owner               int64             `protobuf:"varint,12,opt,name=owner,proto3" json:"owner,omitempty"`
	SecOwner            string            `protobuf:"bytes,13,opt,name=sec_owner,json=secOwner,proto3" json:"sec_owner,omitempty"`
}

func (x *ConversationCoreInfo) Reset() {
	*x = ConversationCoreInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConversationCoreInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConversationCoreInfo) ProtoMessage() {}

func (x *ConversationCoreInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConversationCoreInfo.ProtoReflect.Descriptor instead.
func (*ConversationCoreInfo) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{28}
}

func (x *ConversationCoreInfo) GetConversationId() string {
	if x != nil {
		return x.ConversationId
	}
	return ""
}

func (x *ConversationCoreInfo) GetConversationShortId() int64 {
	if x != nil {
		return x.ConversationShortId
	}
	return 0
}

func (x *ConversationCoreInfo) GetConversationType() int32 {
	if x != nil {
		return x.ConversationType
	}
	return 0
}

func (x *ConversationCoreInfo) GetInfoVersion() int64 {
	if x != nil {
		return x.InfoVersion
	}
	return 0
}

func (x *ConversationCoreInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ConversationCoreInfo) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *ConversationCoreInfo) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *ConversationCoreInfo) GetInboxType() int32 {
	if x != nil {
		return x.InboxType
	}
	return 0
}

func (x *ConversationCoreInfo) GetNotice() string {
	if x != nil {
		return x.Notice
	}
	return ""
}

func (x *ConversationCoreInfo) GetExt() map[string]string {
	if x != nil {
		return x.Ext
	}
	return nil
}

func (x *ConversationCoreInfo) GetOwner() int64 {
	if x != nil {
		return x.Owner
	}
	return 0
}

func (x *ConversationCoreInfo) GetSecOwner() string {
	if x != nil {
		return x.SecOwner
	}
	return ""
}

type GetConversationCoreInfoResponseBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConversationCoreInfo *ConversationCoreInfo `protobuf:"bytes,1,opt,name=conversation_core_info,json=conversationCoreInfo,proto3" json:"conversation_core_info,omitempty"`
}

func (x *GetConversationCoreInfoResponseBody) Reset() {
	*x = GetConversationCoreInfoResponseBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConversationCoreInfoResponseBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConversationCoreInfoResponseBody) ProtoMessage() {}

func (x *GetConversationCoreInfoResponseBody) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConversationCoreInfoResponseBody.ProtoReflect.Descriptor instead.
func (*GetConversationCoreInfoResponseBody) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{29}
}

func (x *GetConversationCoreInfoResponseBody) GetConversationCoreInfo() *ConversationCoreInfo {
	if x != nil {
		return x.ConversationCoreInfo
	}
	return nil
}

type SetConversationCoreInfoResponseBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConversationCoreInfo *ConversationCoreInfo `protobuf:"bytes,1,opt,name=conversation_core_info,json=conversationCoreInfo,proto3" json:"conversation_core_info,omitempty"`
	Status               int32                 `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
	ExtraInfo            string                `protobuf:"bytes,3,opt,name=extra_info,json=extraInfo,proto3" json:"extra_info,omitempty"`
	CheckCode            int64                 `protobuf:"varint,4,opt,name=check_code,json=checkCode,proto3" json:"check_code,omitempty"`
	CheckMessage         string                `protobuf:"bytes,5,opt,name=check_message,json=checkMessage,proto3" json:"check_message,omitempty"`
}

func (x *SetConversationCoreInfoResponseBody) Reset() {
	*x = SetConversationCoreInfoResponseBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetConversationCoreInfoResponseBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetConversationCoreInfoResponseBody) ProtoMessage() {}

func (x *SetConversationCoreInfoResponseBody) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetConversationCoreInfoResponseBody.ProtoReflect.Descriptor instead.
func (*SetConversationCoreInfoResponseBody) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{30}
}

func (x *SetConversationCoreInfoResponseBody) GetConversationCoreInfo() *ConversationCoreInfo {
	if x != nil {
		return x.ConversationCoreInfo
	}
	return nil
}

func (x *SetConversationCoreInfoResponseBody) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *SetConversationCoreInfoResponseBody) GetExtraInfo() string {
	if x != nil {
		return x.ExtraInfo
	}
	return ""
}

func (x *SetConversationCoreInfoResponseBody) GetCheckCode() int64 {
	if x != nil {
		return x.CheckCode
	}
	return 0
}

func (x *SetConversationCoreInfoResponseBody) GetCheckMessage() string {
	if x != nil {
		return x.CheckMessage
	}
	return ""
}

type UpsertConversationCoreExtInfoResponseBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CoreInfo     *ConversationCoreInfo `protobuf:"bytes,1,opt,name=core_info,json=coreInfo,proto3" json:"core_info,omitempty"`
	Status       int32                 `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
	CheckCode    int64                 `protobuf:"varint,3,opt,name=check_code,json=checkCode,proto3" json:"check_code,omitempty"`
	CheckMessage string                `protobuf:"bytes,4,opt,name=check_message,json=checkMessage,proto3" json:"check_message,omitempty"`
	ExtraInfo    string                `protobuf:"bytes,5,opt,name=extra_info,json=extraInfo,proto3" json:"extra_info,omitempty"`
}

func (x *UpsertConversationCoreExtInfoResponseBody) Reset() {
	*x = UpsertConversationCoreExtInfoResponseBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertConversationCoreExtInfoResponseBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertConversationCoreExtInfoResponseBody) ProtoMessage() {}

func (x *UpsertConversationCoreExtInfoResponseBody) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertConversationCoreExtInfoResponseBody.ProtoReflect.Descriptor instead.
func (*UpsertConversationCoreExtInfoResponseBody) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{31}
}

func (x *UpsertConversationCoreExtInfoResponseBody) GetCoreInfo() *ConversationCoreInfo {
	if x != nil {
		return x.CoreInfo
	}
	return nil
}

func (x *UpsertConversationCoreExtInfoResponseBody) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *UpsertConversationCoreExtInfoResponseBody) GetCheckCode() int64 {
	if x != nil {
		return x.CheckCode
	}
	return 0
}

func (x *UpsertConversationCoreExtInfoResponseBody) GetCheckMessage() string {
	if x != nil {
		return x.CheckMessage
	}
	return ""
}

func (x *UpsertConversationCoreExtInfoResponseBody) GetExtraInfo() string {
	if x != nil {
		return x.ExtraInfo
	}
	return ""
}

type ConversationSettingInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConversationId      string            `protobuf:"bytes,1,opt,name=conversation_id,json=conversationId,proto3" json:"conversation_id,omitempty"`
	ConversationShortId int64             `protobuf:"varint,2,opt,name=conversation_short_id,json=conversationShortId,proto3" json:"conversation_short_id,omitempty"`
	ConversationType    int32             `protobuf:"varint,3,opt,name=conversation_type,json=conversationType,proto3" json:"conversation_type,omitempty"`
	MinIndex            int64             `protobuf:"varint,4,opt,name=min_index,json=minIndex,proto3" json:"min_index,omitempty"`
	ReadIndex           int64             `protobuf:"varint,5,opt,name=read_index,json=readIndex,proto3" json:"read_index,omitempty"`
	Mute                int32             `protobuf:"varint,6,opt,name=mute,proto3" json:"mute,omitempty"`
	StickOnTop          int32             `protobuf:"varint,7,opt,name=stick_on_top,json=stickOnTop,proto3" json:"stick_on_top,omitempty"`
	InboxType           int32             `protobuf:"varint,8,opt,name=inbox_type,json=inboxType,proto3" json:"inbox_type,omitempty"`
	Ext                 map[string]string `protobuf:"bytes,9,rep,name=ext,proto3" json:"ext,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	SettingVersion      int64             `protobuf:"varint,10,opt,name=setting_version,json=settingVersion,proto3" json:"setting_version,omitempty"`
	Favorite            int32             `protobuf:"varint,11,opt,name=favorite,proto3" json:"favorite,omitempty"`
	SetTopTime          int64             `protobuf:"varint,12,opt,name=set_top_time,json=setTopTime,proto3" json:"set_top_time,omitempty"`
	SetFavoriteTime     int64             `protobuf:"varint,13,opt,name=set_favorite_time,json=setFavoriteTime,proto3" json:"set_favorite_time,omitempty"`
}

func (x *ConversationSettingInfo) Reset() {
	*x = ConversationSettingInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConversationSettingInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConversationSettingInfo) ProtoMessage() {}

func (x *ConversationSettingInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConversationSettingInfo.ProtoReflect.Descriptor instead.
func (*ConversationSettingInfo) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{32}
}

func (x *ConversationSettingInfo) GetConversationId() string {
	if x != nil {
		return x.ConversationId
	}
	return ""
}

func (x *ConversationSettingInfo) GetConversationShortId() int64 {
	if x != nil {
		return x.ConversationShortId
	}
	return 0
}

func (x *ConversationSettingInfo) GetConversationType() int32 {
	if x != nil {
		return x.ConversationType
	}
	return 0
}

func (x *ConversationSettingInfo) GetMinIndex() int64 {
	if x != nil {
		return x.MinIndex
	}
	return 0
}

func (x *ConversationSettingInfo) GetReadIndex() int64 {
	if x != nil {
		return x.ReadIndex
	}
	return 0
}

func (x *ConversationSettingInfo) GetMute() int32 {
	if x != nil {
		return x.Mute
	}
	return 0
}

func (x *ConversationSettingInfo) GetStickOnTop() int32 {
	if x != nil {
		return x.StickOnTop
	}
	return 0
}

func (x *ConversationSettingInfo) GetInboxType() int32 {
	if x != nil {
		return x.InboxType
	}
	return 0
}

func (x *ConversationSettingInfo) GetExt() map[string]string {
	if x != nil {
		return x.Ext
	}
	return nil
}

func (x *ConversationSettingInfo) GetSettingVersion() int64 {
	if x != nil {
		return x.SettingVersion
	}
	return 0
}

func (x *ConversationSettingInfo) GetFavorite() int32 {
	if x != nil {
		return x.Favorite
	}
	return 0
}

func (x *ConversationSettingInfo) GetSetTopTime() int64 {
	if x != nil {
		return x.SetTopTime
	}
	return 0
}

func (x *ConversationSettingInfo) GetSetFavoriteTime() int64 {
	if x != nil {
		return x.SetFavoriteTime
	}
	return 0
}

type SetConversationSettingInfoResponseBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SettingInfo  *ConversationSettingInfo `protobuf:"bytes,1,opt,name=setting_info,json=settingInfo,proto3" json:"setting_info,omitempty"`
	Status       int32                    `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
	CheckCode    int64                    `protobuf:"varint,3,opt,name=check_code,json=checkCode,proto3" json:"check_code,omitempty"`
	CheckMessage string                   `protobuf:"bytes,4,opt,name=check_message,json=checkMessage,proto3" json:"check_message,omitempty"`
	ExtraInfo    string                   `protobuf:"bytes,5,opt,name=extra_info,json=extraInfo,proto3" json:"extra_info,omitempty"`
}

func (x *SetConversationSettingInfoResponseBody) Reset() {
	*x = SetConversationSettingInfoResponseBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetConversationSettingInfoResponseBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetConversationSettingInfoResponseBody) ProtoMessage() {}

func (x *SetConversationSettingInfoResponseBody) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetConversationSettingInfoResponseBody.ProtoReflect.Descriptor instead.
func (*SetConversationSettingInfoResponseBody) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{33}
}

func (x *SetConversationSettingInfoResponseBody) GetSettingInfo() *ConversationSettingInfo {
	if x != nil {
		return x.SettingInfo
	}
	return nil
}

func (x *SetConversationSettingInfoResponseBody) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *SetConversationSettingInfoResponseBody) GetCheckCode() int64 {
	if x != nil {
		return x.CheckCode
	}
	return 0
}

func (x *SetConversationSettingInfoResponseBody) GetCheckMessage() string {
	if x != nil {
		return x.CheckMessage
	}
	return ""
}

func (x *SetConversationSettingInfoResponseBody) GetExtraInfo() string {
	if x != nil {
		return x.ExtraInfo
	}
	return ""
}

type UpsertConversationSettingExtInfoResponseBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SettingInfo  *ConversationSettingInfo `protobuf:"bytes,1,opt,name=setting_info,json=settingInfo,proto3" json:"setting_info,omitempty"`
	Status       int32                    `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
	CheckCode    int64                    `protobuf:"varint,3,opt,name=check_code,json=checkCode,proto3" json:"check_code,omitempty"`
	CheckMessage string                   `protobuf:"bytes,4,opt,name=check_message,json=checkMessage,proto3" json:"check_message,omitempty"`
	ExtraInfo    string                   `protobuf:"bytes,5,opt,name=extra_info,json=extraInfo,proto3" json:"extra_info,omitempty"`
}

func (x *UpsertConversationSettingExtInfoResponseBody) Reset() {
	*x = UpsertConversationSettingExtInfoResponseBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertConversationSettingExtInfoResponseBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertConversationSettingExtInfoResponseBody) ProtoMessage() {}

func (x *UpsertConversationSettingExtInfoResponseBody) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertConversationSettingExtInfoResponseBody.ProtoReflect.Descriptor instead.
func (*UpsertConversationSettingExtInfoResponseBody) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{34}
}

func (x *UpsertConversationSettingExtInfoResponseBody) GetSettingInfo() *ConversationSettingInfo {
	if x != nil {
		return x.SettingInfo
	}
	return nil
}

func (x *UpsertConversationSettingExtInfoResponseBody) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *UpsertConversationSettingExtInfoResponseBody) GetCheckCode() int64 {
	if x != nil {
		return x.CheckCode
	}
	return 0
}

func (x *UpsertConversationSettingExtInfoResponseBody) GetCheckMessage() string {
	if x != nil {
		return x.CheckMessage
	}
	return ""
}

func (x *UpsertConversationSettingExtInfoResponseBody) GetExtraInfo() string {
	if x != nil {
		return x.ExtraInfo
	}
	return ""
}

type GetStrangerMessagesResponseBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Messages []*MessageBody `protobuf:"bytes,3,rep,name=messages,proto3" json:"messages,omitempty"`
}

func (x *GetStrangerMessagesResponseBody) Reset() {
	*x = GetStrangerMessagesResponseBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStrangerMessagesResponseBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStrangerMessagesResponseBody) ProtoMessage() {}

func (x *GetStrangerMessagesResponseBody) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStrangerMessagesResponseBody.ProtoReflect.Descriptor instead.
func (*GetStrangerMessagesResponseBody) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{35}
}

func (x *GetStrangerMessagesResponseBody) GetMessages() []*MessageBody {
	if x != nil {
		return x.Messages
	}
	return nil
}

type GetUploadTokenResponseBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessKey string   `protobuf:"bytes,1,opt,name=access_key,json=accessKey,proto3" json:"access_key,omitempty"`
	Hosts     []string `protobuf:"bytes,2,rep,name=hosts,proto3" json:"hosts,omitempty"`
	Token     string   `protobuf:"bytes,3,opt,name=token,proto3" json:"token,omitempty"`
	TokenType int32    `protobuf:"varint,4,opt,name=token_type,json=tokenType,proto3" json:"token_type,omitempty"`
}

func (x *GetUploadTokenResponseBody) Reset() {
	*x = GetUploadTokenResponseBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUploadTokenResponseBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUploadTokenResponseBody) ProtoMessage() {}

func (x *GetUploadTokenResponseBody) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUploadTokenResponseBody.ProtoReflect.Descriptor instead.
func (*GetUploadTokenResponseBody) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{36}
}

func (x *GetUploadTokenResponseBody) GetAccessKey() string {
	if x != nil {
		return x.AccessKey
	}
	return ""
}

func (x *GetUploadTokenResponseBody) GetHosts() []string {
	if x != nil {
		return x.Hosts
	}
	return nil
}

func (x *GetUploadTokenResponseBody) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *GetUploadTokenResponseBody) GetTokenType() int32 {
	if x != nil {
		return x.TokenType
	}
	return 0
}

type ImgOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tplv   string   `protobuf:"bytes,1,opt,name=tplv,proto3" json:"tplv,omitempty"`
	Params []string `protobuf:"bytes,2,rep,name=params,proto3" json:"params,omitempty"`
	Format string   `protobuf:"bytes,3,opt,name=format,proto3" json:"format,omitempty"`
	Urls   []string `protobuf:"bytes,100,rep,name=urls,proto3" json:"urls,omitempty"`
}

func (x *ImgOption) Reset() {
	*x = ImgOption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImgOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImgOption) ProtoMessage() {}

func (x *ImgOption) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImgOption.ProtoReflect.Descriptor instead.
func (*ImgOption) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{37}
}

func (x *ImgOption) GetTplv() string {
	if x != nil {
		return x.Tplv
	}
	return ""
}

func (x *ImgOption) GetParams() []string {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *ImgOption) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *ImgOption) GetUrls() []string {
	if x != nil {
		return x.Urls
	}
	return nil
}

type VideoOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vid       string   `protobuf:"bytes,1,opt,name=vid,proto3" json:"vid,omitempty"`
	CoverUri  string   `protobuf:"bytes,2,opt,name=cover_uri,json=coverUri,proto3" json:"cover_uri,omitempty"`
	Urls      []string `protobuf:"bytes,100,rep,name=urls,proto3" json:"urls,omitempty"`
	CoverUrls []string `protobuf:"bytes,101,rep,name=cover_urls,json=coverUrls,proto3" json:"cover_urls,omitempty"`
}

func (x *VideoOption) Reset() {
	*x = VideoOption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoOption) ProtoMessage() {}

func (x *VideoOption) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoOption.ProtoReflect.Descriptor instead.
func (*VideoOption) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{38}
}

func (x *VideoOption) GetVid() string {
	if x != nil {
		return x.Vid
	}
	return ""
}

func (x *VideoOption) GetCoverUri() string {
	if x != nil {
		return x.CoverUri
	}
	return ""
}

func (x *VideoOption) GetUrls() []string {
	if x != nil {
		return x.Urls
	}
	return nil
}

func (x *VideoOption) GetCoverUrls() []string {
	if x != nil {
		return x.CoverUrls
	}
	return nil
}

type AudioOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vid  string   `protobuf:"bytes,1,opt,name=vid,proto3" json:"vid,omitempty"`
	Urls []string `protobuf:"bytes,100,rep,name=urls,proto3" json:"urls,omitempty"`
}

func (x *AudioOption) Reset() {
	*x = AudioOption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AudioOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AudioOption) ProtoMessage() {}

func (x *AudioOption) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AudioOption.ProtoReflect.Descriptor instead.
func (*AudioOption) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{39}
}

func (x *AudioOption) GetVid() string {
	if x != nil {
		return x.Vid
	}
	return ""
}

func (x *AudioOption) GetUrls() []string {
	if x != nil {
		return x.Urls
	}
	return nil
}

type FileOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Urls []string `protobuf:"bytes,300,rep,name=urls,proto3" json:"urls,omitempty"`
}

func (x *FileOption) Reset() {
	*x = FileOption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileOption) ProtoMessage() {}

func (x *FileOption) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileOption.ProtoReflect.Descriptor instead.
func (*FileOption) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{40}
}

func (x *FileOption) GetUrls() []string {
	if x != nil {
		return x.Urls
	}
	return nil
}

type GetMediaUrlsResponseBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uri           string         `protobuf:"bytes,1,opt,name=uri,proto3" json:"uri,omitempty"`
	MediaType     int32          `protobuf:"varint,2,opt,name=media_type,json=mediaType,proto3" json:"media_type,omitempty"`
	ImgOptions    []*ImgOption   `protobuf:"bytes,3,rep,name=img_options,json=imgOptions,proto3" json:"img_options,omitempty"`
	VideoOptions  []*VideoOption `protobuf:"bytes,4,rep,name=video_options,json=videoOptions,proto3" json:"video_options,omitempty"`
	AudioOptions  []*AudioOption `protobuf:"bytes,5,rep,name=audio_options,json=audioOptions,proto3" json:"audio_options,omitempty"`
	FileOptions   []*FileOption  `protobuf:"bytes,6,rep,name=file_options,json=fileOptions,proto3" json:"file_options,omitempty"`
	EncryptedUrls []string       `protobuf:"bytes,7,rep,name=encrypted_urls,json=encryptedUrls,proto3" json:"encrypted_urls,omitempty"`
}

func (x *GetMediaUrlsResponseBody) Reset() {
	*x = GetMediaUrlsResponseBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMediaUrlsResponseBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMediaUrlsResponseBody) ProtoMessage() {}

func (x *GetMediaUrlsResponseBody) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMediaUrlsResponseBody.ProtoReflect.Descriptor instead.
func (*GetMediaUrlsResponseBody) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{41}
}

func (x *GetMediaUrlsResponseBody) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

func (x *GetMediaUrlsResponseBody) GetMediaType() int32 {
	if x != nil {
		return x.MediaType
	}
	return 0
}

func (x *GetMediaUrlsResponseBody) GetImgOptions() []*ImgOption {
	if x != nil {
		return x.ImgOptions
	}
	return nil
}

func (x *GetMediaUrlsResponseBody) GetVideoOptions() []*VideoOption {
	if x != nil {
		return x.VideoOptions
	}
	return nil
}

func (x *GetMediaUrlsResponseBody) GetAudioOptions() []*AudioOption {
	if x != nil {
		return x.AudioOptions
	}
	return nil
}

func (x *GetMediaUrlsResponseBody) GetFileOptions() []*FileOption {
	if x != nil {
		return x.FileOptions
	}
	return nil
}

func (x *GetMediaUrlsResponseBody) GetEncryptedUrls() []string {
	if x != nil {
		return x.EncryptedUrls
	}
	return nil
}

type GetTicketResponseBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ticket string `protobuf:"bytes,1,opt,name=ticket,proto3" json:"ticket,omitempty"`
}

func (x *GetTicketResponseBody) Reset() {
	*x = GetTicketResponseBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTicketResponseBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTicketResponseBody) ProtoMessage() {}

func (x *GetTicketResponseBody) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTicketResponseBody.ProtoReflect.Descriptor instead.
func (*GetTicketResponseBody) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{42}
}

func (x *GetTicketResponseBody) GetTicket() string {
	if x != nil {
		return x.Ticket
	}
	return ""
}

type ConversationInfoV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConversationId          string                   `protobuf:"bytes,1,opt,name=conversation_id,json=conversationId,proto3" json:"conversation_id,omitempty"`
	ConversationShortId     int64                    `protobuf:"varint,2,opt,name=conversation_short_id,json=conversationShortId,proto3" json:"conversation_short_id,omitempty"`
	ConversationType        int32                    `protobuf:"varint,3,opt,name=conversation_type,json=conversationType,proto3" json:"conversation_type,omitempty"`
	Ticket                  string                   `protobuf:"bytes,4,opt,name=ticket,proto3" json:"ticket,omitempty"`
	FirstPageParticipants   *ParticipantsPage        `protobuf:"bytes,6,opt,name=first_page_participants,json=firstPageParticipants,proto3" json:"first_page_participants,omitempty"`
	ParticipantsCount       int32                    `protobuf:"varint,7,opt,name=participants_count,json=participantsCount,proto3" json:"participants_count,omitempty"`
	IsParticipant           bool                     `protobuf:"varint,8,opt,name=is_participant,json=isParticipant,proto3" json:"is_participant,omitempty"`
	InboxType               int32                    `protobuf:"varint,9,opt,name=inbox_type,json=inboxType,proto3" json:"inbox_type,omitempty"`
	UserInfo                *Participant             `protobuf:"bytes,20,opt,name=user_info,json=userInfo,proto3" json:"user_info,omitempty"`
	ConversationCoreInfo    *ConversationCoreInfo    `protobuf:"bytes,50,opt,name=conversation_core_info,json=conversationCoreInfo,proto3" json:"conversation_core_info,omitempty"`
	ConversationSettingInfo *ConversationSettingInfo `protobuf:"bytes,51,opt,name=conversation_setting_info,json=conversationSettingInfo,proto3" json:"conversation_setting_info,omitempty"`
}

func (x *ConversationInfoV2) Reset() {
	*x = ConversationInfoV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConversationInfoV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConversationInfoV2) ProtoMessage() {}

func (x *ConversationInfoV2) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConversationInfoV2.ProtoReflect.Descriptor instead.
func (*ConversationInfoV2) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{43}
}

func (x *ConversationInfoV2) GetConversationId() string {
	if x != nil {
		return x.ConversationId
	}
	return ""
}

func (x *ConversationInfoV2) GetConversationShortId() int64 {
	if x != nil {
		return x.ConversationShortId
	}
	return 0
}

func (x *ConversationInfoV2) GetConversationType() int32 {
	if x != nil {
		return x.ConversationType
	}
	return 0
}

func (x *ConversationInfoV2) GetTicket() string {
	if x != nil {
		return x.Ticket
	}
	return ""
}

func (x *ConversationInfoV2) GetFirstPageParticipants() *ParticipantsPage {
	if x != nil {
		return x.FirstPageParticipants
	}
	return nil
}

func (x *ConversationInfoV2) GetParticipantsCount() int32 {
	if x != nil {
		return x.ParticipantsCount
	}
	return 0
}

func (x *ConversationInfoV2) GetIsParticipant() bool {
	if x != nil {
		return x.IsParticipant
	}
	return false
}

func (x *ConversationInfoV2) GetInboxType() int32 {
	if x != nil {
		return x.InboxType
	}
	return 0
}

func (x *ConversationInfoV2) GetUserInfo() *Participant {
	if x != nil {
		return x.UserInfo
	}
	return nil
}

func (x *ConversationInfoV2) GetConversationCoreInfo() *ConversationCoreInfo {
	if x != nil {
		return x.ConversationCoreInfo
	}
	return nil
}

func (x *ConversationInfoV2) GetConversationSettingInfo() *ConversationSettingInfo {
	if x != nil {
		return x.ConversationSettingInfo
	}
	return nil
}

type GetUserConversationListResponseBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*ConversationInfoV2 `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	HasMore    bool                  `protobuf:"varint,2,opt,name=has_more,json=hasMore,proto3" json:"has_more,omitempty"`
	NextCursor int64                 `protobuf:"varint,3,opt,name=next_cursor,json=nextCursor,proto3" json:"next_cursor,omitempty"`
}

func (x *GetUserConversationListResponseBody) Reset() {
	*x = GetUserConversationListResponseBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserConversationListResponseBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserConversationListResponseBody) ProtoMessage() {}

func (x *GetUserConversationListResponseBody) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserConversationListResponseBody.ProtoReflect.Descriptor instead.
func (*GetUserConversationListResponseBody) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{44}
}

func (x *GetUserConversationListResponseBody) GetList() []*ConversationInfoV2 {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *GetUserConversationListResponseBody) GetHasMore() bool {
	if x != nil {
		return x.HasMore
	}
	return false
}

func (x *GetUserConversationListResponseBody) GetNextCursor() int64 {
	if x != nil {
		return x.NextCursor
	}
	return 0
}

type BroadcastSendMessageResponseBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerMessageId int64  `protobuf:"varint,1,opt,name=server_message_id,json=serverMessageId,proto3" json:"server_message_id,omitempty"`
	ExtraInfo       string `protobuf:"bytes,2,opt,name=extra_info,json=extraInfo,proto3" json:"extra_info,omitempty"`
	Status          int32  `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`
	ClientMessageId string `protobuf:"bytes,4,opt,name=client_message_id,json=clientMessageId,proto3" json:"client_message_id,omitempty"`
	CheckCode       int64  `protobuf:"varint,5,opt,name=check_code,json=checkCode,proto3" json:"check_code,omitempty"`
	CheckMessage    string `protobuf:"bytes,6,opt,name=check_message,json=checkMessage,proto3" json:"check_message,omitempty"`
}

func (x *BroadcastSendMessageResponseBody) Reset() {
	*x = BroadcastSendMessageResponseBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BroadcastSendMessageResponseBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BroadcastSendMessageResponseBody) ProtoMessage() {}

func (x *BroadcastSendMessageResponseBody) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BroadcastSendMessageResponseBody.ProtoReflect.Descriptor instead.
func (*BroadcastSendMessageResponseBody) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{45}
}

func (x *BroadcastSendMessageResponseBody) GetServerMessageId() int64 {
	if x != nil {
		return x.ServerMessageId
	}
	return 0
}

func (x *BroadcastSendMessageResponseBody) GetExtraInfo() string {
	if x != nil {
		return x.ExtraInfo
	}
	return ""
}

func (x *BroadcastSendMessageResponseBody) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *BroadcastSendMessageResponseBody) GetClientMessageId() string {
	if x != nil {
		return x.ClientMessageId
	}
	return ""
}

func (x *BroadcastSendMessageResponseBody) GetCheckCode() int64 {
	if x != nil {
		return x.CheckCode
	}
	return 0
}

func (x *BroadcastSendMessageResponseBody) GetCheckMessage() string {
	if x != nil {
		return x.CheckMessage
	}
	return ""
}

type BroadcastRecvMessageResponseBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Messages   []*MessageBody `protobuf:"bytes,1,rep,name=messages,proto3" json:"messages,omitempty"`
	HasMore    bool           `protobuf:"varint,2,opt,name=has_more,json=hasMore,proto3" json:"has_more,omitempty"`
	NextCursor int64          `protobuf:"varint,3,opt,name=next_cursor,json=nextCursor,proto3" json:"next_cursor,omitempty"`
}

func (x *BroadcastRecvMessageResponseBody) Reset() {
	*x = BroadcastRecvMessageResponseBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BroadcastRecvMessageResponseBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BroadcastRecvMessageResponseBody) ProtoMessage() {}

func (x *BroadcastRecvMessageResponseBody) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BroadcastRecvMessageResponseBody.ProtoReflect.Descriptor instead.
func (*BroadcastRecvMessageResponseBody) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{46}
}

func (x *BroadcastRecvMessageResponseBody) GetMessages() []*MessageBody {
	if x != nil {
		return x.Messages
	}
	return nil
}

func (x *BroadcastRecvMessageResponseBody) GetHasMore() bool {
	if x != nil {
		return x.HasMore
	}
	return false
}

func (x *BroadcastRecvMessageResponseBody) GetNextCursor() int64 {
	if x != nil {
		return x.NextCursor
	}
	return 0
}

type BroadcastUserInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConversationShortId int64 `protobuf:"varint,1,opt,name=conversation_short_id,json=conversationShortId,proto3" json:"conversation_short_id,omitempty"`
	Counter             int32 `protobuf:"varint,2,opt,name=counter,proto3" json:"counter,omitempty"`
	ConversationType    int32 `protobuf:"varint,3,opt,name=conversation_type,json=conversationType,proto3" json:"conversation_type,omitempty"`
}

func (x *BroadcastUserInfo) Reset() {
	*x = BroadcastUserInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BroadcastUserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BroadcastUserInfo) ProtoMessage() {}

func (x *BroadcastUserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BroadcastUserInfo.ProtoReflect.Descriptor instead.
func (*BroadcastUserInfo) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{47}
}

func (x *BroadcastUserInfo) GetConversationShortId() int64 {
	if x != nil {
		return x.ConversationShortId
	}
	return 0
}

func (x *BroadcastUserInfo) GetCounter() int32 {
	if x != nil {
		return x.Counter
	}
	return 0
}

func (x *BroadcastUserInfo) GetConversationType() int32 {
	if x != nil {
		return x.ConversationType
	}
	return 0
}

type BroadcastUserCounterResponseBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*BroadcastUserInfo `protobuf:"bytes,1,rep,name=infos,proto3" json:"infos,omitempty"`
}

func (x *BroadcastUserCounterResponseBody) Reset() {
	*x = BroadcastUserCounterResponseBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BroadcastUserCounterResponseBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BroadcastUserCounterResponseBody) ProtoMessage() {}

func (x *BroadcastUserCounterResponseBody) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BroadcastUserCounterResponseBody.ProtoReflect.Descriptor instead.
func (*BroadcastUserCounterResponseBody) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{48}
}

func (x *BroadcastUserCounterResponseBody) GetInfos() []*BroadcastUserInfo {
	if x != nil {
		return x.Infos
	}
	return nil
}

type VoipInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId        int64  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	DeviceId      string `protobuf:"bytes,2,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	ChannelId     string `protobuf:"bytes,3,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	Token         string `protobuf:"bytes,4,opt,name=token,proto3" json:"token,omitempty"`
	Status        int32  `protobuf:"varint,5,opt,name=status,proto3" json:"status,omitempty"`
	CallerId      int64  `protobuf:"varint,6,opt,name=caller_id,json=callerId,proto3" json:"caller_id,omitempty"`
	CreatedTimeMs int64  `protobuf:"varint,7,opt,name=created_time_ms,json=createdTimeMs,proto3" json:"created_time_ms,omitempty"`
	UpdatedTimeMs int64  `protobuf:"varint,8,opt,name=updated_time_ms,json=updatedTimeMs,proto3" json:"updated_time_ms,omitempty"`
	ConShortId    int64  `protobuf:"varint,9,opt,name=con_short_id,json=conShortId,proto3" json:"con_short_id,omitempty"`
	VType         int32  `protobuf:"varint,10,opt,name=v_type,json=vType,proto3" json:"v_type,omitempty"`
	SrvMsgId      int64  `protobuf:"varint,11,opt,name=srv_msg_id,json=srvMsgId,proto3" json:"srv_msg_id,omitempty"`
}

func (x *VoipInfo) Reset() {
	*x = VoipInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VoipInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VoipInfo) ProtoMessage() {}

func (x *VoipInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VoipInfo.ProtoReflect.Descriptor instead.
func (*VoipInfo) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{49}
}

func (x *VoipInfo) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *VoipInfo) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *VoipInfo) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *VoipInfo) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *VoipInfo) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *VoipInfo) GetCallerId() int64 {
	if x != nil {
		return x.CallerId
	}
	return 0
}

func (x *VoipInfo) GetCreatedTimeMs() int64 {
	if x != nil {
		return x.CreatedTimeMs
	}
	return 0
}

func (x *VoipInfo) GetUpdatedTimeMs() int64 {
	if x != nil {
		return x.UpdatedTimeMs
	}
	return 0
}

func (x *VoipInfo) GetConShortId() int64 {
	if x != nil {
		return x.ConShortId
	}
	return 0
}

func (x *VoipInfo) GetVType() int32 {
	if x != nil {
		return x.VType
	}
	return 0
}

func (x *VoipInfo) GetSrvMsgId() int64 {
	if x != nil {
		return x.SrvMsgId
	}
	return 0
}

type CreateVoipResponseBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info       *VoipInfo `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
	StatusCode int32     `protobuf:"varint,2,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	VoipMode   int32     `protobuf:"varint,3,opt,name=voip_mode,json=voipMode,proto3" json:"voip_mode,omitempty"`
}

func (x *CreateVoipResponseBody) Reset() {
	*x = CreateVoipResponseBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateVoipResponseBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateVoipResponseBody) ProtoMessage() {}

func (x *CreateVoipResponseBody) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateVoipResponseBody.ProtoReflect.Descriptor instead.
func (*CreateVoipResponseBody) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{50}
}

func (x *CreateVoipResponseBody) GetInfo() *VoipInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *CreateVoipResponseBody) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *CreateVoipResponseBody) GetVoipMode() int32 {
	if x != nil {
		return x.VoipMode
	}
	return 0
}

type CallVoipResponseBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info         *VoipInfo `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
	CalleeIds    []int64   `protobuf:"varint,2,rep,packed,name=callee_ids,json=calleeIds,proto3" json:"callee_ids,omitempty"`
	Status       int32     `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`
	ExtraInfo    string    `protobuf:"bytes,4,opt,name=extra_info,json=extraInfo,proto3" json:"extra_info,omitempty"`
	CheckCode    int64     `protobuf:"varint,5,opt,name=check_code,json=checkCode,proto3" json:"check_code,omitempty"`
	CheckMessage string    `protobuf:"bytes,6,opt,name=check_message,json=checkMessage,proto3" json:"check_message,omitempty"`
	RefChannelId string    `protobuf:"bytes,7,opt,name=ref_channel_id,json=refChannelId,proto3" json:"ref_channel_id,omitempty"`
	VoipMode     int32     `protobuf:"varint,8,opt,name=voip_mode,json=voipMode,proto3" json:"voip_mode,omitempty"`
}

func (x *CallVoipResponseBody) Reset() {
	*x = CallVoipResponseBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallVoipResponseBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallVoipResponseBody) ProtoMessage() {}

func (x *CallVoipResponseBody) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallVoipResponseBody.ProtoReflect.Descriptor instead.
func (*CallVoipResponseBody) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{51}
}

func (x *CallVoipResponseBody) GetInfo() *VoipInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *CallVoipResponseBody) GetCalleeIds() []int64 {
	if x != nil {
		return x.CalleeIds
	}
	return nil
}

func (x *CallVoipResponseBody) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *CallVoipResponseBody) GetExtraInfo() string {
	if x != nil {
		return x.ExtraInfo
	}
	return ""
}

func (x *CallVoipResponseBody) GetCheckCode() int64 {
	if x != nil {
		return x.CheckCode
	}
	return 0
}

func (x *CallVoipResponseBody) GetCheckMessage() string {
	if x != nil {
		return x.CheckMessage
	}
	return ""
}

func (x *CallVoipResponseBody) GetRefChannelId() string {
	if x != nil {
		return x.RefChannelId
	}
	return ""
}

func (x *CallVoipResponseBody) GetVoipMode() int32 {
	if x != nil {
		return x.VoipMode
	}
	return 0
}

type UpdateVoipResponseBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info       *VoipInfo `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
	StatusCode int32     `protobuf:"varint,2,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	VoipMode   int32     `protobuf:"varint,3,opt,name=voip_mode,json=voipMode,proto3" json:"voip_mode,omitempty"`
	Callees    []int64   `protobuf:"varint,4,rep,packed,name=callees,proto3" json:"callees,omitempty"`
}

func (x *UpdateVoipResponseBody) Reset() {
	*x = UpdateVoipResponseBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateVoipResponseBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateVoipResponseBody) ProtoMessage() {}

func (x *UpdateVoipResponseBody) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateVoipResponseBody.ProtoReflect.Descriptor instead.
func (*UpdateVoipResponseBody) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{52}
}

func (x *UpdateVoipResponseBody) GetInfo() *VoipInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *UpdateVoipResponseBody) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *UpdateVoipResponseBody) GetVoipMode() int32 {
	if x != nil {
		return x.VoipMode
	}
	return 0
}

func (x *UpdateVoipResponseBody) GetCallees() []int64 {
	if x != nil {
		return x.Callees
	}
	return nil
}

type Profile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NickName      string `protobuf:"bytes,1,opt,name=nick_name,json=nickName,proto3" json:"nick_name,omitempty"`
	Protrait      string `protobuf:"bytes,2,opt,name=protrait,proto3" json:"protrait,omitempty"`
	BasicExtInfo  string `protobuf:"bytes,3,opt,name=basic_ext_info,json=basicExtInfo,proto3" json:"basic_ext_info,omitempty"`
	DetailExtInfo string `protobuf:"bytes,4,opt,name=detail_ext_info,json=detailExtInfo,proto3" json:"detail_ext_info,omitempty"`
}

func (x *Profile) Reset() {
	*x = Profile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Profile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Profile) ProtoMessage() {}

func (x *Profile) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Profile.ProtoReflect.Descriptor instead.
func (*Profile) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{53}
}

func (x *Profile) GetNickName() string {
	if x != nil {
		return x.NickName
	}
	return ""
}

func (x *Profile) GetProtrait() string {
	if x != nil {
		return x.Protrait
	}
	return ""
}

func (x *Profile) GetBasicExtInfo() string {
	if x != nil {
		return x.BasicExtInfo
	}
	return ""
}

func (x *Profile) GetDetailExtInfo() string {
	if x != nil {
		return x.DetailExtInfo
	}
	return ""
}

type ProfileGetInfoResponseBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Profile *Profile `protobuf:"bytes,1,opt,name=profile,proto3" json:"profile,omitempty"`
}

func (x *ProfileGetInfoResponseBody) Reset() {
	*x = ProfileGetInfoResponseBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProfileGetInfoResponseBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfileGetInfoResponseBody) ProtoMessage() {}

func (x *ProfileGetInfoResponseBody) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProfileGetInfoResponseBody.ProtoReflect.Descriptor instead.
func (*ProfileGetInfoResponseBody) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{54}
}

func (x *ProfileGetInfoResponseBody) GetProfile() *Profile {
	if x != nil {
		return x.Profile
	}
	return nil
}

type Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConfName  string `protobuf:"bytes,1,opt,name=conf_name,json=confName,proto3" json:"conf_name,omitempty"`
	ConfValue string `protobuf:"bytes,2,opt,name=conf_value,json=confValue,proto3" json:"conf_value,omitempty"`
}

func (x *Config) Reset() {
	*x = Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config) ProtoMessage() {}

func (x *Config) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config.ProtoReflect.Descriptor instead.
func (*Config) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{55}
}

func (x *Config) GetConfName() string {
	if x != nil {
		return x.ConfName
	}
	return ""
}

func (x *Config) GetConfValue() string {
	if x != nil {
		return x.ConfValue
	}
	return ""
}

type GetConfigsResponseBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version int32     `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	Configs []*Config `protobuf:"bytes,2,rep,name=configs,proto3" json:"configs,omitempty"`
}

func (x *GetConfigsResponseBody) Reset() {
	*x = GetConfigsResponseBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConfigsResponseBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConfigsResponseBody) ProtoMessage() {}

func (x *GetConfigsResponseBody) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConfigsResponseBody.ProtoReflect.Descriptor instead.
func (*GetConfigsResponseBody) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{56}
}

func (x *GetConfigsResponseBody) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *GetConfigsResponseBody) GetConfigs() []*Config {
	if x != nil {
		return x.Configs
	}
	return nil
}

type UnReadCountReportResponseBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SetTotalStatus bool    `protobuf:"varint,1,opt,name=set_total_status,json=setTotalStatus,proto3" json:"set_total_status,omitempty"`
	FailedConvList []int64 `protobuf:"varint,2,rep,packed,name=failed_conv_list,json=failedConvList,proto3" json:"failed_conv_list,omitempty"`
}

func (x *UnReadCountReportResponseBody) Reset() {
	*x = UnReadCountReportResponseBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnReadCountReportResponseBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnReadCountReportResponseBody) ProtoMessage() {}

func (x *UnReadCountReportResponseBody) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnReadCountReportResponseBody.ProtoReflect.Descriptor instead.
func (*UnReadCountReportResponseBody) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{57}
}

func (x *UnReadCountReportResponseBody) GetSetTotalStatus() bool {
	if x != nil {
		return x.SetTotalStatus
	}
	return false
}

func (x *UnReadCountReportResponseBody) GetFailedConvList() []int64 {
	if x != nil {
		return x.FailedConvList
	}
	return nil
}

type BlockMembersResponseBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FailedMembers []int64 `protobuf:"varint,1,rep,packed,name=failed_members,json=failedMembers,proto3" json:"failed_members,omitempty"`
}

func (x *BlockMembersResponseBody) Reset() {
	*x = BlockMembersResponseBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockMembersResponseBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockMembersResponseBody) ProtoMessage() {}

func (x *BlockMembersResponseBody) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockMembersResponseBody.ProtoReflect.Descriptor instead.
func (*BlockMembersResponseBody) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{58}
}

func (x *BlockMembersResponseBody) GetFailedMembers() []int64 {
	if x != nil {
		return x.FailedMembers
	}
	return nil
}

type GetUnreadCountResponseBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalUnreadCount int64           `protobuf:"varint,1,opt,name=total_unread_count,json=totalUnreadCount,proto3" json:"total_unread_count,omitempty"`
	ConvUnreadCount  map[int64]int64 `protobuf:"bytes,2,rep,name=conv_unread_count,json=convUnreadCount,proto3" json:"conv_unread_count,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	FailedConvList   []int64         `protobuf:"varint,3,rep,packed,name=failed_conv_list,json=failedConvList,proto3" json:"failed_conv_list,omitempty"`
}

func (x *GetUnreadCountResponseBody) Reset() {
	*x = GetUnreadCountResponseBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUnreadCountResponseBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUnreadCountResponseBody) ProtoMessage() {}

func (x *GetUnreadCountResponseBody) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUnreadCountResponseBody.ProtoReflect.Descriptor instead.
func (*GetUnreadCountResponseBody) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{59}
}

func (x *GetUnreadCountResponseBody) GetTotalUnreadCount() int64 {
	if x != nil {
		return x.TotalUnreadCount
	}
	return 0
}

func (x *GetUnreadCountResponseBody) GetConvUnreadCount() map[int64]int64 {
	if x != nil {
		return x.ConvUnreadCount
	}
	return nil
}

func (x *GetUnreadCountResponseBody) GetFailedConvList() []int64 {
	if x != nil {
		return x.FailedConvList
	}
	return nil
}

type BlockUserInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId     int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	CreateTime int64 `protobuf:"varint,2,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
}

func (x *BlockUserInfo) Reset() {
	*x = BlockUserInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockUserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockUserInfo) ProtoMessage() {}

func (x *BlockUserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockUserInfo.ProtoReflect.Descriptor instead.
func (*BlockUserInfo) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{60}
}

func (x *BlockUserInfo) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *BlockUserInfo) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

type GetBlockListResponseBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserInfo   []*BlockUserInfo `protobuf:"bytes,1,rep,name=user_info,json=userInfo,proto3" json:"user_info,omitempty"`
	HasMore    bool             `protobuf:"varint,2,opt,name=has_more,json=hasMore,proto3" json:"has_more,omitempty"`
	NextCursor int64            `protobuf:"varint,3,opt,name=next_cursor,json=nextCursor,proto3" json:"next_cursor,omitempty"`
}

func (x *GetBlockListResponseBody) Reset() {
	*x = GetBlockListResponseBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBlockListResponseBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlockListResponseBody) ProtoMessage() {}

func (x *GetBlockListResponseBody) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlockListResponseBody.ProtoReflect.Descriptor instead.
func (*GetBlockListResponseBody) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{61}
}

func (x *GetBlockListResponseBody) GetUserInfo() []*BlockUserInfo {
	if x != nil {
		return x.UserInfo
	}
	return nil
}

func (x *GetBlockListResponseBody) GetHasMore() bool {
	if x != nil {
		return x.HasMore
	}
	return false
}

func (x *GetBlockListResponseBody) GetNextCursor() int64 {
	if x != nil {
		return x.NextCursor
	}
	return 0
}

type SetBlocklistResponseBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FailedList []int64 `protobuf:"varint,1,rep,packed,name=failed_list,json=failedList,proto3" json:"failed_list,omitempty"`
}

func (x *SetBlocklistResponseBody) Reset() {
	*x = SetBlocklistResponseBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetBlocklistResponseBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetBlocklistResponseBody) ProtoMessage() {}

func (x *SetBlocklistResponseBody) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetBlocklistResponseBody.ProtoReflect.Descriptor instead.
func (*SetBlocklistResponseBody) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{62}
}

func (x *SetBlocklistResponseBody) GetFailedList() []int64 {
	if x != nil {
		return x.FailedList
	}
	return nil
}

type CheckInBlockListResponseBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InBlocklist bool `protobuf:"varint,1,opt,name=in_blocklist,json=inBlocklist,proto3" json:"in_blocklist,omitempty"`
}

func (x *CheckInBlockListResponseBody) Reset() {
	*x = CheckInBlockListResponseBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckInBlockListResponseBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckInBlockListResponseBody) ProtoMessage() {}

func (x *CheckInBlockListResponseBody) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckInBlockListResponseBody.ProtoReflect.Descriptor instead.
func (*CheckInBlockListResponseBody) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{63}
}

func (x *CheckInBlockListResponseBody) GetInBlocklist() bool {
	if x != nil {
		return x.InBlocklist
	}
	return false
}

type MarkMessageResponseBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerMessageId int64  `protobuf:"varint,1,opt,name=server_message_id,json=serverMessageId,proto3" json:"server_message_id,omitempty"`
	CheckCode       int64  `protobuf:"varint,2,opt,name=check_code,json=checkCode,proto3" json:"check_code,omitempty"`
	CheckMessage    string `protobuf:"bytes,3,opt,name=check_message,json=checkMessage,proto3" json:"check_message,omitempty"`
	Status          int32  `protobuf:"varint,4,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *MarkMessageResponseBody) Reset() {
	*x = MarkMessageResponseBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarkMessageResponseBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkMessageResponseBody) ProtoMessage() {}

func (x *MarkMessageResponseBody) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkMessageResponseBody.ProtoReflect.Descriptor instead.
func (*MarkMessageResponseBody) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{64}
}

func (x *MarkMessageResponseBody) GetServerMessageId() int64 {
	if x != nil {
		return x.ServerMessageId
	}
	return 0
}

func (x *MarkMessageResponseBody) GetCheckCode() int64 {
	if x != nil {
		return x.CheckCode
	}
	return 0
}

func (x *MarkMessageResponseBody) GetCheckMessage() string {
	if x != nil {
		return x.CheckMessage
	}
	return ""
}

func (x *MarkMessageResponseBody) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

type PullMarkMessageResponseBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Messages   []*MessageBody `protobuf:"bytes,1,rep,name=messages,proto3" json:"messages,omitempty"`
	HasMore    bool           `protobuf:"varint,2,opt,name=has_more,json=hasMore,proto3" json:"has_more,omitempty"`
	NextCursor int64          `protobuf:"varint,3,opt,name=next_cursor,json=nextCursor,proto3" json:"next_cursor,omitempty"`
}

func (x *PullMarkMessageResponseBody) Reset() {
	*x = PullMarkMessageResponseBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PullMarkMessageResponseBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PullMarkMessageResponseBody) ProtoMessage() {}

func (x *PullMarkMessageResponseBody) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PullMarkMessageResponseBody.ProtoReflect.Descriptor instead.
func (*PullMarkMessageResponseBody) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{65}
}

func (x *PullMarkMessageResponseBody) GetMessages() []*MessageBody {
	if x != nil {
		return x.Messages
	}
	return nil
}

func (x *PullMarkMessageResponseBody) GetHasMore() bool {
	if x != nil {
		return x.HasMore
	}
	return false
}

func (x *PullMarkMessageResponseBody) GetNextCursor() int64 {
	if x != nil {
		return x.NextCursor
	}
	return 0
}

type MarkMsgUnreadCountReportResponseBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SetTotalStatus bool    `protobuf:"varint,1,opt,name=set_total_status,json=setTotalStatus,proto3" json:"set_total_status,omitempty"`
	FailedTagList  []int64 `protobuf:"varint,2,rep,packed,name=failed_tag_list,json=failedTagList,proto3" json:"failed_tag_list,omitempty"`
}

func (x *MarkMsgUnreadCountReportResponseBody) Reset() {
	*x = MarkMsgUnreadCountReportResponseBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarkMsgUnreadCountReportResponseBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkMsgUnreadCountReportResponseBody) ProtoMessage() {}

func (x *MarkMsgUnreadCountReportResponseBody) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkMsgUnreadCountReportResponseBody.ProtoReflect.Descriptor instead.
func (*MarkMsgUnreadCountReportResponseBody) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{66}
}

func (x *MarkMsgUnreadCountReportResponseBody) GetSetTotalStatus() bool {
	if x != nil {
		return x.SetTotalStatus
	}
	return false
}

func (x *MarkMsgUnreadCountReportResponseBody) GetFailedTagList() []int64 {
	if x != nil {
		return x.FailedTagList
	}
	return nil
}

type MarkMsgGetUnreadCountResponseBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalCount     int64           `protobuf:"varint,1,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	TagUnreadCount map[int64]int64 `protobuf:"bytes,2,rep,name=tag_unread_count,json=tagUnreadCount,proto3" json:"tag_unread_count,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	FailedTagList  []int64         `protobuf:"varint,3,rep,packed,name=failed_tag_list,json=failedTagList,proto3" json:"failed_tag_list,omitempty"`
}

func (x *MarkMsgGetUnreadCountResponseBody) Reset() {
	*x = MarkMsgGetUnreadCountResponseBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarkMsgGetUnreadCountResponseBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkMsgGetUnreadCountResponseBody) ProtoMessage() {}

func (x *MarkMsgGetUnreadCountResponseBody) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkMsgGetUnreadCountResponseBody.ProtoReflect.Descriptor instead.
func (*MarkMsgGetUnreadCountResponseBody) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{67}
}

func (x *MarkMsgGetUnreadCountResponseBody) GetTotalCount() int64 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *MarkMsgGetUnreadCountResponseBody) GetTagUnreadCount() map[int64]int64 {
	if x != nil {
		return x.TagUnreadCount
	}
	return nil
}

func (x *MarkMsgGetUnreadCountResponseBody) GetFailedTagList() []int64 {
	if x != nil {
		return x.FailedTagList
	}
	return nil
}

type BatchUnmarkMessageResponseBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerMessageId int64  `protobuf:"varint,1,opt,name=server_message_id,json=serverMessageId,proto3" json:"server_message_id,omitempty"`
	CheckCode       int64  `protobuf:"varint,2,opt,name=check_code,json=checkCode,proto3" json:"check_code,omitempty"`
	CheckMessage    string `protobuf:"bytes,3,opt,name=check_message,json=checkMessage,proto3" json:"check_message,omitempty"`
	Status          int32  `protobuf:"varint,4,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *BatchUnmarkMessageResponseBody) Reset() {
	*x = BatchUnmarkMessageResponseBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchUnmarkMessageResponseBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchUnmarkMessageResponseBody) ProtoMessage() {}

func (x *BatchUnmarkMessageResponseBody) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchUnmarkMessageResponseBody.ProtoReflect.Descriptor instead.
func (*BatchUnmarkMessageResponseBody) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{68}
}

func (x *BatchUnmarkMessageResponseBody) GetServerMessageId() int64 {
	if x != nil {
		return x.ServerMessageId
	}
	return 0
}

func (x *BatchUnmarkMessageResponseBody) GetCheckCode() int64 {
	if x != nil {
		return x.CheckCode
	}
	return 0
}

func (x *BatchUnmarkMessageResponseBody) GetCheckMessage() string {
	if x != nil {
		return x.CheckMessage
	}
	return ""
}

func (x *BatchUnmarkMessageResponseBody) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

type MessagesPerUserInitV2ResponseBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Messages      []*MessageBody        `protobuf:"bytes,1,rep,name=messages,proto3" json:"messages,omitempty"`
	Conversations []*ConversationInfoV2 `protobuf:"bytes,2,rep,name=conversations,proto3" json:"conversations,omitempty"`
	PerUserCursor int64                 `protobuf:"varint,3,opt,name=per_user_cursor,json=perUserCursor,proto3" json:"per_user_cursor,omitempty"`
	NextCursor    int64                 `protobuf:"varint,4,opt,name=next_cursor,json=nextCursor,proto3" json:"next_cursor,omitempty"`
	HasMore       bool                  `protobuf:"varint,5,opt,name=has_more,json=hasMore,proto3" json:"has_more,omitempty"`
}

func (x *MessagesPerUserInitV2ResponseBody) Reset() {
	*x = MessagesPerUserInitV2ResponseBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessagesPerUserInitV2ResponseBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessagesPerUserInitV2ResponseBody) ProtoMessage() {}

func (x *MessagesPerUserInitV2ResponseBody) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessagesPerUserInitV2ResponseBody.ProtoReflect.Descriptor instead.
func (*MessagesPerUserInitV2ResponseBody) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{69}
}

func (x *MessagesPerUserInitV2ResponseBody) GetMessages() []*MessageBody {
	if x != nil {
		return x.Messages
	}
	return nil
}

func (x *MessagesPerUserInitV2ResponseBody) GetConversations() []*ConversationInfoV2 {
	if x != nil {
		return x.Conversations
	}
	return nil
}

func (x *MessagesPerUserInitV2ResponseBody) GetPerUserCursor() int64 {
	if x != nil {
		return x.PerUserCursor
	}
	return 0
}

func (x *MessagesPerUserInitV2ResponseBody) GetNextCursor() int64 {
	if x != nil {
		return x.NextCursor
	}
	return 0
}

func (x *MessagesPerUserInitV2ResponseBody) GetHasMore() bool {
	if x != nil {
		return x.HasMore
	}
	return false
}

type ResponseBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SendMessageBody                        *SendMessageResponseBody                        `protobuf:"bytes,100,opt,name=send_message_body,json=sendMessageBody,proto3" json:"send_message_body,omitempty"`
	MessagesPerUserBody                    *MessagesPerUserResponseBody                    `protobuf:"bytes,200,opt,name=messages_per_user_body,json=messagesPerUserBody,proto3" json:"messages_per_user_body,omitempty"`
	MessagesPerUserInitV2Body              *MessagesPerUserInitV2ResponseBody              `protobuf:"bytes,203,opt,name=messages_per_user_init_v2_body,json=messagesPerUserInitV2Body,proto3" json:"messages_per_user_init_v2_body,omitempty"`
	GetMessageByIdBody                     *GetMessageByIdResponseBody                     `protobuf:"bytes,211,opt,name=get_message_by_id_body,json=getMessageByIdBody,proto3" json:"get_message_by_id_body,omitempty"`
	MessagesInConversationBody             *MessagesInConversationResponseBody             `protobuf:"bytes,301,opt,name=messages_in_conversation_body,json=messagesInConversationBody,proto3" json:"messages_in_conversation_body,omitempty"`
	GetMessagesCheckinfoInConversationBody *GetMessagesCheckInfoInConversationResponseBody `protobuf:"bytes,302,opt,name=get_messages_checkinfo_in_conversation_body,json=getMessagesCheckinfoInConversationBody,proto3" json:"get_messages_checkinfo_in_conversation_body,omitempty"`
	HasNewMessageNotify                    *NewMessageNotify                               `protobuf:"bytes,500,opt,name=has_new_message_notify,json=hasNewMessageNotify,proto3" json:"has_new_message_notify,omitempty"`
	GetConversationsCheckinfoBody          *GetConversationsCheckInfoResponseBody          `protobuf:"bytes,615,opt,name=get_conversations_checkinfo_body,json=getConversationsCheckinfoBody,proto3" json:"get_conversations_checkinfo_body,omitempty"`
	ConversationParticipantsBody           *ConversationParticipantsListResponseBody       `protobuf:"bytes,605,opt,name=conversation_participants_body,json=conversationParticipantsBody,proto3" json:"conversation_participants_body,omitempty"`
	ConversationAddParticipantsBody        *ConversationAddParticipantsResponseBody        `protobuf:"bytes,650,opt,name=conversation_add_participants_body,json=conversationAddParticipantsBody,proto3" json:"conversation_add_participants_body,omitempty"`
	ConversationRemoveParticipantsBody     *ConversationRemoveParticipantsResponseBody     `protobuf:"bytes,651,opt,name=conversation_remove_participants_body,json=conversationRemoveParticipantsBody,proto3" json:"conversation_remove_participants_body,omitempty"`
	UpdateConversationParticipantBody      *UpdateConversationParticipantResponseBody      `protobuf:"bytes,655,opt,name=update_conversation_participant_body,json=updateConversationParticipantBody,proto3" json:"update_conversation_participant_body,omitempty"`
	ModifyMessagePropertyBody              *ModifyMessagePropertyResponseBody              `protobuf:"bytes,705,opt,name=modify_message_property_body,json=modifyMessagePropertyBody,proto3" json:"modify_message_property_body,omitempty"`
	GetConversationCoreInfoBody            *GetConversationCoreInfoResponseBody            `protobuf:"bytes,901,opt,name=get_conversation_core_info_body,json=getConversationCoreInfoBody,proto3" json:"get_conversation_core_info_body,omitempty"`
	SetConversationCoreInfoBody            *SetConversationCoreInfoResponseBody            `protobuf:"bytes,902,opt,name=set_conversation_core_info_body,json=setConversationCoreInfoBody,proto3" json:"set_conversation_core_info_body,omitempty"`
	UpsertConversationCoreExtInfoBody      *UpsertConversationCoreExtInfoResponseBody      `protobuf:"bytes,904,opt,name=upsert_conversation_core_ext_info_body,json=upsertConversationCoreExtInfoBody,proto3" json:"upsert_conversation_core_ext_info_body,omitempty"`
	SetConversationSettingInfoBody         *SetConversationSettingInfoResponseBody         `protobuf:"bytes,921,opt,name=set_conversation_setting_info_body,json=setConversationSettingInfoBody,proto3" json:"set_conversation_setting_info_body,omitempty"`
	UpsertConversationSettingExtInfoBody   *UpsertConversationSettingExtInfoResponseBody   `protobuf:"bytes,922,opt,name=upsert_conversation_setting_ext_info_body,json=upsertConversationSettingExtInfoBody,proto3" json:"upsert_conversation_setting_ext_info_body,omitempty"`
	GetStrangerMessagesBody                *GetStrangerMessagesResponseBody                `protobuf:"bytes,1001,opt,name=get_stranger_messages_body,json=getStrangerMessagesBody,proto3" json:"get_stranger_messages_body,omitempty"`
	GetUploadTokenBody                     *GetUploadTokenResponseBody                     `protobuf:"bytes,2003,opt,name=get_upload_token_body,json=getUploadTokenBody,proto3" json:"get_upload_token_body,omitempty"`
	GetMediaUrlsBody                       *GetMediaUrlsResponseBody                       `protobuf:"bytes,2004,opt,name=get_media_urls_body,json=getMediaUrlsBody,proto3" json:"get_media_urls_body,omitempty"`
	GetTicketBody                          *GetTicketResponseBody                          `protobuf:"bytes,2005,opt,name=get_ticket_body,json=getTicketBody,proto3" json:"get_ticket_body,omitempty"`
	GetConversationListBody                *GetUserConversationListResponseBody            `protobuf:"bytes,2006,opt,name=get_conversation_list_body,json=getConversationListBody,proto3" json:"get_conversation_list_body,omitempty"`
	BroadcastSendMessageBody               *BroadcastSendMessageResponseBody               `protobuf:"bytes,2007,opt,name=broadcast_send_message_body,json=broadcastSendMessageBody,proto3" json:"broadcast_send_message_body,omitempty"`
	BroadcastRecvMessageBody               *BroadcastRecvMessageResponseBody               `protobuf:"bytes,2008,opt,name=broadcast_recv_message_body,json=broadcastRecvMessageBody,proto3" json:"broadcast_recv_message_body,omitempty"`
	BroadcastUserCounterBody               *BroadcastUserCounterResponseBody               `protobuf:"bytes,2009,opt,name=broadcast_user_counter_body,json=broadcastUserCounterBody,proto3" json:"broadcast_user_counter_body,omitempty"`
	CreateVoipBody                         *CreateVoipResponseBody                         `protobuf:"bytes,2011,opt,name=create_voip_body,json=createVoipBody,proto3" json:"create_voip_body,omitempty"`
	CallVoipBody                           *CallVoipResponseBody                           `protobuf:"bytes,2012,opt,name=call_voip_body,json=callVoipBody,proto3" json:"call_voip_body,omitempty"`
	UpdateVoipBody                         *UpdateVoipResponseBody                         `protobuf:"bytes,2013,opt,name=update_voip_body,json=updateVoipBody,proto3" json:"update_voip_body,omitempty"`
	ProfileGetInfo                         *ProfileGetInfoResponseBody                     `protobuf:"bytes,2015,opt,name=profile_get_info,json=profileGetInfo,proto3" json:"profile_get_info,omitempty"`
	GetConfigsBody                         *GetConfigsResponseBody                         `protobuf:"bytes,2017,opt,name=get_configs_body,json=getConfigsBody,proto3" json:"get_configs_body,omitempty"`
	UnreadCountReportBody                  *UnReadCountReportResponseBody                  `protobuf:"bytes,2018,opt,name=unread_count_report_body,json=unreadCountReportBody,proto3" json:"unread_count_report_body,omitempty"`
	BlockMembersBody                       *BlockMembersResponseBody                       `protobuf:"bytes,2019,opt,name=block_members_body,json=blockMembersBody,proto3" json:"block_members_body,omitempty"`
	GetUnreadCountBody                     *GetUnreadCountResponseBody                     `protobuf:"bytes,2030,opt,name=get_unread_count_body,json=getUnreadCountBody,proto3" json:"get_unread_count_body,omitempty"`
	GetBlocklistBody                       *GetBlockListResponseBody                       `protobuf:"bytes,2032,opt,name=get_blocklist_body,json=getBlocklistBody,proto3" json:"get_blocklist_body,omitempty"`
	SetBlocklistBody                       *SetBlocklistResponseBody                       `protobuf:"bytes,2033,opt,name=set_blocklist_body,json=setBlocklistBody,proto3" json:"set_blocklist_body,omitempty"`
	CheckInBlocklistBody                   *CheckInBlockListResponseBody                   `protobuf:"bytes,2034,opt,name=check_in_blocklist_body,json=checkInBlocklistBody,proto3" json:"check_in_blocklist_body,omitempty"`
	MarkMessageBody                        *MarkMessageResponseBody                        `protobuf:"bytes,2036,opt,name=mark_message_body,json=markMessageBody,proto3" json:"mark_message_body,omitempty"`
	PullMarkMessageBody                    *PullMarkMessageResponseBody                    `protobuf:"bytes,2037,opt,name=pull_mark_message_body,json=pullMarkMessageBody,proto3" json:"pull_mark_message_body,omitempty"`
	MarkMsgUnreadCountReport               *MarkMsgUnreadCountReportResponseBody           `protobuf:"bytes,2054,opt,name=mark_msg_unread_count_report,json=markMsgUnreadCountReport,proto3" json:"mark_msg_unread_count_report,omitempty"`
	MarkMsgGetUnreadCount                  *MarkMsgGetUnreadCountResponseBody              `protobuf:"bytes,2055,opt,name=mark_msg_get_unread_count,json=markMsgGetUnreadCount,proto3" json:"mark_msg_get_unread_count,omitempty"`
	BatchUnmarkMessage                     *BatchUnmarkMessageResponseBody                 `protobuf:"bytes,2056,opt,name=batch_unmark_message,json=batchUnmarkMessage,proto3" json:"batch_unmark_message,omitempty"`
}

func (x *ResponseBody) Reset() {
	*x = ResponseBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseBody) ProtoMessage() {}

func (x *ResponseBody) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseBody.ProtoReflect.Descriptor instead.
func (*ResponseBody) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{70}
}

func (x *ResponseBody) GetSendMessageBody() *SendMessageResponseBody {
	if x != nil {
		return x.SendMessageBody
	}
	return nil
}

func (x *ResponseBody) GetMessagesPerUserBody() *MessagesPerUserResponseBody {
	if x != nil {
		return x.MessagesPerUserBody
	}
	return nil
}

func (x *ResponseBody) GetMessagesPerUserInitV2Body() *MessagesPerUserInitV2ResponseBody {
	if x != nil {
		return x.MessagesPerUserInitV2Body
	}
	return nil
}

func (x *ResponseBody) GetGetMessageByIdBody() *GetMessageByIdResponseBody {
	if x != nil {
		return x.GetMessageByIdBody
	}
	return nil
}

func (x *ResponseBody) GetMessagesInConversationBody() *MessagesInConversationResponseBody {
	if x != nil {
		return x.MessagesInConversationBody
	}
	return nil
}

func (x *ResponseBody) GetGetMessagesCheckinfoInConversationBody() *GetMessagesCheckInfoInConversationResponseBody {
	if x != nil {
		return x.GetMessagesCheckinfoInConversationBody
	}
	return nil
}

func (x *ResponseBody) GetHasNewMessageNotify() *NewMessageNotify {
	if x != nil {
		return x.HasNewMessageNotify
	}
	return nil
}

func (x *ResponseBody) GetGetConversationsCheckinfoBody() *GetConversationsCheckInfoResponseBody {
	if x != nil {
		return x.GetConversationsCheckinfoBody
	}
	return nil
}

func (x *ResponseBody) GetConversationParticipantsBody() *ConversationParticipantsListResponseBody {
	if x != nil {
		return x.ConversationParticipantsBody
	}
	return nil
}

func (x *ResponseBody) GetConversationAddParticipantsBody() *ConversationAddParticipantsResponseBody {
	if x != nil {
		return x.ConversationAddParticipantsBody
	}
	return nil
}

func (x *ResponseBody) GetConversationRemoveParticipantsBody() *ConversationRemoveParticipantsResponseBody {
	if x != nil {
		return x.ConversationRemoveParticipantsBody
	}
	return nil
}

func (x *ResponseBody) GetUpdateConversationParticipantBody() *UpdateConversationParticipantResponseBody {
	if x != nil {
		return x.UpdateConversationParticipantBody
	}
	return nil
}

func (x *ResponseBody) GetModifyMessagePropertyBody() *ModifyMessagePropertyResponseBody {
	if x != nil {
		return x.ModifyMessagePropertyBody
	}
	return nil
}

func (x *ResponseBody) GetGetConversationCoreInfoBody() *GetConversationCoreInfoResponseBody {
	if x != nil {
		return x.GetConversationCoreInfoBody
	}
	return nil
}

func (x *ResponseBody) GetSetConversationCoreInfoBody() *SetConversationCoreInfoResponseBody {
	if x != nil {
		return x.SetConversationCoreInfoBody
	}
	return nil
}

func (x *ResponseBody) GetUpsertConversationCoreExtInfoBody() *UpsertConversationCoreExtInfoResponseBody {
	if x != nil {
		return x.UpsertConversationCoreExtInfoBody
	}
	return nil
}

func (x *ResponseBody) GetSetConversationSettingInfoBody() *SetConversationSettingInfoResponseBody {
	if x != nil {
		return x.SetConversationSettingInfoBody
	}
	return nil
}

func (x *ResponseBody) GetUpsertConversationSettingExtInfoBody() *UpsertConversationSettingExtInfoResponseBody {
	if x != nil {
		return x.UpsertConversationSettingExtInfoBody
	}
	return nil
}

func (x *ResponseBody) GetGetStrangerMessagesBody() *GetStrangerMessagesResponseBody {
	if x != nil {
		return x.GetStrangerMessagesBody
	}
	return nil
}

func (x *ResponseBody) GetGetUploadTokenBody() *GetUploadTokenResponseBody {
	if x != nil {
		return x.GetUploadTokenBody
	}
	return nil
}

func (x *ResponseBody) GetGetMediaUrlsBody() *GetMediaUrlsResponseBody {
	if x != nil {
		return x.GetMediaUrlsBody
	}
	return nil
}

func (x *ResponseBody) GetGetTicketBody() *GetTicketResponseBody {
	if x != nil {
		return x.GetTicketBody
	}
	return nil
}

func (x *ResponseBody) GetGetConversationListBody() *GetUserConversationListResponseBody {
	if x != nil {
		return x.GetConversationListBody
	}
	return nil
}

func (x *ResponseBody) GetBroadcastSendMessageBody() *BroadcastSendMessageResponseBody {
	if x != nil {
		return x.BroadcastSendMessageBody
	}
	return nil
}

func (x *ResponseBody) GetBroadcastRecvMessageBody() *BroadcastRecvMessageResponseBody {
	if x != nil {
		return x.BroadcastRecvMessageBody
	}
	return nil
}

func (x *ResponseBody) GetBroadcastUserCounterBody() *BroadcastUserCounterResponseBody {
	if x != nil {
		return x.BroadcastUserCounterBody
	}
	return nil
}

func (x *ResponseBody) GetCreateVoipBody() *CreateVoipResponseBody {
	if x != nil {
		return x.CreateVoipBody
	}
	return nil
}

func (x *ResponseBody) GetCallVoipBody() *CallVoipResponseBody {
	if x != nil {
		return x.CallVoipBody
	}
	return nil
}

func (x *ResponseBody) GetUpdateVoipBody() *UpdateVoipResponseBody {
	if x != nil {
		return x.UpdateVoipBody
	}
	return nil
}

func (x *ResponseBody) GetProfileGetInfo() *ProfileGetInfoResponseBody {
	if x != nil {
		return x.ProfileGetInfo
	}
	return nil
}

func (x *ResponseBody) GetGetConfigsBody() *GetConfigsResponseBody {
	if x != nil {
		return x.GetConfigsBody
	}
	return nil
}

func (x *ResponseBody) GetUnreadCountReportBody() *UnReadCountReportResponseBody {
	if x != nil {
		return x.UnreadCountReportBody
	}
	return nil
}

func (x *ResponseBody) GetBlockMembersBody() *BlockMembersResponseBody {
	if x != nil {
		return x.BlockMembersBody
	}
	return nil
}

func (x *ResponseBody) GetGetUnreadCountBody() *GetUnreadCountResponseBody {
	if x != nil {
		return x.GetUnreadCountBody
	}
	return nil
}

func (x *ResponseBody) GetGetBlocklistBody() *GetBlockListResponseBody {
	if x != nil {
		return x.GetBlocklistBody
	}
	return nil
}

func (x *ResponseBody) GetSetBlocklistBody() *SetBlocklistResponseBody {
	if x != nil {
		return x.SetBlocklistBody
	}
	return nil
}

func (x *ResponseBody) GetCheckInBlocklistBody() *CheckInBlockListResponseBody {
	if x != nil {
		return x.CheckInBlocklistBody
	}
	return nil
}

func (x *ResponseBody) GetMarkMessageBody() *MarkMessageResponseBody {
	if x != nil {
		return x.MarkMessageBody
	}
	return nil
}

func (x *ResponseBody) GetPullMarkMessageBody() *PullMarkMessageResponseBody {
	if x != nil {
		return x.PullMarkMessageBody
	}
	return nil
}

func (x *ResponseBody) GetMarkMsgUnreadCountReport() *MarkMsgUnreadCountReportResponseBody {
	if x != nil {
		return x.MarkMsgUnreadCountReport
	}
	return nil
}

func (x *ResponseBody) GetMarkMsgGetUnreadCount() *MarkMsgGetUnreadCountResponseBody {
	if x != nil {
		return x.MarkMsgGetUnreadCount
	}
	return nil
}

func (x *ResponseBody) GetBatchUnmarkMessage() *BatchUnmarkMessageResponseBody {
	if x != nil {
		return x.BatchUnmarkMessage
	}
	return nil
}

type Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd                    int32             `protobuf:"varint,1,opt,name=cmd,proto3" json:"cmd,omitempty"`
	SequenceId             int64             `protobuf:"varint,2,opt,name=sequence_id,json=sequenceId,proto3" json:"sequence_id,omitempty"`
	StatusCode             int32             `protobuf:"varint,3,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	ErrorDesc              string            `protobuf:"bytes,4,opt,name=error_desc,json=errorDesc,proto3" json:"error_desc,omitempty"`
	InboxType              int32             `protobuf:"varint,5,opt,name=inbox_type,json=inboxType,proto3" json:"inbox_type,omitempty"`
	Body                   *ResponseBody     `protobuf:"bytes,6,opt,name=body,proto3" json:"body,omitempty"`
	LogId                  string            `protobuf:"bytes,7,opt,name=log_id,json=logId,proto3" json:"log_id,omitempty"`
	Headers                map[string]string `protobuf:"bytes,8,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	StartTimeStamp         int64             `protobuf:"varint,9,opt,name=start_time_stamp,json=startTimeStamp,proto3" json:"start_time_stamp,omitempty"`
	RequestArrivedTime     int64             `protobuf:"varint,10,opt,name=request_arrived_time,json=requestArrivedTime,proto3" json:"request_arrived_time,omitempty"`
	ServerExecutionEndTime int64             `protobuf:"varint,11,opt,name=server_execution_end_time,json=serverExecutionEndTime,proto3" json:"server_execution_end_time,omitempty"`
}

func (x *Response) Reset() {
	*x = Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{71}
}

func (x *Response) GetCmd() int32 {
	if x != nil {
		return x.Cmd
	}
	return 0
}

func (x *Response) GetSequenceId() int64 {
	if x != nil {
		return x.SequenceId
	}
	return 0
}

func (x *Response) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *Response) GetErrorDesc() string {
	if x != nil {
		return x.ErrorDesc
	}
	return ""
}

func (x *Response) GetInboxType() int32 {
	if x != nil {
		return x.InboxType
	}
	return 0
}

func (x *Response) GetBody() *ResponseBody {
	if x != nil {
		return x.Body
	}
	return nil
}

func (x *Response) GetLogId() string {
	if x != nil {
		return x.LogId
	}
	return ""
}

func (x *Response) GetHeaders() map[string]string {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *Response) GetStartTimeStamp() int64 {
	if x != nil {
		return x.StartTimeStamp
	}
	return 0
}

func (x *Response) GetRequestArrivedTime() int64 {
	if x != nil {
		return x.RequestArrivedTime
	}
	return 0
}

func (x *Response) GetServerExecutionEndTime() int64 {
	if x != nil {
		return x.ServerExecutionEndTime
	}
	return 0
}

var File_ws_payload_proto protoreflect.FileDescriptor

var file_ws_payload_proto_rawDesc = []byte{
	0x0a, 0x10, 0x77, 0x73, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x30, 0x0a, 0x06, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0xf0, 0x01, 0x0a, 0x05, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x65, 0x71, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x73,
	0x65, 0x71, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x6f, 0x67, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x05, 0x6c, 0x6f, 0x67, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x21, 0x0a, 0x07,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x07, 0x2e,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12,
	0x29, 0x0a, 0x10, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x65, 0x6e, 0x63, 0x6f, 0x64,
	0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x79, 0x0a, 0x20, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x50, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x69, 0x74, 0x56, 0x32,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x63,
	0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x63, 0x75, 0x72,
	0x73, 0x6f, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x65, 0x77, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6e, 0x65, 0x77, 0x55, 0x73, 0x65, 0x72, 0x12, 0x22,
	0x0a, 0x0d, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x69, 0x6e, 0x69, 0x74, 0x53, 0x75, 0x62, 0x54, 0x79,
	0x70, 0x65, 0x22, 0x74, 0x0a, 0x0b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64,
	0x79, 0x12, 0x65, 0x0a, 0x1e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x70, 0x65,
	0x72, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x76, 0x32, 0x5f, 0x62,
	0x6f, 0x64, 0x79, 0x18, 0xcb, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x50, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x69, 0x74,
	0x56, 0x32, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x19, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x50, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e,
	0x69, 0x74, 0x56, 0x32, 0x42, 0x6f, 0x64, 0x79, 0x22, 0x09, 0x0a, 0x07, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x22, 0x82, 0x05, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x63, 0x6d,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65,
	0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x64, 0x6b, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x64, 0x6b, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x72, 0x65, 0x66, 0x65, 0x72, 0x12,
	0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x20, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x04, 0x62,
	0x6f, 0x64, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x73, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2f, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x0a, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x1b, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x61, 0x75, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65, 0x1a, 0x3a, 0x0a, 0x0c,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x86, 0x01, 0x0a, 0x09, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x22, 0xec, 0x01, 0x0a, 0x17, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x2a, 0x0a,
	0x11, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x2a, 0x0a, 0x11, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0xcc, 0x02, 0x0a, 0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x64, 0x79,
	0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x49, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x69, 0x6e, 0x5f, 0x63,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x13, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x6e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22,
	0x83, 0x01, 0x0a, 0x1b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x50, 0x65, 0x72, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x12,
	0x28, 0x0a, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x52,
	0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x65, 0x78,
	0x74, 0x5f, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x6e, 0x65, 0x78, 0x74, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x68, 0x61,
	0x73, 0x5f, 0x6d, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x68, 0x61,
	0x73, 0x4d, 0x6f, 0x72, 0x65, 0x22, 0x47, 0x0a, 0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x04,
	0x62, 0x6f, 0x64, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x22, 0x45,
	0x0a, 0x1a, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x79, 0x49, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x27, 0x0a, 0x08,
	0x6d, 0x73, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x6d, 0x73,
	0x67, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x8a, 0x01, 0x0a, 0x22, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x49, 0x6e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x28, 0x0a, 0x08,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x08, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x63,
	0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6e, 0x65, 0x78,
	0x74, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x68, 0x61, 0x73, 0x5f, 0x6d,
	0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x68, 0x61, 0x73, 0x4d, 0x6f,
	0x72, 0x65, 0x22, 0xa7, 0x01, 0x0a, 0x11, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x24, 0x0a, 0x0e, 0x68, 0x65, 0x61, 0x64,
	0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0c, 0x68, 0x65, 0x61, 0x64, 0x4d, 0x73, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x24,
	0x0a, 0x0e, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x74, 0x61, 0x69, 0x6c, 0x4d, 0x73, 0x67, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x73, 0x67, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6d, 0x73, 0x67, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x5f, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x73, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x65, 0x73, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x22, 0xd5, 0x01, 0x0a,
	0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x6e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x12,
	0x42, 0x0a, 0x13, 0x6d, 0x73, 0x67, 0x73, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e, 0x66,
	0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x11, 0x6d, 0x73, 0x67, 0x73, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e, 0x66, 0x6f, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x14, 0x72, 0x65, 0x61, 0x6c, 0x5f, 0x6d, 0x73, 0x67, 0x5f,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x11, 0x72, 0x65, 0x61, 0x6c, 0x4d, 0x73, 0x67, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x5f, 0x72,
	0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x11, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65,
	0x4e, 0x65, 0x78, 0x74, 0x22, 0x9c, 0x02, 0x0a, 0x0d, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x32, 0x0a, 0x15, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x69,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x69, 0x6e, 0x74, 0x12, 0x28,
	0x0a, 0x10, 0x72, 0x65, 0x66, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x72, 0x65, 0x66, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3a, 0x0a, 0x19, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x17, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x72,
	0x6f, 0x6f, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x17,
	0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x6e,
	0x76, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x72,
	0x6f, 0x6f, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x22, 0xe1, 0x02, 0x0a, 0x10, 0x4e, 0x65, 0x77, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x63, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x26, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x69,
	0x6f, 0x75, 0x73, 0x5f, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0e, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72,
	0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6e, 0x65, 0x78, 0x74, 0x43, 0x75, 0x72, 0x73, 0x6f,
	0x72, 0x12, 0x32, 0x0a, 0x15, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x69, 0x6e, 0x5f, 0x63, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x13, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x6e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x0c, 0x72, 0x65, 0x66, 0x5f, 0x6d, 0x73, 0x67,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x72, 0x65, 0x66,
	0x4d, 0x73, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xa1, 0x01, 0x0a, 0x15, 0x43, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x13, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x68,
	0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2b,
	0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x22, 0x7f, 0x0a, 0x25, 0x47,
	0x65, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x42, 0x6f, 0x64, 0x79, 0x12, 0x56, 0x0a, 0x1b, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x43, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x19, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xca, 0x01, 0x0a,
	0x0b, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x6f, 0x72, 0x74, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x17,
	0x0a, 0x07, 0x73, 0x65, 0x63, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x65, 0x63, 0x55, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65,
	0x64, 0x12, 0x26, 0x0a, 0x0f, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6c, 0x65, 0x66, 0x74,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x77, 0x0a, 0x10, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x50, 0x61, 0x67, 0x65, 0x12, 0x30, 0x0a,
	0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e,
	0x74, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x12,
	0x19, 0x0a, 0x08, 0x68, 0x61, 0x73, 0x5f, 0x6d, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x68, 0x61, 0x73, 0x4d, 0x6f, 0x72, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x75,
	0x72, 0x73, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x63, 0x75, 0x72, 0x73,
	0x6f, 0x72, 0x22, 0x6a, 0x0a, 0x28, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x3e,
	0x0a, 0x11, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x5f, 0x70,
	0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x50, 0x61, 0x67, 0x65, 0x52, 0x10, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x50, 0x61, 0x67, 0x65, 0x22, 0x37,
	0x0a, 0x0a, 0x53, 0x65, 0x63, 0x55, 0x69, 0x64, 0x50, 0x61, 0x69, 0x72, 0x12, 0x10, 0x0a, 0x03,
	0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x73, 0x65, 0x63, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x65, 0x63, 0x55, 0x69, 0x64, 0x22, 0x94, 0x03, 0x0a, 0x27, 0x43, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x64, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42,
	0x6f, 0x64, 0x79, 0x12, 0x31, 0x0a, 0x14, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x03, 0x52, 0x13, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x2f, 0x0a, 0x13, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x03, 0x52, 0x12, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x1d, 0x0a, 0x0a, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x45, 0x0a, 0x18, 0x73, 0x65, 0x63, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x53, 0x65, 0x63, 0x55, 0x69, 0x64, 0x50, 0x61, 0x69,
	0x72, 0x52, 0x16, 0x73, 0x65, 0x63, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x43, 0x0a, 0x17, 0x73, 0x65, 0x63,
	0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x6e, 0x74, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x53, 0x65, 0x63,
	0x55, 0x69, 0x64, 0x50, 0x61, 0x69, 0x72, 0x52, 0x15, 0x73, 0x65, 0x63, 0x46, 0x61, 0x69, 0x6c,
	0x65, 0x64, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x22, 0x9d,
	0x02, 0x0a, 0x2a, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x2f, 0x0a,
	0x13, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x12, 0x66, 0x61, 0x69, 0x6c,
	0x65, 0x64, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x43, 0x0a, 0x17, 0x66, 0x61, 0x69,
	0x6c, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x63, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x6e, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x53, 0x65, 0x63,
	0x55, 0x69, 0x64, 0x50, 0x61, 0x69, 0x72, 0x52, 0x15, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x53,
	0x65, 0x63, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x22, 0xd6,
	0x01, 0x0a, 0x29, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x2e, 0x0a, 0x0b,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x52,
	0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x78, 0x74, 0x72, 0x61, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x55, 0x0a, 0x21, 0x4d, 0x6f, 0x64, 0x69, 0x66,
	0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x05,
	0x0a, 0x03, 0x45, 0x78, 0x74, 0x22, 0xd3, 0x03, 0x0a, 0x14, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x27,
	0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x63,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x66, 0x6f,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x69, 0x6e, 0x66, 0x6f, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64,
	0x65, 0x73, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x62, 0x6f, 0x78,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x69, 0x6e, 0x62,
	0x6f, 0x78, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x12, 0x30,
	0x0a, 0x03, 0x65, 0x78, 0x74, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x43, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x72, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x03, 0x65, 0x78, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x63, 0x5f, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x63, 0x4f, 0x77,
	0x6e, 0x65, 0x72, 0x1a, 0x36, 0x0a, 0x08, 0x45, 0x78, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x72, 0x0a, 0x23, 0x47,
	0x65, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f,
	0x64, 0x79, 0x12, 0x4b, 0x0a, 0x16, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x14, 0x63, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0xed, 0x01, 0x0a, 0x23, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x4b, 0x0a, 0x16, 0x63, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x14,
	0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x72, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x65, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22,
	0xda, 0x01, 0x0a, 0x29, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x72, 0x65, 0x45, 0x78, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x32, 0x0a,
	0x09, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x63, 0x6f, 0x72, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x65, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xb4, 0x04, 0x0a,
	0x17, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x13, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x68,
	0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x10, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x69, 0x6e, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x72, 0x65, 0x61, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x12,
	0x0a, 0x04, 0x6d, 0x75, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6d, 0x75,
	0x74, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x5f, 0x6f, 0x6e, 0x5f, 0x74,
	0x6f, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x4f,
	0x6e, 0x54, 0x6f, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x33, 0x0a, 0x03, 0x65, 0x78, 0x74, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x03, 0x65, 0x78, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x12, 0x20, 0x0a,
	0x0c, 0x73, 0x65, 0x74, 0x5f, 0x74, 0x6f, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x65, 0x74, 0x54, 0x6f, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x2a, 0x0a, 0x11, 0x73, 0x65, 0x74, 0x5f, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x73, 0x65, 0x74, 0x46,
	0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0x36, 0x0a, 0x08, 0x45,
	0x78, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0xe0, 0x01, 0x0a, 0x26, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x3b,
	0x0a, 0x0c, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xe6, 0x01, 0x0a, 0x2c, 0x55, 0x70, 0x73, 0x65, 0x72,
	0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x45, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x3b, 0x0a, 0x0c, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0x4b, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x53, 0x74, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x72, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f,
	0x64, 0x79, 0x12, 0x28, 0x0a, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x6f,
	0x64, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x22, 0x86, 0x01, 0x0a,
	0x1a, 0x47, 0x65, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x68, 0x6f,
	0x73, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x68, 0x6f, 0x73, 0x74, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x22, 0x63, 0x0a, 0x09, 0x49, 0x6d, 0x67, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x70, 0x6c, 0x76, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x70, 0x6c, 0x76, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x72, 0x6c, 0x73, 0x18, 0x64,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x75, 0x72, 0x6c, 0x73, 0x22, 0x6f, 0x0a, 0x0b, 0x56, 0x69,
	0x64, 0x65, 0x6f, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x76, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x55, 0x72, 0x69, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x72, 0x6c, 0x73,
	0x18, 0x64, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x75, 0x72, 0x6c, 0x73, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x73, 0x18, 0x65, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x09, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x73, 0x22, 0x33, 0x0a, 0x0b, 0x41,
	0x75, 0x64, 0x69, 0x6f, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x76, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x75, 0x72, 0x6c, 0x73, 0x18, 0x64, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x75, 0x72, 0x6c, 0x73,
	0x22, 0x21, 0x0a, 0x0a, 0x46, 0x69, 0x6c, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x13,
	0x0a, 0x04, 0x75, 0x72, 0x6c, 0x73, 0x18, 0xac, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x75,
	0x72, 0x6c, 0x73, 0x22, 0xb5, 0x02, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x61,
	0x55, 0x72, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75,
	0x72, 0x69, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x2b, 0x0a, 0x0b, 0x69, 0x6d, 0x67, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x49, 0x6d, 0x67, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0a, 0x69, 0x6d, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x31,
	0x0a, 0x0d, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x31, 0x0a, 0x0d, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2e, 0x0a, 0x0c, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x46, 0x69, 0x6c,
	0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x66, 0x69, 0x6c, 0x65, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65,
	0x64, 0x5f, 0x75, 0x72, 0x6c, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x55, 0x72, 0x6c, 0x73, 0x22, 0x2f, 0x0a, 0x15, 0x47,
	0x65, 0x74, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x42, 0x6f, 0x64, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x22, 0xc4, 0x04, 0x0a,
	0x12, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x56, 0x32, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x15,
	0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x68, 0x6f,
	0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x63, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x49, 0x64,
	0x12, 0x2b, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x63, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74,
	0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x49, 0x0a, 0x17, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,
	0x70, 0x61, 0x6e, 0x74, 0x73, 0x50, 0x61, 0x67, 0x65, 0x52, 0x15, 0x66, 0x69, 0x72, 0x73, 0x74,
	0x50, 0x61, 0x67, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73,
	0x12, 0x2d, 0x0a, 0x12, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x25, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x69, 0x6e, 0x62, 0x6f,
	0x78, 0x54, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x4b, 0x0a, 0x16, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x14, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x54, 0x0a,
	0x19, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x17, 0x63, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x49,
	0x6e, 0x66, 0x6f, 0x22, 0x8a, 0x01, 0x0a, 0x23, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x27, 0x0a, 0x04, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x43, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x56, 0x32, 0x52, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x68, 0x61, 0x73, 0x5f, 0x6d, 0x6f, 0x72, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x68, 0x61, 0x73, 0x4d, 0x6f, 0x72, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6e, 0x65, 0x78, 0x74, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72,
	0x22, 0xf5, 0x01, 0x0a, 0x20, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x53, 0x65,
	0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x88, 0x01, 0x0a, 0x20, 0x42, 0x72, 0x6f,
	0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x52, 0x65, 0x63, 0x76, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x28, 0x0a,
	0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x08, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x68, 0x61, 0x73, 0x5f, 0x6d,
	0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x68, 0x61, 0x73, 0x4d, 0x6f,
	0x72, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x73, 0x6f,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6e, 0x65, 0x78, 0x74, 0x43, 0x75, 0x72,
	0x73, 0x6f, 0x72, 0x22, 0x8e, 0x01, 0x0a, 0x11, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x22, 0x4c, 0x0a, 0x20, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x28, 0x0a, 0x05, 0x69, 0x6e, 0x66, 0x6f,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63,
	0x61, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x69, 0x6e, 0x66,
	0x6f, 0x73, 0x22, 0xd1, 0x02, 0x0a, 0x08, 0x56, 0x6f, 0x69, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x26, 0x0a, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x6d, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0d, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73, 0x12,
	0x20, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x49,
	0x64, 0x12, 0x15, 0x0a, 0x06, 0x76, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x76, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x0a, 0x73, 0x72, 0x76, 0x5f,
	0x6d, 0x73, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x72,
	0x76, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x22, 0x75, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x56, 0x6f, 0x69, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79,
	0x12, 0x1d, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09,
	0x2e, 0x56, 0x6f, 0x69, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12,
	0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x76, 0x6f, 0x69, 0x70, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x76, 0x6f, 0x69, 0x70, 0x4d, 0x6f, 0x64, 0x65, 0x22, 0x92, 0x02,
	0x0a, 0x14, 0x43, 0x61, 0x6c, 0x6c, 0x56, 0x6f, 0x69, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x1d, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x56, 0x6f, 0x69, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x65, 0x5f,
	0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x09, 0x63, 0x61, 0x6c, 0x6c, 0x65,
	0x65, 0x49, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x65, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x24, 0x0a, 0x0e, 0x72, 0x65, 0x66, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x6f, 0x69, 0x70, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x76, 0x6f, 0x69, 0x70, 0x4d, 0x6f,
	0x64, 0x65, 0x22, 0x8f, 0x01, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x6f, 0x69,
	0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x1d, 0x0a,
	0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x56, 0x6f,
	0x69, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x0a, 0x0b,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x76, 0x6f, 0x69, 0x70, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x76, 0x6f, 0x69, 0x70, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x61,
	0x6c, 0x6c, 0x65, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x03, 0x52, 0x07, 0x63, 0x61, 0x6c,
	0x6c, 0x65, 0x65, 0x73, 0x22, 0x90, 0x01, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x69, 0x63, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x72, 0x6f, 0x74, 0x72, 0x61, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x70, 0x72, 0x6f, 0x74, 0x72, 0x61, 0x69, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x62, 0x61, 0x73,
	0x69, 0x63, 0x5f, 0x65, 0x78, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x62, 0x61, 0x73, 0x69, 0x63, 0x45, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x26, 0x0a, 0x0f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x65, 0x78, 0x74, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x45, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x40, 0x0a, 0x1a, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x22, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x52, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x22, 0x44, 0x0a, 0x06, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x66, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x55, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x07, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x22, 0x73, 0x0a, 0x1d, 0x55, 0x6e, 0x52, 0x65, 0x61, 0x64,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x65, 0x74, 0x5f, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0e, 0x73, 0x65, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x28, 0x0a, 0x10, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x76,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0e, 0x66, 0x61, 0x69,
	0x6c, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x76, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x41, 0x0a, 0x18, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52,
	0x0d, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x22, 0x96,
	0x02, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x2c, 0x0a,
	0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x5c, 0x0a, 0x11, 0x63,
	0x6f, 0x6e, 0x76, 0x5f, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x6e, 0x72, 0x65,
	0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42,
	0x6f, 0x64, 0x79, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x76, 0x55, 0x6e,
	0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x66, 0x61, 0x69,
	0x6c, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x03, 0x52, 0x0e, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x76, 0x4c,
	0x69, 0x73, 0x74, 0x1a, 0x42, 0x0a, 0x14, 0x43, 0x6f, 0x6e, 0x76, 0x55, 0x6e, 0x72, 0x65, 0x61,
	0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x49, 0x0a, 0x0d, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x22, 0x83, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x12,
	0x2b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x0a, 0x08,
	0x68, 0x61, 0x73, 0x5f, 0x6d, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x68, 0x61, 0x73, 0x4d, 0x6f, 0x72, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x5f,
	0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6e, 0x65,
	0x78, 0x74, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x22, 0x3b, 0x0a, 0x18, 0x53, 0x65, 0x74, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x42, 0x6f, 0x64, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0a, 0x66, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x41, 0x0a, 0x1c, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x5f, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x6e, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xa1, 0x01, 0x0a, 0x17, 0x4d, 0x61, 0x72,
	0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x42, 0x6f, 0x64, 0x79, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x83, 0x01, 0x0a,
	0x1b, 0x50, 0x75, 0x6c, 0x6c, 0x4d, 0x61, 0x72, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x28, 0x0a, 0x08,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x08, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x68, 0x61, 0x73, 0x5f, 0x6d, 0x6f,
	0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x68, 0x61, 0x73, 0x4d, 0x6f, 0x72,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6e, 0x65, 0x78, 0x74, 0x43, 0x75, 0x72, 0x73,
	0x6f, 0x72, 0x22, 0x78, 0x0a, 0x24, 0x4d, 0x61, 0x72, 0x6b, 0x4d, 0x73, 0x67, 0x55, 0x6e, 0x72,
	0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x65,
	0x74, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x73, 0x65, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x74,
	0x61, 0x67, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0d, 0x66,
	0x61, 0x69, 0x6c, 0x65, 0x64, 0x54, 0x61, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x91, 0x02, 0x0a,
	0x21, 0x4d, 0x61, 0x72, 0x6b, 0x4d, 0x73, 0x67, 0x47, 0x65, 0x74, 0x55, 0x6e, 0x72, 0x65, 0x61,
	0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f,
	0x64, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x60, 0x0a, 0x10, 0x74, 0x61, 0x67, 0x5f, 0x75, 0x6e, 0x72, 0x65, 0x61,
	0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e,
	0x4d, 0x61, 0x72, 0x6b, 0x4d, 0x73, 0x67, 0x47, 0x65, 0x74, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64,
	0x79, 0x2e, 0x54, 0x61, 0x67, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x74, 0x61, 0x67, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f,
	0x74, 0x61, 0x67, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0d,
	0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x54, 0x61, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0x41, 0x0a,
	0x13, 0x54, 0x61, 0x67, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0xa8, 0x01, 0x0a, 0x1e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x55, 0x6e, 0x6d, 0x61, 0x72, 0x6b,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42,
	0x6f, 0x64, 0x79, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xec, 0x01, 0x0a, 0x21,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x50, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x6e, 0x69, 0x74, 0x56, 0x32, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64,
	0x79, 0x12, 0x28, 0x0a, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x64,
	0x79, 0x52, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x0d, 0x63,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x56, 0x32, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x65, 0x72, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0d, 0x70, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x12, 0x1f,
	0x0a, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x6e, 0x65, 0x78, 0x74, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x12,
	0x19, 0x0a, 0x08, 0x68, 0x61, 0x73, 0x5f, 0x6d, 0x6f, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x68, 0x61, 0x73, 0x4d, 0x6f, 0x72, 0x65, 0x22, 0xf1, 0x1e, 0x0a, 0x0c, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x44, 0x0a, 0x11, 0x73,
	0x65, 0x6e, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x62, 0x6f, 0x64, 0x79,
	0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79,
	0x52, 0x0f, 0x73, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x64,
	0x79, 0x12, 0x52, 0x0a, 0x16, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x70, 0x65,
	0x72, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0xc8, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x50, 0x65, 0x72,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79,
	0x52, 0x13, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x50, 0x65, 0x72, 0x55, 0x73, 0x65,
	0x72, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x66, 0x0a, 0x1e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x5f,
	0x76, 0x32, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0xcb, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x50, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x6e, 0x69, 0x74, 0x56, 0x32, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f,
	0x64, 0x79, 0x52, 0x19, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x50, 0x65, 0x72, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x6e, 0x69, 0x74, 0x56, 0x32, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x50, 0x0a,
	0x16, 0x67, 0x65, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x62, 0x79, 0x5f,
	0x69, 0x64, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0xd3, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x79, 0x49, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x12, 0x67, 0x65, 0x74,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x79, 0x49, 0x64, 0x42, 0x6f, 0x64, 0x79, 0x12,
	0x67, 0x0a, 0x1d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x63,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x6f, 0x64, 0x79,
	0x18, 0xad, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x49, 0x6e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x1a, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x49, 0x6e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x8d, 0x01, 0x0a, 0x2b, 0x67, 0x65, 0x74,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x69,
	0x6e, 0x66, 0x6f, 0x5f, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0xae, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2f, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x6e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79,
	0x52, 0x26, 0x67, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x69, 0x6e, 0x66, 0x6f, 0x49, 0x6e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x47, 0x0a, 0x16, 0x68, 0x61, 0x73, 0x5f,
	0x6e, 0x65, 0x77, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x18, 0xf4, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x4e, 0x65, 0x77, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x52, 0x13, 0x68, 0x61,
	0x73, 0x4e, 0x65, 0x77, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x12, 0x70, 0x0a, 0x20, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e, 0x66, 0x6f,
	0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0xe7, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x47,
	0x65, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x42, 0x6f, 0x64, 0x79, 0x52, 0x1d, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e, 0x66, 0x6f, 0x42,
	0x6f, 0x64, 0x79, 0x12, 0x70, 0x0a, 0x1e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73,
	0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0xdd, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x43,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x1c, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74,
	0x73, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x76, 0x0a, 0x22, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x8a, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x64, 0x64, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x1f, 0x63, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x64, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x7f, 0x0a,
	0x25, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74,
	0x73, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x8b, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x22, 0x63, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x7c,
	0x0a, 0x24, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e,
	0x74, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x8f, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x21, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x64, 0x0a, 0x1c,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x70,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0xc1, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x19, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x42, 0x6f,
	0x64, 0x79, 0x12, 0x6b, 0x0a, 0x1f, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x85, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x47,
	0x65, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f,
	0x64, 0x79, 0x52, 0x1b, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x6f, 0x64, 0x79, 0x12,
	0x6b, 0x0a, 0x1f, 0x73, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x62, 0x6f,
	0x64, 0x79, 0x18, 0x86, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x53, 0x65, 0x74, 0x43,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x72, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x52,
	0x1b, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x7e, 0x0a, 0x26,
	0x75, 0x70, 0x73, 0x65, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x88, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x72, 0x65, 0x45, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x21, 0x75, 0x70, 0x73, 0x65, 0x72,
	0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x72,
	0x65, 0x45, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x74, 0x0a, 0x22,
	0x73, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x62, 0x6f,
	0x64, 0x79, 0x18, 0x99, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x53, 0x65, 0x74, 0x43,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f,
	0x64, 0x79, 0x52, 0x1e, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x6f,
	0x64, 0x79, 0x12, 0x87, 0x01, 0x0a, 0x29, 0x75, 0x70, 0x73, 0x65, 0x72, 0x74, 0x5f, 0x63, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x5f, 0x65, 0x78, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x62, 0x6f, 0x64, 0x79,
	0x18, 0x9a, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74,
	0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x45, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x24, 0x75, 0x70, 0x73, 0x65, 0x72, 0x74, 0x43, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x45, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x5e, 0x0a, 0x1a,
	0x67, 0x65, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0xe9, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x72, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42,
	0x6f, 0x64, 0x79, 0x52, 0x17, 0x67, 0x65, 0x74, 0x53, 0x74, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x72,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x4f, 0x0a, 0x15,
	0x67, 0x65, 0x74, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0xd3, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x47,
	0x65, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x12, 0x67, 0x65, 0x74, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x49, 0x0a,
	0x13, 0x67, 0x65, 0x74, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x75, 0x72, 0x6c, 0x73, 0x5f,
	0x62, 0x6f, 0x64, 0x79, 0x18, 0xd4, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x47, 0x65,
	0x74, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x55, 0x72, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x10, 0x67, 0x65, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x61,
	0x55, 0x72, 0x6c, 0x73, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x3f, 0x0a, 0x0f, 0x67, 0x65, 0x74, 0x5f,
	0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0xd5, 0x0f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x0d, 0x67, 0x65, 0x74, 0x54,
	0x69, 0x63, 0x6b, 0x65, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x62, 0x0a, 0x1a, 0x67, 0x65, 0x74,
	0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0xd6, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x42, 0x6f, 0x64, 0x79, 0x52, 0x17, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x61, 0x0a,
	0x1b, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0xd7, 0x0f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x53,
	0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x18, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73,
	0x74, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x64, 0x79,
	0x12, 0x61, 0x0a, 0x1b, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x72, 0x65,
	0x63, 0x76, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18,
	0xd8, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61,
	0x73, 0x74, 0x52, 0x65, 0x63, 0x76, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x18, 0x62, 0x72, 0x6f, 0x61, 0x64,
	0x63, 0x61, 0x73, 0x74, 0x52, 0x65, 0x63, 0x76, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42,
	0x6f, 0x64, 0x79, 0x12, 0x61, 0x0a, 0x1b, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x62, 0x6f,
	0x64, 0x79, 0x18, 0xd9, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x42, 0x72, 0x6f, 0x61,
	0x64, 0x63, 0x61, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x18, 0x62, 0x72,
	0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x42, 0x0a, 0x10, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x5f, 0x76, 0x6f, 0x69, 0x70, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0xdb, 0x0f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x6f, 0x69, 0x70, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x0e, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x56, 0x6f, 0x69, 0x70, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x3c, 0x0a, 0x0e, 0x63, 0x61,
	0x6c, 0x6c, 0x5f, 0x76, 0x6f, 0x69, 0x70, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0xdc, 0x0f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x56, 0x6f, 0x69, 0x70, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x0c, 0x63, 0x61, 0x6c, 0x6c,
	0x56, 0x6f, 0x69, 0x70, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x42, 0x0a, 0x10, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x76, 0x6f, 0x69, 0x70, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0xdd, 0x0f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x6f, 0x69, 0x70,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x0e, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x56, 0x6f, 0x69, 0x70, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x46, 0x0a, 0x10,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0xdf, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x42, 0x6f, 0x64, 0x79, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x47, 0x65, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x42, 0x0a, 0x10, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x73, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0xe1, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x0e, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x73, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x58, 0x0a, 0x18, 0x75, 0x6e, 0x72, 0x65,
	0x61, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f,
	0x62, 0x6f, 0x64, 0x79, 0x18, 0xe2, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x55, 0x6e,
	0x52, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x15, 0x75, 0x6e, 0x72,
	0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x6f,
	0x64, 0x79, 0x12, 0x48, 0x0a, 0x12, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0xe3, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x10, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x4f, 0x0a, 0x15,
	0x67, 0x65, 0x74, 0x5f, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0xee, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x47,
	0x65, 0x74, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x12, 0x67, 0x65, 0x74, 0x55, 0x6e,
	0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x48, 0x0a,
	0x12, 0x67, 0x65, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x62,
	0x6f, 0x64, 0x79, 0x18, 0xf0, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x47, 0x65, 0x74,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x10, 0x67, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x6c,
	0x69, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x48, 0x0a, 0x12, 0x73, 0x65, 0x74, 0x5f, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0xf1, 0x0f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x53, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x6c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x52,
	0x10, 0x73, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x42, 0x6f, 0x64,
	0x79, 0x12, 0x55, 0x0a, 0x17, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x5f, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0xf2, 0x0f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f,
	0x64, 0x79, 0x52, 0x14, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x6c, 0x69, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x45, 0x0a, 0x11, 0x6d, 0x61, 0x72, 0x6b,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0xf4, 0x0f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x0f,
	0x6d, 0x61, 0x72, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x12,
	0x52, 0x0a, 0x16, 0x70, 0x75, 0x6c, 0x6c, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0xf5, 0x0f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x50, 0x75, 0x6c, 0x6c, 0x4d, 0x61, 0x72, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x13,
	0x70, 0x75, 0x6c, 0x6c, 0x4d, 0x61, 0x72, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42,
	0x6f, 0x64, 0x79, 0x12, 0x66, 0x0a, 0x1c, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x6d, 0x73, 0x67, 0x5f,
	0x75, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x18, 0x86, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x4d, 0x61, 0x72,
	0x6b, 0x4d, 0x73, 0x67, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64,
	0x79, 0x52, 0x18, 0x6d, 0x61, 0x72, 0x6b, 0x4d, 0x73, 0x67, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x5d, 0x0a, 0x19, 0x6d,
	0x61, 0x72, 0x6b, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x75, 0x6e, 0x72, 0x65,
	0x61, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x87, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x4d, 0x73, 0x67, 0x47, 0x65, 0x74, 0x55, 0x6e, 0x72, 0x65,
	0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42,
	0x6f, 0x64, 0x79, 0x52, 0x15, 0x6d, 0x61, 0x72, 0x6b, 0x4d, 0x73, 0x67, 0x47, 0x65, 0x74, 0x55,
	0x6e, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x52, 0x0a, 0x14, 0x62, 0x61,
	0x74, 0x63, 0x68, 0x5f, 0x75, 0x6e, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x88, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x55, 0x6e, 0x6d, 0x61, 0x72, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x12, 0x62, 0x61, 0x74, 0x63,
	0x68, 0x55, 0x6e, 0x6d, 0x61, 0x72, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xdb,
	0x03, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x63,
	0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x73, 0x63, 0x12, 0x1d,
	0x0a, 0x0a, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a,
	0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79,
	0x12, 0x15, 0x0a, 0x06, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x6c, 0x6f, 0x67, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x30, 0x0a, 0x14, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x61,
	0x72, 0x72, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x12, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x72, 0x72, 0x69, 0x76, 0x65,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x19, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x1a, 0x3a, 0x0a, 0x0c, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x0a, 0x5a, 0x08,
	0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ws_payload_proto_rawDescOnce sync.Once
	file_ws_payload_proto_rawDescData = file_ws_payload_proto_rawDesc
)

func file_ws_payload_proto_rawDescGZIP() []byte {
	file_ws_payload_proto_rawDescOnce.Do(func() {
		file_ws_payload_proto_rawDescData = protoimpl.X.CompressGZIP(file_ws_payload_proto_rawDescData)
	})
	return file_ws_payload_proto_rawDescData
}

var file_ws_payload_proto_msgTypes = make([]protoimpl.MessageInfo, 78)
var file_ws_payload_proto_goTypes = []interface{}{
	(*Header)(nil),                                         // 0: Header
	(*Frame)(nil),                                          // 1: Frame
	(*MessagesPerUserInitV2RequestBody)(nil),               // 2: MessagesPerUserInitV2RequestBody
	(*RequestBody)(nil),                                    // 3: RequestBody
	(*Headers)(nil),                                        // 4: Headers
	(*Request)(nil),                                        // 5: Request
	(*TokenInfo)(nil),                                      // 6: TokenInfo
	(*SendMessageResponseBody)(nil),                        // 7: SendMessageResponseBody
	(*MessageBody)(nil),                                    // 8: MessageBody
	(*MessagesPerUserResponseBody)(nil),                    // 9: MessagesPerUserResponseBody
	(*MessageInfo)(nil),                                    // 10: MessageInfo
	(*GetMessageByIdResponseBody)(nil),                     // 11: GetMessageByIdResponseBody
	(*MessagesInConversationResponseBody)(nil),             // 12: MessagesInConversationResponseBody
	(*MessagesCheckInfo)(nil),                              // 13: MessagesCheckInfo
	(*GetMessagesCheckInfoInConversationResponseBody)(nil), // 14: GetMessagesCheckInfoInConversationResponseBody
	(*ReferenceInfo)(nil),                                  // 15: ReferenceInfo
	(*NewMessageNotify)(nil),                               // 16: NewMessageNotify
	(*ConversationCheckInfo)(nil),                          // 17: ConversationCheckInfo
	(*GetConversationsCheckInfoResponseBody)(nil),          // 18: GetConversationsCheckInfoResponseBody
	(*Participant)(nil),                                    // 19: Participant
	(*ParticipantsPage)(nil),                               // 20: ParticipantsPage
	(*ConversationParticipantsListResponseBody)(nil),       // 21: ConversationParticipantsListResponseBody
	(*SecUidPair)(nil),                                     // 22: SecUidPair
	(*ConversationAddParticipantsResponseBody)(nil),        // 23: ConversationAddParticipantsResponseBody
	(*ConversationRemoveParticipantsResponseBody)(nil),     // 24: ConversationRemoveParticipantsResponseBody
	(*UpdateConversationParticipantResponseBody)(nil),      // 25: UpdateConversationParticipantResponseBody
	(*ModifyMessagePropertyResponseBody)(nil),              // 26: ModifyMessagePropertyResponseBody
	(*Ext)(nil),                                            // 27: Ext
	(*ConversationCoreInfo)(nil),                           // 28: ConversationCoreInfo
	(*GetConversationCoreInfoResponseBody)(nil),            // 29: GetConversationCoreInfoResponseBody
	(*SetConversationCoreInfoResponseBody)(nil),            // 30: SetConversationCoreInfoResponseBody
	(*UpsertConversationCoreExtInfoResponseBody)(nil),      // 31: UpsertConversationCoreExtInfoResponseBody
	(*ConversationSettingInfo)(nil),                        // 32: ConversationSettingInfo
	(*SetConversationSettingInfoResponseBody)(nil),         // 33: SetConversationSettingInfoResponseBody
	(*UpsertConversationSettingExtInfoResponseBody)(nil),   // 34: UpsertConversationSettingExtInfoResponseBody
	(*GetStrangerMessagesResponseBody)(nil),                // 35: GetStrangerMessagesResponseBody
	(*GetUploadTokenResponseBody)(nil),                     // 36: GetUploadTokenResponseBody
	(*ImgOption)(nil),                                      // 37: ImgOption
	(*VideoOption)(nil),                                    // 38: VideoOption
	(*AudioOption)(nil),                                    // 39: AudioOption
	(*FileOption)(nil),                                     // 40: FileOption
	(*GetMediaUrlsResponseBody)(nil),                       // 41: GetMediaUrlsResponseBody
	(*GetTicketResponseBody)(nil),                          // 42: GetTicketResponseBody
	(*ConversationInfoV2)(nil),                             // 43: ConversationInfoV2
	(*GetUserConversationListResponseBody)(nil),            // 44: GetUserConversationListResponseBody
	(*BroadcastSendMessageResponseBody)(nil),               // 45: BroadcastSendMessageResponseBody
	(*BroadcastRecvMessageResponseBody)(nil),               // 46: BroadcastRecvMessageResponseBody
	(*BroadcastUserInfo)(nil),                              // 47: BroadcastUserInfo
	(*BroadcastUserCounterResponseBody)(nil),               // 48: BroadcastUserCounterResponseBody
	(*VoipInfo)(nil),                                       // 49: VoipInfo
	(*CreateVoipResponseBody)(nil),                         // 50: CreateVoipResponseBody
	(*CallVoipResponseBody)(nil),                           // 51: CallVoipResponseBody
	(*UpdateVoipResponseBody)(nil),                         // 52: UpdateVoipResponseBody
	(*Profile)(nil),                                        // 53: Profile
	(*ProfileGetInfoResponseBody)(nil),                     // 54: ProfileGetInfoResponseBody
	(*Config)(nil),                                         // 55: Config
	(*GetConfigsResponseBody)(nil),                         // 56: GetConfigsResponseBody
	(*UnReadCountReportResponseBody)(nil),                  // 57: UnReadCountReportResponseBody
	(*BlockMembersResponseBody)(nil),                       // 58: BlockMembersResponseBody
	(*GetUnreadCountResponseBody)(nil),                     // 59: GetUnreadCountResponseBody
	(*BlockUserInfo)(nil),                                  // 60: BlockUserInfo
	(*GetBlockListResponseBody)(nil),                       // 61: GetBlockListResponseBody
	(*SetBlocklistResponseBody)(nil),                       // 62: SetBlocklistResponseBody
	(*CheckInBlockListResponseBody)(nil),                   // 63: CheckInBlockListResponseBody
	(*MarkMessageResponseBody)(nil),                        // 64: MarkMessageResponseBody
	(*PullMarkMessageResponseBody)(nil),                    // 65: PullMarkMessageResponseBody
	(*MarkMsgUnreadCountReportResponseBody)(nil),           // 66: MarkMsgUnreadCountReportResponseBody
	(*MarkMsgGetUnreadCountResponseBody)(nil),              // 67: MarkMsgGetUnreadCountResponseBody
	(*BatchUnmarkMessageResponseBody)(nil),                 // 68: BatchUnmarkMessageResponseBody
	(*MessagesPerUserInitV2ResponseBody)(nil),              // 69: MessagesPerUserInitV2ResponseBody
	(*ResponseBody)(nil),                                   // 70: ResponseBody
	(*Response)(nil),                                       // 71: Response
	nil,                                                    // 72: Request.HeadersEntry
	nil,                                                    // 73: ConversationCoreInfo.ExtEntry
	nil,                                                    // 74: ConversationSettingInfo.ExtEntry
	nil,                                                    // 75: GetUnreadCountResponseBody.ConvUnreadCountEntry
	nil,                                                    // 76: MarkMsgGetUnreadCountResponseBody.TagUnreadCountEntry
	nil,                                                    // 77: Response.HeadersEntry
}
var file_ws_payload_proto_depIdxs = []int32{
	0,  // 0: Frame.headers:type_name -> Header
	2,  // 1: RequestBody.messages_per_user_init_v2_body:type_name -> MessagesPerUserInitV2RequestBody
	3,  // 2: Request.body:type_name -> RequestBody
	72, // 3: Request.headers:type_name -> Request.HeadersEntry
	6,  // 4: Request.token_info:type_name -> TokenInfo
	8,  // 5: MessagesPerUserResponseBody.messages:type_name -> MessageBody
	8,  // 6: MessageInfo.body:type_name -> MessageBody
	10, // 7: GetMessageByIdResponseBody.msg_info:type_name -> MessageInfo
	8,  // 8: MessagesInConversationResponseBody.messages:type_name -> MessageBody
	13, // 9: GetMessagesCheckInfoInConversationResponseBody.msgs_checkinfo_list:type_name -> MessagesCheckInfo
	8,  // 10: NewMessageNotify.message:type_name -> MessageBody
	15, // 11: NewMessageNotify.ref_msg_info:type_name -> ReferenceInfo
	17, // 12: GetConversationsCheckInfoResponseBody.conversation_checkinfo_list:type_name -> ConversationCheckInfo
	19, // 13: ParticipantsPage.participants:type_name -> Participant
	20, // 14: ConversationParticipantsListResponseBody.participants_page:type_name -> ParticipantsPage
	22, // 15: ConversationAddParticipantsResponseBody.sec_success_participants:type_name -> SecUidPair
	22, // 16: ConversationAddParticipantsResponseBody.sec_failed_participants:type_name -> SecUidPair
	22, // 17: ConversationRemoveParticipantsResponseBody.failed_sec_participants:type_name -> SecUidPair
	19, // 18: UpdateConversationParticipantResponseBody.participant:type_name -> Participant
	73, // 19: ConversationCoreInfo.ext:type_name -> ConversationCoreInfo.ExtEntry
	28, // 20: GetConversationCoreInfoResponseBody.conversation_core_info:type_name -> ConversationCoreInfo
	28, // 21: SetConversationCoreInfoResponseBody.conversation_core_info:type_name -> ConversationCoreInfo
	28, // 22: UpsertConversationCoreExtInfoResponseBody.core_info:type_name -> ConversationCoreInfo
	74, // 23: ConversationSettingInfo.ext:type_name -> ConversationSettingInfo.ExtEntry
	32, // 24: SetConversationSettingInfoResponseBody.setting_info:type_name -> ConversationSettingInfo
	32, // 25: UpsertConversationSettingExtInfoResponseBody.setting_info:type_name -> ConversationSettingInfo
	8,  // 26: GetStrangerMessagesResponseBody.messages:type_name -> MessageBody
	37, // 27: GetMediaUrlsResponseBody.img_options:type_name -> ImgOption
	38, // 28: GetMediaUrlsResponseBody.video_options:type_name -> VideoOption
	39, // 29: GetMediaUrlsResponseBody.audio_options:type_name -> AudioOption
	40, // 30: GetMediaUrlsResponseBody.file_options:type_name -> FileOption
	20, // 31: ConversationInfoV2.first_page_participants:type_name -> ParticipantsPage
	19, // 32: ConversationInfoV2.user_info:type_name -> Participant
	28, // 33: ConversationInfoV2.conversation_core_info:type_name -> ConversationCoreInfo
	32, // 34: ConversationInfoV2.conversation_setting_info:type_name -> ConversationSettingInfo
	43, // 35: GetUserConversationListResponseBody.list:type_name -> ConversationInfoV2
	8,  // 36: BroadcastRecvMessageResponseBody.messages:type_name -> MessageBody
	47, // 37: BroadcastUserCounterResponseBody.infos:type_name -> BroadcastUserInfo
	49, // 38: CreateVoipResponseBody.info:type_name -> VoipInfo
	49, // 39: CallVoipResponseBody.info:type_name -> VoipInfo
	49, // 40: UpdateVoipResponseBody.info:type_name -> VoipInfo
	53, // 41: ProfileGetInfoResponseBody.profile:type_name -> Profile
	55, // 42: GetConfigsResponseBody.configs:type_name -> Config
	75, // 43: GetUnreadCountResponseBody.conv_unread_count:type_name -> GetUnreadCountResponseBody.ConvUnreadCountEntry
	60, // 44: GetBlockListResponseBody.user_info:type_name -> BlockUserInfo
	8,  // 45: PullMarkMessageResponseBody.messages:type_name -> MessageBody
	76, // 46: MarkMsgGetUnreadCountResponseBody.tag_unread_count:type_name -> MarkMsgGetUnreadCountResponseBody.TagUnreadCountEntry
	8,  // 47: MessagesPerUserInitV2ResponseBody.messages:type_name -> MessageBody
	43, // 48: MessagesPerUserInitV2ResponseBody.conversations:type_name -> ConversationInfoV2
	7,  // 49: ResponseBody.send_message_body:type_name -> SendMessageResponseBody
	9,  // 50: ResponseBody.messages_per_user_body:type_name -> MessagesPerUserResponseBody
	69, // 51: ResponseBody.messages_per_user_init_v2_body:type_name -> MessagesPerUserInitV2ResponseBody
	11, // 52: ResponseBody.get_message_by_id_body:type_name -> GetMessageByIdResponseBody
	12, // 53: ResponseBody.messages_in_conversation_body:type_name -> MessagesInConversationResponseBody
	14, // 54: ResponseBody.get_messages_checkinfo_in_conversation_body:type_name -> GetMessagesCheckInfoInConversationResponseBody
	16, // 55: ResponseBody.has_new_message_notify:type_name -> NewMessageNotify
	18, // 56: ResponseBody.get_conversations_checkinfo_body:type_name -> GetConversationsCheckInfoResponseBody
	21, // 57: ResponseBody.conversation_participants_body:type_name -> ConversationParticipantsListResponseBody
	23, // 58: ResponseBody.conversation_add_participants_body:type_name -> ConversationAddParticipantsResponseBody
	24, // 59: ResponseBody.conversation_remove_participants_body:type_name -> ConversationRemoveParticipantsResponseBody
	25, // 60: ResponseBody.update_conversation_participant_body:type_name -> UpdateConversationParticipantResponseBody
	26, // 61: ResponseBody.modify_message_property_body:type_name -> ModifyMessagePropertyResponseBody
	29, // 62: ResponseBody.get_conversation_core_info_body:type_name -> GetConversationCoreInfoResponseBody
	30, // 63: ResponseBody.set_conversation_core_info_body:type_name -> SetConversationCoreInfoResponseBody
	31, // 64: ResponseBody.upsert_conversation_core_ext_info_body:type_name -> UpsertConversationCoreExtInfoResponseBody
	33, // 65: ResponseBody.set_conversation_setting_info_body:type_name -> SetConversationSettingInfoResponseBody
	34, // 66: ResponseBody.upsert_conversation_setting_ext_info_body:type_name -> UpsertConversationSettingExtInfoResponseBody
	35, // 67: ResponseBody.get_stranger_messages_body:type_name -> GetStrangerMessagesResponseBody
	36, // 68: ResponseBody.get_upload_token_body:type_name -> GetUploadTokenResponseBody
	41, // 69: ResponseBody.get_media_urls_body:type_name -> GetMediaUrlsResponseBody
	42, // 70: ResponseBody.get_ticket_body:type_name -> GetTicketResponseBody
	44, // 71: ResponseBody.get_conversation_list_body:type_name -> GetUserConversationListResponseBody
	45, // 72: ResponseBody.broadcast_send_message_body:type_name -> BroadcastSendMessageResponseBody
	46, // 73: ResponseBody.broadcast_recv_message_body:type_name -> BroadcastRecvMessageResponseBody
	48, // 74: ResponseBody.broadcast_user_counter_body:type_name -> BroadcastUserCounterResponseBody
	50, // 75: ResponseBody.create_voip_body:type_name -> CreateVoipResponseBody
	51, // 76: ResponseBody.call_voip_body:type_name -> CallVoipResponseBody
	52, // 77: ResponseBody.update_voip_body:type_name -> UpdateVoipResponseBody
	54, // 78: ResponseBody.profile_get_info:type_name -> ProfileGetInfoResponseBody
	56, // 79: ResponseBody.get_configs_body:type_name -> GetConfigsResponseBody
	57, // 80: ResponseBody.unread_count_report_body:type_name -> UnReadCountReportResponseBody
	58, // 81: ResponseBody.block_members_body:type_name -> BlockMembersResponseBody
	59, // 82: ResponseBody.get_unread_count_body:type_name -> GetUnreadCountResponseBody
	61, // 83: ResponseBody.get_blocklist_body:type_name -> GetBlockListResponseBody
	62, // 84: ResponseBody.set_blocklist_body:type_name -> SetBlocklistResponseBody
	63, // 85: ResponseBody.check_in_blocklist_body:type_name -> CheckInBlockListResponseBody
	64, // 86: ResponseBody.mark_message_body:type_name -> MarkMessageResponseBody
	65, // 87: ResponseBody.pull_mark_message_body:type_name -> PullMarkMessageResponseBody
	66, // 88: ResponseBody.mark_msg_unread_count_report:type_name -> MarkMsgUnreadCountReportResponseBody
	67, // 89: ResponseBody.mark_msg_get_unread_count:type_name -> MarkMsgGetUnreadCountResponseBody
	68, // 90: ResponseBody.batch_unmark_message:type_name -> BatchUnmarkMessageResponseBody
	70, // 91: Response.body:type_name -> ResponseBody
	77, // 92: Response.headers:type_name -> Response.HeadersEntry
	93, // [93:93] is the sub-list for method output_type
	93, // [93:93] is the sub-list for method input_type
	93, // [93:93] is the sub-list for extension type_name
	93, // [93:93] is the sub-list for extension extendee
	0,  // [0:93] is the sub-list for field type_name
}

func init() { file_ws_payload_proto_init() }
func file_ws_payload_proto_init() {
	if File_ws_payload_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ws_payload_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Header); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Frame); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessagesPerUserInitV2RequestBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Headers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TokenInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendMessageResponseBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessagesPerUserResponseBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMessageByIdResponseBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessagesInConversationResponseBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessagesCheckInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMessagesCheckInfoInConversationResponseBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReferenceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewMessageNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConversationCheckInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetConversationsCheckInfoResponseBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Participant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParticipantsPage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConversationParticipantsListResponseBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecUidPair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConversationAddParticipantsResponseBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConversationRemoveParticipantsResponseBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateConversationParticipantResponseBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifyMessagePropertyResponseBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConversationCoreInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetConversationCoreInfoResponseBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetConversationCoreInfoResponseBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertConversationCoreExtInfoResponseBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConversationSettingInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetConversationSettingInfoResponseBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertConversationSettingExtInfoResponseBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStrangerMessagesResponseBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUploadTokenResponseBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImgOption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VideoOption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AudioOption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileOption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMediaUrlsResponseBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTicketResponseBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConversationInfoV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserConversationListResponseBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BroadcastSendMessageResponseBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BroadcastRecvMessageResponseBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BroadcastUserInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BroadcastUserCounterResponseBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VoipInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateVoipResponseBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallVoipResponseBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateVoipResponseBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Profile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProfileGetInfoResponseBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetConfigsResponseBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnReadCountReportResponseBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockMembersResponseBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUnreadCountResponseBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockUserInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBlockListResponseBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetBlocklistResponseBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckInBlockListResponseBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarkMessageResponseBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PullMarkMessageResponseBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarkMsgUnreadCountReportResponseBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarkMsgGetUnreadCountResponseBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchUnmarkMessageResponseBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessagesPerUserInitV2ResponseBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ws_payload_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   78,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ws_payload_proto_goTypes,
		DependencyIndexes: file_ws_payload_proto_depIdxs,
		MessageInfos:      file_ws_payload_proto_msgTypes,
	}.Build()
	File_ws_payload_proto = out.File
	file_ws_payload_proto_rawDesc = nil
	file_ws_payload_proto_goTypes = nil
	file_ws_payload_proto_depIdxs = nil
}
