// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.20.3
// source: ws_payload.proto

package backend

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Header struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Header) Reset() {
	*x = Header{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Header) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Header) ProtoMessage() {}

func (x *Header) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Header.ProtoReflect.Descriptor instead.
func (*Header) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{0}
}

func (x *Header) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Header) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type Frame struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Seqid           uint64    `protobuf:"varint,1,opt,name=seqid,proto3" json:"seqid,omitempty"`
	Logid           uint64    `protobuf:"varint,2,opt,name=logid,proto3" json:"logid,omitempty"`
	Service         int32     `protobuf:"varint,3,opt,name=service,proto3" json:"service,omitempty"`
	Method          int32     `protobuf:"varint,4,opt,name=method,proto3" json:"method,omitempty"`
	Headers         []*Header `protobuf:"bytes,5,rep,name=headers,proto3" json:"headers,omitempty"`
	PayloadEncoding string    `protobuf:"bytes,6,opt,name=payload_encoding,json=payloadEncoding,proto3" json:"payload_encoding,omitempty"`
	PayloadType     string    `protobuf:"bytes,7,opt,name=payload_type,json=payloadType,proto3" json:"payload_type,omitempty"`
	Payload         []byte    `protobuf:"bytes,8,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *Frame) Reset() {
	*x = Frame{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Frame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Frame) ProtoMessage() {}

func (x *Frame) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Frame.ProtoReflect.Descriptor instead.
func (*Frame) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{1}
}

func (x *Frame) GetSeqid() uint64 {
	if x != nil {
		return x.Seqid
	}
	return 0
}

func (x *Frame) GetLogid() uint64 {
	if x != nil {
		return x.Logid
	}
	return 0
}

func (x *Frame) GetService() int32 {
	if x != nil {
		return x.Service
	}
	return 0
}

func (x *Frame) GetMethod() int32 {
	if x != nil {
		return x.Method
	}
	return 0
}

func (x *Frame) GetHeaders() []*Header {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *Frame) GetPayloadEncoding() string {
	if x != nil {
		return x.PayloadEncoding
	}
	return ""
}

func (x *Frame) GetPayloadType() string {
	if x != nil {
		return x.PayloadType
	}
	return ""
}

func (x *Frame) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

type MessagesPerUserInitV2RequestBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cursor      int64 `protobuf:"varint,1,opt,name=cursor,proto3" json:"cursor,omitempty"`
	NewUser     int32 `protobuf:"varint,2,opt,name=new_user,json=newUser,proto3" json:"new_user,omitempty"`
	InitSubType int32 `protobuf:"varint,3,opt,name=init_sub_type,json=initSubType,proto3" json:"init_sub_type,omitempty"`
}

func (x *MessagesPerUserInitV2RequestBody) Reset() {
	*x = MessagesPerUserInitV2RequestBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessagesPerUserInitV2RequestBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessagesPerUserInitV2RequestBody) ProtoMessage() {}

func (x *MessagesPerUserInitV2RequestBody) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessagesPerUserInitV2RequestBody.ProtoReflect.Descriptor instead.
func (*MessagesPerUserInitV2RequestBody) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{2}
}

func (x *MessagesPerUserInitV2RequestBody) GetCursor() int64 {
	if x != nil {
		return x.Cursor
	}
	return 0
}

func (x *MessagesPerUserInitV2RequestBody) GetNewUser() int32 {
	if x != nil {
		return x.NewUser
	}
	return 0
}

func (x *MessagesPerUserInitV2RequestBody) GetInitSubType() int32 {
	if x != nil {
		return x.InitSubType
	}
	return 0
}

type ReferencedMessageInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReferencedMessageId  int64  `protobuf:"varint,1,opt,name=referenced_message_id,json=referencedMessageId,proto3" json:"referenced_message_id,omitempty"`
	Hint                 string `protobuf:"bytes,2,opt,name=hint,proto3" json:"hint,omitempty"`
	RootMessageId        int64  `protobuf:"varint,3,opt,name=root_message_id,json=rootMessageId,proto3" json:"root_message_id,omitempty"`
	RootMessageConvIndex int64  `protobuf:"varint,4,opt,name=root_message_conv_index,json=rootMessageConvIndex,proto3" json:"root_message_conv_index,omitempty"`
}

func (x *ReferencedMessageInfo) Reset() {
	*x = ReferencedMessageInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReferencedMessageInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReferencedMessageInfo) ProtoMessage() {}

func (x *ReferencedMessageInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReferencedMessageInfo.ProtoReflect.Descriptor instead.
func (*ReferencedMessageInfo) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{3}
}

func (x *ReferencedMessageInfo) GetReferencedMessageId() int64 {
	if x != nil {
		return x.ReferencedMessageId
	}
	return 0
}

func (x *ReferencedMessageInfo) GetHint() string {
	if x != nil {
		return x.Hint
	}
	return ""
}

func (x *ReferencedMessageInfo) GetRootMessageId() int64 {
	if x != nil {
		return x.RootMessageId
	}
	return 0
}

func (x *ReferencedMessageInfo) GetRootMessageConvIndex() int64 {
	if x != nil {
		return x.RootMessageConvIndex
	}
	return 0
}

type SendMessageRequestBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConversationId      string                 `protobuf:"bytes,1,opt,name=conversation_id,json=conversationId,proto3" json:"conversation_id,omitempty"`
	ConversationType    int32                  `protobuf:"varint,2,opt,name=conversation_type,json=conversationType,proto3" json:"conversation_type,omitempty"`
	ConversationShortId int64                  `protobuf:"varint,3,opt,name=conversation_short_id,json=conversationShortId,proto3" json:"conversation_short_id,omitempty"`
	Content             string                 `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`
	Ext                 map[string]string      `protobuf:"bytes,5,rep,name=ext,proto3" json:"ext,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MessageType         int32                  `protobuf:"varint,6,opt,name=message_type,json=messageType,proto3" json:"message_type,omitempty"`
	Ticket              string                 `protobuf:"bytes,7,opt,name=ticket,proto3" json:"ticket,omitempty"`
	ClientMessageId     string                 `protobuf:"bytes,8,opt,name=client_message_id,json=clientMessageId,proto3" json:"client_message_id,omitempty"`
	MentionedUsers      []int64                `protobuf:"varint,9,rep,packed,name=mentioned_users,json=mentionedUsers,proto3" json:"mentioned_users,omitempty"`
	RefMsgInfo          *ReferencedMessageInfo `protobuf:"bytes,11,opt,name=ref_msg_info,json=refMsgInfo,proto3" json:"ref_msg_info,omitempty"`
}

func (x *SendMessageRequestBody) Reset() {
	*x = SendMessageRequestBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendMessageRequestBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendMessageRequestBody) ProtoMessage() {}

func (x *SendMessageRequestBody) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendMessageRequestBody.ProtoReflect.Descriptor instead.
func (*SendMessageRequestBody) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{4}
}

func (x *SendMessageRequestBody) GetConversationId() string {
	if x != nil {
		return x.ConversationId
	}
	return ""
}

func (x *SendMessageRequestBody) GetConversationType() int32 {
	if x != nil {
		return x.ConversationType
	}
	return 0
}

func (x *SendMessageRequestBody) GetConversationShortId() int64 {
	if x != nil {
		return x.ConversationShortId
	}
	return 0
}

func (x *SendMessageRequestBody) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *SendMessageRequestBody) GetExt() map[string]string {
	if x != nil {
		return x.Ext
	}
	return nil
}

func (x *SendMessageRequestBody) GetMessageType() int32 {
	if x != nil {
		return x.MessageType
	}
	return 0
}

func (x *SendMessageRequestBody) GetTicket() string {
	if x != nil {
		return x.Ticket
	}
	return ""
}

func (x *SendMessageRequestBody) GetClientMessageId() string {
	if x != nil {
		return x.ClientMessageId
	}
	return ""
}

func (x *SendMessageRequestBody) GetMentionedUsers() []int64 {
	if x != nil {
		return x.MentionedUsers
	}
	return nil
}

func (x *SendMessageRequestBody) GetRefMsgInfo() *ReferencedMessageInfo {
	if x != nil {
		return x.RefMsgInfo
	}
	return nil
}

type MessagesPerUserRequestBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cursor int64 `protobuf:"varint,1,opt,name=cursor,proto3" json:"cursor,omitempty"`
	Limit  int32 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *MessagesPerUserRequestBody) Reset() {
	*x = MessagesPerUserRequestBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessagesPerUserRequestBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessagesPerUserRequestBody) ProtoMessage() {}

func (x *MessagesPerUserRequestBody) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessagesPerUserRequestBody.ProtoReflect.Descriptor instead.
func (*MessagesPerUserRequestBody) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{5}
}

func (x *MessagesPerUserRequestBody) GetCursor() int64 {
	if x != nil {
		return x.Cursor
	}
	return 0
}

func (x *MessagesPerUserRequestBody) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GetMessageByIdRequestBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConversationId      string `protobuf:"bytes,1,opt,name=conversation_id,json=conversationId,proto3" json:"conversation_id,omitempty"`
	ConversationType    int32  `protobuf:"varint,2,opt,name=conversation_type,json=conversationType,proto3" json:"conversation_type,omitempty"`
	ConversationShortId int64  `protobuf:"varint,3,opt,name=conversation_short_id,json=conversationShortId,proto3" json:"conversation_short_id,omitempty"`
	ServerMessageId     int64  `protobuf:"varint,4,opt,name=server_message_id,json=serverMessageId,proto3" json:"server_message_id,omitempty"`
}

func (x *GetMessageByIdRequestBody) Reset() {
	*x = GetMessageByIdRequestBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMessageByIdRequestBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMessageByIdRequestBody) ProtoMessage() {}

func (x *GetMessageByIdRequestBody) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMessageByIdRequestBody.ProtoReflect.Descriptor instead.
func (*GetMessageByIdRequestBody) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{6}
}

func (x *GetMessageByIdRequestBody) GetConversationId() string {
	if x != nil {
		return x.ConversationId
	}
	return ""
}

func (x *GetMessageByIdRequestBody) GetConversationType() int32 {
	if x != nil {
		return x.ConversationType
	}
	return 0
}

func (x *GetMessageByIdRequestBody) GetConversationShortId() int64 {
	if x != nil {
		return x.ConversationShortId
	}
	return 0
}

func (x *GetMessageByIdRequestBody) GetServerMessageId() int64 {
	if x != nil {
		return x.ServerMessageId
	}
	return 0
}

type MessagesInConversationRequestBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConversationId      string `protobuf:"bytes,1,opt,name=conversation_id,json=conversationId,proto3" json:"conversation_id,omitempty"`
	ConversationType    int32  `protobuf:"varint,2,opt,name=conversation_type,json=conversationType,proto3" json:"conversation_type,omitempty"`
	ConversationShortId int64  `protobuf:"varint,3,opt,name=conversation_short_id,json=conversationShortId,proto3" json:"conversation_short_id,omitempty"`
	Direction           int32  `protobuf:"varint,4,opt,name=direction,proto3" json:"direction,omitempty"`
	AnchorIndex         int64  `protobuf:"varint,5,opt,name=anchor_index,json=anchorIndex,proto3" json:"anchor_index,omitempty"`
	Limit               int32  `protobuf:"varint,6,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *MessagesInConversationRequestBody) Reset() {
	*x = MessagesInConversationRequestBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessagesInConversationRequestBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessagesInConversationRequestBody) ProtoMessage() {}

func (x *MessagesInConversationRequestBody) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessagesInConversationRequestBody.ProtoReflect.Descriptor instead.
func (*MessagesInConversationRequestBody) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{7}
}

func (x *MessagesInConversationRequestBody) GetConversationId() string {
	if x != nil {
		return x.ConversationId
	}
	return ""
}

func (x *MessagesInConversationRequestBody) GetConversationType() int32 {
	if x != nil {
		return x.ConversationType
	}
	return 0
}

func (x *MessagesInConversationRequestBody) GetConversationShortId() int64 {
	if x != nil {
		return x.ConversationShortId
	}
	return 0
}

func (x *MessagesInConversationRequestBody) GetDirection() int32 {
	if x != nil {
		return x.Direction
	}
	return 0
}

func (x *MessagesInConversationRequestBody) GetAnchorIndex() int64 {
	if x != nil {
		return x.AnchorIndex
	}
	return 0
}

func (x *MessagesInConversationRequestBody) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GetMessagesCheckInfoInConversationRequestBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConversationShortId int64  `protobuf:"varint,2,opt,name=conversation_short_id,json=conversationShortId,proto3" json:"conversation_short_id,omitempty"`
	ConversationId      string `protobuf:"bytes,5,opt,name=conversation_id,json=conversationId,proto3" json:"conversation_id,omitempty"`
	ConversationType    int32  `protobuf:"varint,6,opt,name=conversation_type,json=conversationType,proto3" json:"conversation_type,omitempty"`
	CursorReverseBegin  int64  `protobuf:"varint,3,opt,name=cursor_reverse_begin,json=cursorReverseBegin,proto3" json:"cursor_reverse_begin,omitempty"`
	CursorReverseEnd    int64  `protobuf:"varint,7,opt,name=cursor_reverse_end,json=cursorReverseEnd,proto3" json:"cursor_reverse_end,omitempty"`
	ExpectMsgTotalCount int32  `protobuf:"varint,4,opt,name=expect_msg_total_count,json=expectMsgTotalCount,proto3" json:"expect_msg_total_count,omitempty"`
}

func (x *GetMessagesCheckInfoInConversationRequestBody) Reset() {
	*x = GetMessagesCheckInfoInConversationRequestBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMessagesCheckInfoInConversationRequestBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMessagesCheckInfoInConversationRequestBody) ProtoMessage() {}

func (x *GetMessagesCheckInfoInConversationRequestBody) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMessagesCheckInfoInConversationRequestBody.ProtoReflect.Descriptor instead.
func (*GetMessagesCheckInfoInConversationRequestBody) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{8}
}

func (x *GetMessagesCheckInfoInConversationRequestBody) GetConversationShortId() int64 {
	if x != nil {
		return x.ConversationShortId
	}
	return 0
}

func (x *GetMessagesCheckInfoInConversationRequestBody) GetConversationId() string {
	if x != nil {
		return x.ConversationId
	}
	return ""
}

func (x *GetMessagesCheckInfoInConversationRequestBody) GetConversationType() int32 {
	if x != nil {
		return x.ConversationType
	}
	return 0
}

func (x *GetMessagesCheckInfoInConversationRequestBody) GetCursorReverseBegin() int64 {
	if x != nil {
		return x.CursorReverseBegin
	}
	return 0
}

func (x *GetMessagesCheckInfoInConversationRequestBody) GetCursorReverseEnd() int64 {
	if x != nil {
		return x.CursorReverseEnd
	}
	return 0
}

func (x *GetMessagesCheckInfoInConversationRequestBody) GetExpectMsgTotalCount() int32 {
	if x != nil {
		return x.ExpectMsgTotalCount
	}
	return 0
}

type SendUserActionRequestBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConversationId      string            `protobuf:"bytes,1,opt,name=conversation_id,json=conversationId,proto3" json:"conversation_id,omitempty"`
	ConversationType    int32             `protobuf:"varint,2,opt,name=conversation_type,json=conversationType,proto3" json:"conversation_type,omitempty"`
	ConversationShortId int64             `protobuf:"varint,3,opt,name=conversation_short_id,json=conversationShortId,proto3" json:"conversation_short_id,omitempty"`
	ActionType          int32             `protobuf:"varint,4,opt,name=action_type,json=actionType,proto3" json:"action_type,omitempty"`
	Extra               map[string]string `protobuf:"bytes,5,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SendUserActionRequestBody) Reset() {
	*x = SendUserActionRequestBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendUserActionRequestBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendUserActionRequestBody) ProtoMessage() {}

func (x *SendUserActionRequestBody) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendUserActionRequestBody.ProtoReflect.Descriptor instead.
func (*SendUserActionRequestBody) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{9}
}

func (x *SendUserActionRequestBody) GetConversationId() string {
	if x != nil {
		return x.ConversationId
	}
	return ""
}

func (x *SendUserActionRequestBody) GetConversationType() int32 {
	if x != nil {
		return x.ConversationType
	}
	return 0
}

func (x *SendUserActionRequestBody) GetConversationShortId() int64 {
	if x != nil {
		return x.ConversationShortId
	}
	return 0
}

func (x *SendUserActionRequestBody) GetActionType() int32 {
	if x != nil {
		return x.ActionType
	}
	return 0
}

func (x *SendUserActionRequestBody) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type SendInputStatusRequestBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConversationId      string            `protobuf:"bytes,1,opt,name=conversation_id,json=conversationId,proto3" json:"conversation_id,omitempty"`
	ConversationType    int32             `protobuf:"varint,2,opt,name=conversation_type,json=conversationType,proto3" json:"conversation_type,omitempty"`
	ConversationShortId int64             `protobuf:"varint,3,opt,name=conversation_short_id,json=conversationShortId,proto3" json:"conversation_short_id,omitempty"`
	Status              int32             `protobuf:"varint,4,opt,name=status,proto3" json:"status,omitempty"`
	Extra               map[string]string `protobuf:"bytes,5,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SendInputStatusRequestBody) Reset() {
	*x = SendInputStatusRequestBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendInputStatusRequestBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendInputStatusRequestBody) ProtoMessage() {}

func (x *SendInputStatusRequestBody) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendInputStatusRequestBody.ProtoReflect.Descriptor instead.
func (*SendInputStatusRequestBody) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{10}
}

func (x *SendInputStatusRequestBody) GetConversationId() string {
	if x != nil {
		return x.ConversationId
	}
	return ""
}

func (x *SendInputStatusRequestBody) GetConversationType() int32 {
	if x != nil {
		return x.ConversationType
	}
	return 0
}

func (x *SendInputStatusRequestBody) GetConversationShortId() int64 {
	if x != nil {
		return x.ConversationShortId
	}
	return 0
}

func (x *SendInputStatusRequestBody) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *SendInputStatusRequestBody) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type DeleteConversationRequestBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConversationId      string `protobuf:"bytes,1,opt,name=conversation_id,json=conversationId,proto3" json:"conversation_id,omitempty"`
	ConversationShortId int64  `protobuf:"varint,2,opt,name=conversation_short_id,json=conversationShortId,proto3" json:"conversation_short_id,omitempty"`
	ConversationType    int32  `protobuf:"varint,3,opt,name=conversation_type,json=conversationType,proto3" json:"conversation_type,omitempty"`
	LastMessageIndex    int64  `protobuf:"varint,4,opt,name=last_message_index,json=lastMessageIndex,proto3" json:"last_message_index,omitempty"`
}

func (x *DeleteConversationRequestBody) Reset() {
	*x = DeleteConversationRequestBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteConversationRequestBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteConversationRequestBody) ProtoMessage() {}

func (x *DeleteConversationRequestBody) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteConversationRequestBody.ProtoReflect.Descriptor instead.
func (*DeleteConversationRequestBody) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{11}
}

func (x *DeleteConversationRequestBody) GetConversationId() string {
	if x != nil {
		return x.ConversationId
	}
	return ""
}

func (x *DeleteConversationRequestBody) GetConversationShortId() int64 {
	if x != nil {
		return x.ConversationShortId
	}
	return 0
}

func (x *DeleteConversationRequestBody) GetConversationType() int32 {
	if x != nil {
		return x.ConversationType
	}
	return 0
}

func (x *DeleteConversationRequestBody) GetLastMessageIndex() int64 {
	if x != nil {
		return x.LastMessageIndex
	}
	return 0
}

type MarkConversationReadRequestBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConversationId      string `protobuf:"bytes,1,opt,name=conversation_id,json=conversationId,proto3" json:"conversation_id,omitempty"`
	ConversationShortId int64  `protobuf:"varint,2,opt,name=conversation_short_id,json=conversationShortId,proto3" json:"conversation_short_id,omitempty"`
	ConversationType    int32  `protobuf:"varint,3,opt,name=conversation_type,json=conversationType,proto3" json:"conversation_type,omitempty"`
	ReadMessageIndex    int64  `protobuf:"varint,4,opt,name=read_message_index,json=readMessageIndex,proto3" json:"read_message_index,omitempty"`
	ConvUnreadCount     int64  `protobuf:"varint,5,opt,name=conv_unread_count,json=convUnreadCount,proto3" json:"conv_unread_count,omitempty"`
	TotalUnreadCount    int64  `protobuf:"varint,6,opt,name=total_unread_count,json=totalUnreadCount,proto3" json:"total_unread_count,omitempty"`
}

func (x *MarkConversationReadRequestBody) Reset() {
	*x = MarkConversationReadRequestBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarkConversationReadRequestBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkConversationReadRequestBody) ProtoMessage() {}

func (x *MarkConversationReadRequestBody) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkConversationReadRequestBody.ProtoReflect.Descriptor instead.
func (*MarkConversationReadRequestBody) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{12}
}

func (x *MarkConversationReadRequestBody) GetConversationId() string {
	if x != nil {
		return x.ConversationId
	}
	return ""
}

func (x *MarkConversationReadRequestBody) GetConversationShortId() int64 {
	if x != nil {
		return x.ConversationShortId
	}
	return 0
}

func (x *MarkConversationReadRequestBody) GetConversationType() int32 {
	if x != nil {
		return x.ConversationType
	}
	return 0
}

func (x *MarkConversationReadRequestBody) GetReadMessageIndex() int64 {
	if x != nil {
		return x.ReadMessageIndex
	}
	return 0
}

func (x *MarkConversationReadRequestBody) GetConvUnreadCount() int64 {
	if x != nil {
		return x.ConvUnreadCount
	}
	return 0
}

func (x *MarkConversationReadRequestBody) GetTotalUnreadCount() int64 {
	if x != nil {
		return x.TotalUnreadCount
	}
	return 0
}

type ConversationParticipantsListRequestBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConversationId      string `protobuf:"bytes,1,opt,name=conversation_id,json=conversationId,proto3" json:"conversation_id,omitempty"`
	ConversationShortId int64  `protobuf:"varint,2,opt,name=conversation_short_id,json=conversationShortId,proto3" json:"conversation_short_id,omitempty"`
	ConversationType    int32  `protobuf:"varint,3,opt,name=conversation_type,json=conversationType,proto3" json:"conversation_type,omitempty"`
	Cursor              int64  `protobuf:"varint,4,opt,name=cursor,proto3" json:"cursor,omitempty"`
	Limit               int32  `protobuf:"varint,5,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *ConversationParticipantsListRequestBody) Reset() {
	*x = ConversationParticipantsListRequestBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConversationParticipantsListRequestBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConversationParticipantsListRequestBody) ProtoMessage() {}

func (x *ConversationParticipantsListRequestBody) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConversationParticipantsListRequestBody.ProtoReflect.Descriptor instead.
func (*ConversationParticipantsListRequestBody) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{13}
}

func (x *ConversationParticipantsListRequestBody) GetConversationId() string {
	if x != nil {
		return x.ConversationId
	}
	return ""
}

func (x *ConversationParticipantsListRequestBody) GetConversationShortId() int64 {
	if x != nil {
		return x.ConversationShortId
	}
	return 0
}

func (x *ConversationParticipantsListRequestBody) GetConversationType() int32 {
	if x != nil {
		return x.ConversationType
	}
	return 0
}

func (x *ConversationParticipantsListRequestBody) GetCursor() int64 {
	if x != nil {
		return x.Cursor
	}
	return 0
}

func (x *ConversationParticipantsListRequestBody) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type DissolveConversationRequestBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConversationId      string `protobuf:"bytes,1,opt,name=conversation_id,json=conversationId,proto3" json:"conversation_id,omitempty"`
	ConversationShortId int64  `protobuf:"varint,2,opt,name=conversation_short_id,json=conversationShortId,proto3" json:"conversation_short_id,omitempty"`
	ConversationType    int32  `protobuf:"varint,3,opt,name=conversation_type,json=conversationType,proto3" json:"conversation_type,omitempty"`
}

func (x *DissolveConversationRequestBody) Reset() {
	*x = DissolveConversationRequestBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DissolveConversationRequestBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DissolveConversationRequestBody) ProtoMessage() {}

func (x *DissolveConversationRequestBody) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DissolveConversationRequestBody.ProtoReflect.Descriptor instead.
func (*DissolveConversationRequestBody) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{14}
}

func (x *DissolveConversationRequestBody) GetConversationId() string {
	if x != nil {
		return x.ConversationId
	}
	return ""
}

func (x *DissolveConversationRequestBody) GetConversationShortId() int64 {
	if x != nil {
		return x.ConversationShortId
	}
	return 0
}

func (x *DissolveConversationRequestBody) GetConversationType() int32 {
	if x != nil {
		return x.ConversationType
	}
	return 0
}

type CreateConversationV2RequestBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConversationType int32             `protobuf:"varint,1,opt,name=conversation_type,json=conversationType,proto3" json:"conversation_type,omitempty"`
	Participants     []int64           `protobuf:"varint,2,rep,packed,name=participants,proto3" json:"participants,omitempty"`
	Persistent       bool              `protobuf:"varint,3,opt,name=persistent,proto3" json:"persistent,omitempty"`
	IdempotentId     string            `protobuf:"bytes,4,opt,name=idempotent_id,json=idempotentId,proto3" json:"idempotent_id,omitempty"`
	Name             string            `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	AvatarUrl        string            `protobuf:"bytes,7,opt,name=avatar_url,json=avatarUrl,proto3" json:"avatar_url,omitempty"`
	Description      string            `protobuf:"bytes,8,opt,name=description,proto3" json:"description,omitempty"`
	BizExt           map[string]string `protobuf:"bytes,11,rep,name=biz_ext,json=bizExt,proto3" json:"biz_ext,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CreateConversationV2RequestBody) Reset() {
	*x = CreateConversationV2RequestBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateConversationV2RequestBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateConversationV2RequestBody) ProtoMessage() {}

func (x *CreateConversationV2RequestBody) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateConversationV2RequestBody.ProtoReflect.Descriptor instead.
func (*CreateConversationV2RequestBody) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{15}
}

func (x *CreateConversationV2RequestBody) GetConversationType() int32 {
	if x != nil {
		return x.ConversationType
	}
	return 0
}

func (x *CreateConversationV2RequestBody) GetParticipants() []int64 {
	if x != nil {
		return x.Participants
	}
	return nil
}

func (x *CreateConversationV2RequestBody) GetPersistent() bool {
	if x != nil {
		return x.Persistent
	}
	return false
}

func (x *CreateConversationV2RequestBody) GetIdempotentId() string {
	if x != nil {
		return x.IdempotentId
	}
	return ""
}

func (x *CreateConversationV2RequestBody) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateConversationV2RequestBody) GetAvatarUrl() string {
	if x != nil {
		return x.AvatarUrl
	}
	return ""
}

func (x *CreateConversationV2RequestBody) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateConversationV2RequestBody) GetBizExt() map[string]string {
	if x != nil {
		return x.BizExt
	}
	return nil
}

type GetConversationInfoListV2RequestBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetConversationInfoListV2RequestBody) Reset() {
	*x = GetConversationInfoListV2RequestBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConversationInfoListV2RequestBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConversationInfoListV2RequestBody) ProtoMessage() {}

func (x *GetConversationInfoListV2RequestBody) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConversationInfoListV2RequestBody.ProtoReflect.Descriptor instead.
func (*GetConversationInfoListV2RequestBody) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{16}
}

type ConversationsPerUserByFavoriteV2RequestBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cursor int64 `protobuf:"varint,1,opt,name=cursor,proto3" json:"cursor,omitempty"`
	Limit  int32 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *ConversationsPerUserByFavoriteV2RequestBody) Reset() {
	*x = ConversationsPerUserByFavoriteV2RequestBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConversationsPerUserByFavoriteV2RequestBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConversationsPerUserByFavoriteV2RequestBody) ProtoMessage() {}

func (x *ConversationsPerUserByFavoriteV2RequestBody) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConversationsPerUserByFavoriteV2RequestBody.ProtoReflect.Descriptor instead.
func (*ConversationsPerUserByFavoriteV2RequestBody) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{17}
}

func (x *ConversationsPerUserByFavoriteV2RequestBody) GetCursor() int64 {
	if x != nil {
		return x.Cursor
	}
	return 0
}

func (x *ConversationsPerUserByFavoriteV2RequestBody) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type ConversationsPerUserByTopV2RequestBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cursor int64 `protobuf:"varint,1,opt,name=cursor,proto3" json:"cursor,omitempty"`
	Limit  int32 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *ConversationsPerUserByTopV2RequestBody) Reset() {
	*x = ConversationsPerUserByTopV2RequestBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConversationsPerUserByTopV2RequestBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConversationsPerUserByTopV2RequestBody) ProtoMessage() {}

func (x *ConversationsPerUserByTopV2RequestBody) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConversationsPerUserByTopV2RequestBody.ProtoReflect.Descriptor instead.
func (*ConversationsPerUserByTopV2RequestBody) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{18}
}

func (x *ConversationsPerUserByTopV2RequestBody) GetCursor() int64 {
	if x != nil {
		return x.Cursor
	}
	return 0
}

func (x *ConversationsPerUserByTopV2RequestBody) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type ConversationAddParticipantsRequestBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConversationId      string            `protobuf:"bytes,1,opt,name=conversation_id,json=conversationId,proto3" json:"conversation_id,omitempty"`
	ConversationShortId int64             `protobuf:"varint,2,opt,name=conversation_short_id,json=conversationShortId,proto3" json:"conversation_short_id,omitempty"`
	ConversationType    int32             `protobuf:"varint,3,opt,name=conversation_type,json=conversationType,proto3" json:"conversation_type,omitempty"`
	Participants        []int64           `protobuf:"varint,4,rep,packed,name=participants,proto3" json:"participants,omitempty"`
	BizExt              map[string]string `protobuf:"bytes,5,rep,name=biz_ext,json=bizExt,proto3" json:"biz_ext,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ConversationAddParticipantsRequestBody) Reset() {
	*x = ConversationAddParticipantsRequestBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConversationAddParticipantsRequestBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConversationAddParticipantsRequestBody) ProtoMessage() {}

func (x *ConversationAddParticipantsRequestBody) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConversationAddParticipantsRequestBody.ProtoReflect.Descriptor instead.
func (*ConversationAddParticipantsRequestBody) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{19}
}

func (x *ConversationAddParticipantsRequestBody) GetConversationId() string {
	if x != nil {
		return x.ConversationId
	}
	return ""
}

func (x *ConversationAddParticipantsRequestBody) GetConversationShortId() int64 {
	if x != nil {
		return x.ConversationShortId
	}
	return 0
}

func (x *ConversationAddParticipantsRequestBody) GetConversationType() int32 {
	if x != nil {
		return x.ConversationType
	}
	return 0
}

func (x *ConversationAddParticipantsRequestBody) GetParticipants() []int64 {
	if x != nil {
		return x.Participants
	}
	return nil
}

func (x *ConversationAddParticipantsRequestBody) GetBizExt() map[string]string {
	if x != nil {
		return x.BizExt
	}
	return nil
}

type ConversationRemoveParticipantsRequestBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConversationId      string            `protobuf:"bytes,1,opt,name=conversation_id,json=conversationId,proto3" json:"conversation_id,omitempty"`
	ConversationShortId int64             `protobuf:"varint,2,opt,name=conversation_short_id,json=conversationShortId,proto3" json:"conversation_short_id,omitempty"`
	ConversationType    int32             `protobuf:"varint,3,opt,name=conversation_type,json=conversationType,proto3" json:"conversation_type,omitempty"`
	Participants        []int64           `protobuf:"varint,4,rep,packed,name=participants,proto3" json:"participants,omitempty"`
	BizExt              map[string]string `protobuf:"bytes,5,rep,name=biz_ext,json=bizExt,proto3" json:"biz_ext,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ConversationRemoveParticipantsRequestBody) Reset() {
	*x = ConversationRemoveParticipantsRequestBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConversationRemoveParticipantsRequestBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConversationRemoveParticipantsRequestBody) ProtoMessage() {}

func (x *ConversationRemoveParticipantsRequestBody) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConversationRemoveParticipantsRequestBody.ProtoReflect.Descriptor instead.
func (*ConversationRemoveParticipantsRequestBody) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{20}
}

func (x *ConversationRemoveParticipantsRequestBody) GetConversationId() string {
	if x != nil {
		return x.ConversationId
	}
	return ""
}

func (x *ConversationRemoveParticipantsRequestBody) GetConversationShortId() int64 {
	if x != nil {
		return x.ConversationShortId
	}
	return 0
}

func (x *ConversationRemoveParticipantsRequestBody) GetConversationType() int32 {
	if x != nil {
		return x.ConversationType
	}
	return 0
}

func (x *ConversationRemoveParticipantsRequestBody) GetParticipants() []int64 {
	if x != nil {
		return x.Participants
	}
	return nil
}

func (x *ConversationRemoveParticipantsRequestBody) GetBizExt() map[string]string {
	if x != nil {
		return x.BizExt
	}
	return nil
}

type ConversationLeaveRequestBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConversationId      string `protobuf:"bytes,1,opt,name=conversation_id,json=conversationId,proto3" json:"conversation_id,omitempty"`
	ConversationShortId int64  `protobuf:"varint,2,opt,name=conversation_short_id,json=conversationShortId,proto3" json:"conversation_short_id,omitempty"`
	ConversationType    int32  `protobuf:"varint,3,opt,name=conversation_type,json=conversationType,proto3" json:"conversation_type,omitempty"`
}

func (x *ConversationLeaveRequestBody) Reset() {
	*x = ConversationLeaveRequestBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConversationLeaveRequestBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConversationLeaveRequestBody) ProtoMessage() {}

func (x *ConversationLeaveRequestBody) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConversationLeaveRequestBody.ProtoReflect.Descriptor instead.
func (*ConversationLeaveRequestBody) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{21}
}

func (x *ConversationLeaveRequestBody) GetConversationId() string {
	if x != nil {
		return x.ConversationId
	}
	return ""
}

func (x *ConversationLeaveRequestBody) GetConversationShortId() int64 {
	if x != nil {
		return x.ConversationShortId
	}
	return 0
}

func (x *ConversationLeaveRequestBody) GetConversationType() int32 {
	if x != nil {
		return x.ConversationType
	}
	return 0
}

type UpdateConversationParticipantRequestBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConversationId      string            `protobuf:"bytes,1,opt,name=conversation_id,json=conversationId,proto3" json:"conversation_id,omitempty"`
	ConversationShortId int64             `protobuf:"varint,2,opt,name=conversation_short_id,json=conversationShortId,proto3" json:"conversation_short_id,omitempty"`
	ConversationType    int32             `protobuf:"varint,3,opt,name=conversation_type,json=conversationType,proto3" json:"conversation_type,omitempty"`
	UserId              int64             `protobuf:"varint,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Role                int32             `protobuf:"varint,5,opt,name=role,proto3" json:"role,omitempty"`
	Alias               string            `protobuf:"bytes,6,opt,name=alias,proto3" json:"alias,omitempty"`
	IsAliasSet          bool              `protobuf:"varint,7,opt,name=is_alias_set,json=isAliasSet,proto3" json:"is_alias_set,omitempty"`
	BizExt              map[string]string `protobuf:"bytes,11,rep,name=biz_ext,json=bizExt,proto3" json:"biz_ext,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *UpdateConversationParticipantRequestBody) Reset() {
	*x = UpdateConversationParticipantRequestBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateConversationParticipantRequestBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateConversationParticipantRequestBody) ProtoMessage() {}

func (x *UpdateConversationParticipantRequestBody) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateConversationParticipantRequestBody.ProtoReflect.Descriptor instead.
func (*UpdateConversationParticipantRequestBody) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{22}
}

func (x *UpdateConversationParticipantRequestBody) GetConversationId() string {
	if x != nil {
		return x.ConversationId
	}
	return ""
}

func (x *UpdateConversationParticipantRequestBody) GetConversationShortId() int64 {
	if x != nil {
		return x.ConversationShortId
	}
	return 0
}

func (x *UpdateConversationParticipantRequestBody) GetConversationType() int32 {
	if x != nil {
		return x.ConversationType
	}
	return 0
}

func (x *UpdateConversationParticipantRequestBody) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UpdateConversationParticipantRequestBody) GetRole() int32 {
	if x != nil {
		return x.Role
	}
	return 0
}

func (x *UpdateConversationParticipantRequestBody) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

func (x *UpdateConversationParticipantRequestBody) GetIsAliasSet() bool {
	if x != nil {
		return x.IsAliasSet
	}
	return false
}

func (x *UpdateConversationParticipantRequestBody) GetBizExt() map[string]string {
	if x != nil {
		return x.BizExt
	}
	return nil
}

type DeleteMessageRequestBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConversationId      string `protobuf:"bytes,1,opt,name=conversation_id,json=conversationId,proto3" json:"conversation_id,omitempty"`
	ConversationShortId int64  `protobuf:"varint,2,opt,name=conversation_short_id,json=conversationShortId,proto3" json:"conversation_short_id,omitempty"`
	ConversationType    int32  `protobuf:"varint,3,opt,name=conversation_type,json=conversationType,proto3" json:"conversation_type,omitempty"`
	MessageId           int64  `protobuf:"varint,4,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
}

func (x *DeleteMessageRequestBody) Reset() {
	*x = DeleteMessageRequestBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteMessageRequestBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteMessageRequestBody) ProtoMessage() {}

func (x *DeleteMessageRequestBody) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteMessageRequestBody.ProtoReflect.Descriptor instead.
func (*DeleteMessageRequestBody) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{23}
}

func (x *DeleteMessageRequestBody) GetConversationId() string {
	if x != nil {
		return x.ConversationId
	}
	return ""
}

func (x *DeleteMessageRequestBody) GetConversationShortId() int64 {
	if x != nil {
		return x.ConversationShortId
	}
	return 0
}

func (x *DeleteMessageRequestBody) GetConversationType() int32 {
	if x != nil {
		return x.ConversationType
	}
	return 0
}

func (x *DeleteMessageRequestBody) GetMessageId() int64 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

type RecallMessageRequestBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConversationId      string `protobuf:"bytes,1,opt,name=conversation_id,json=conversationId,proto3" json:"conversation_id,omitempty"`
	ConversationShortId int64  `protobuf:"varint,2,opt,name=conversation_short_id,json=conversationShortId,proto3" json:"conversation_short_id,omitempty"`
	ConversationType    int32  `protobuf:"varint,3,opt,name=conversation_type,json=conversationType,proto3" json:"conversation_type,omitempty"`
	ServerMessageId     int64  `protobuf:"varint,4,opt,name=server_message_id,json=serverMessageId,proto3" json:"server_message_id,omitempty"`
}

func (x *RecallMessageRequestBody) Reset() {
	*x = RecallMessageRequestBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecallMessageRequestBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecallMessageRequestBody) ProtoMessage() {}

func (x *RecallMessageRequestBody) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecallMessageRequestBody.ProtoReflect.Descriptor instead.
func (*RecallMessageRequestBody) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{24}
}

func (x *RecallMessageRequestBody) GetConversationId() string {
	if x != nil {
		return x.ConversationId
	}
	return ""
}

func (x *RecallMessageRequestBody) GetConversationShortId() int64 {
	if x != nil {
		return x.ConversationShortId
	}
	return 0
}

func (x *RecallMessageRequestBody) GetConversationType() int32 {
	if x != nil {
		return x.ConversationType
	}
	return 0
}

func (x *RecallMessageRequestBody) GetServerMessageId() int64 {
	if x != nil {
		return x.ServerMessageId
	}
	return 0
}

type ModifyPropertyContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operation    int32  `protobuf:"varint,1,opt,name=operation,proto3" json:"operation,omitempty"`
	Key          string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	Value        string `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	IdempotentId string `protobuf:"bytes,4,opt,name=idempotent_id,json=idempotentId,proto3" json:"idempotent_id,omitempty"`
}

func (x *ModifyPropertyContent) Reset() {
	*x = ModifyPropertyContent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyPropertyContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyPropertyContent) ProtoMessage() {}

func (x *ModifyPropertyContent) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyPropertyContent.ProtoReflect.Descriptor instead.
func (*ModifyPropertyContent) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{25}
}

func (x *ModifyPropertyContent) GetOperation() int32 {
	if x != nil {
		return x.Operation
	}
	return 0
}

func (x *ModifyPropertyContent) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *ModifyPropertyContent) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *ModifyPropertyContent) GetIdempotentId() string {
	if x != nil {
		return x.IdempotentId
	}
	return ""
}

type ModifyPropertyBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConversationId        string                   `protobuf:"bytes,1,opt,name=conversation_id,json=conversationId,proto3" json:"conversation_id,omitempty"`
	ConversationType      int32                    `protobuf:"varint,2,opt,name=conversation_type,json=conversationType,proto3" json:"conversation_type,omitempty"`
	ConversationShortId   int64                    `protobuf:"varint,3,opt,name=conversation_short_id,json=conversationShortId,proto3" json:"conversation_short_id,omitempty"`
	ServerMessageId       int64                    `protobuf:"varint,4,opt,name=server_message_id,json=serverMessageId,proto3" json:"server_message_id,omitempty"`
	ClientMessageId       string                   `protobuf:"bytes,5,opt,name=client_message_id,json=clientMessageId,proto3" json:"client_message_id,omitempty"`
	ModifyPropertyContent []*ModifyPropertyContent `protobuf:"bytes,6,rep,name=modify_property_content,json=modifyPropertyContent,proto3" json:"modify_property_content,omitempty"`
}

func (x *ModifyPropertyBody) Reset() {
	*x = ModifyPropertyBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyPropertyBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyPropertyBody) ProtoMessage() {}

func (x *ModifyPropertyBody) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyPropertyBody.ProtoReflect.Descriptor instead.
func (*ModifyPropertyBody) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{26}
}

func (x *ModifyPropertyBody) GetConversationId() string {
	if x != nil {
		return x.ConversationId
	}
	return ""
}

func (x *ModifyPropertyBody) GetConversationType() int32 {
	if x != nil {
		return x.ConversationType
	}
	return 0
}

func (x *ModifyPropertyBody) GetConversationShortId() int64 {
	if x != nil {
		return x.ConversationShortId
	}
	return 0
}

func (x *ModifyPropertyBody) GetServerMessageId() int64 {
	if x != nil {
		return x.ServerMessageId
	}
	return 0
}

func (x *ModifyPropertyBody) GetClientMessageId() string {
	if x != nil {
		return x.ClientMessageId
	}
	return ""
}

func (x *ModifyPropertyBody) GetModifyPropertyContent() []*ModifyPropertyContent {
	if x != nil {
		return x.ModifyPropertyContent
	}
	return nil
}

type ModifyMessagePropertyRequestBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PropertyList *ModifyPropertyBody `protobuf:"bytes,1,opt,name=property_list,json=propertyList,proto3" json:"property_list,omitempty"`
	Ticket       string              `protobuf:"bytes,2,opt,name=ticket,proto3" json:"ticket,omitempty"`
}

func (x *ModifyMessagePropertyRequestBody) Reset() {
	*x = ModifyMessagePropertyRequestBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyMessagePropertyRequestBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyMessagePropertyRequestBody) ProtoMessage() {}

func (x *ModifyMessagePropertyRequestBody) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyMessagePropertyRequestBody.ProtoReflect.Descriptor instead.
func (*ModifyMessagePropertyRequestBody) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{27}
}

func (x *ModifyMessagePropertyRequestBody) GetPropertyList() *ModifyPropertyBody {
	if x != nil {
		return x.PropertyList
	}
	return nil
}

func (x *ModifyMessagePropertyRequestBody) GetTicket() string {
	if x != nil {
		return x.Ticket
	}
	return ""
}

type GetConversationCoreInfoRequestBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConversationId      string `protobuf:"bytes,1,opt,name=conversation_id,json=conversationId,proto3" json:"conversation_id,omitempty"`
	ConversationShortId int64  `protobuf:"varint,2,opt,name=conversation_short_id,json=conversationShortId,proto3" json:"conversation_short_id,omitempty"`
	ConversationType    int32  `protobuf:"varint,3,opt,name=conversation_type,json=conversationType,proto3" json:"conversation_type,omitempty"`
}

func (x *GetConversationCoreInfoRequestBody) Reset() {
	*x = GetConversationCoreInfoRequestBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConversationCoreInfoRequestBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConversationCoreInfoRequestBody) ProtoMessage() {}

func (x *GetConversationCoreInfoRequestBody) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConversationCoreInfoRequestBody.ProtoReflect.Descriptor instead.
func (*GetConversationCoreInfoRequestBody) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{28}
}

func (x *GetConversationCoreInfoRequestBody) GetConversationId() string {
	if x != nil {
		return x.ConversationId
	}
	return ""
}

func (x *GetConversationCoreInfoRequestBody) GetConversationShortId() int64 {
	if x != nil {
		return x.ConversationShortId
	}
	return 0
}

func (x *GetConversationCoreInfoRequestBody) GetConversationType() int32 {
	if x != nil {
		return x.ConversationType
	}
	return 0
}

type SetConversationCoreInfoRequestBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConversationId      string `protobuf:"bytes,1,opt,name=conversation_id,json=conversationId,proto3" json:"conversation_id,omitempty"`
	ConversationShortId int64  `protobuf:"varint,2,opt,name=conversation_short_id,json=conversationShortId,proto3" json:"conversation_short_id,omitempty"`
	ConversationType    int32  `protobuf:"varint,3,opt,name=conversation_type,json=conversationType,proto3" json:"conversation_type,omitempty"`
	Name                string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Desc                string `protobuf:"bytes,5,opt,name=desc,proto3" json:"desc,omitempty"`
	Icon                string `protobuf:"bytes,6,opt,name=icon,proto3" json:"icon,omitempty"`
	Notice              string `protobuf:"bytes,7,opt,name=notice,proto3" json:"notice,omitempty"`
	IsNameSet           bool   `protobuf:"varint,8,opt,name=is_name_set,json=isNameSet,proto3" json:"is_name_set,omitempty"`
	IsDescSet           bool   `protobuf:"varint,9,opt,name=is_desc_set,json=isDescSet,proto3" json:"is_desc_set,omitempty"`
	IsIconSet           bool   `protobuf:"varint,10,opt,name=is_icon_set,json=isIconSet,proto3" json:"is_icon_set,omitempty"`
	IsNoticeSet         bool   `protobuf:"varint,11,opt,name=is_notice_set,json=isNoticeSet,proto3" json:"is_notice_set,omitempty"`
}

func (x *SetConversationCoreInfoRequestBody) Reset() {
	*x = SetConversationCoreInfoRequestBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetConversationCoreInfoRequestBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetConversationCoreInfoRequestBody) ProtoMessage() {}

func (x *SetConversationCoreInfoRequestBody) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetConversationCoreInfoRequestBody.ProtoReflect.Descriptor instead.
func (*SetConversationCoreInfoRequestBody) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{29}
}

func (x *SetConversationCoreInfoRequestBody) GetConversationId() string {
	if x != nil {
		return x.ConversationId
	}
	return ""
}

func (x *SetConversationCoreInfoRequestBody) GetConversationShortId() int64 {
	if x != nil {
		return x.ConversationShortId
	}
	return 0
}

func (x *SetConversationCoreInfoRequestBody) GetConversationType() int32 {
	if x != nil {
		return x.ConversationType
	}
	return 0
}

func (x *SetConversationCoreInfoRequestBody) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SetConversationCoreInfoRequestBody) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *SetConversationCoreInfoRequestBody) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *SetConversationCoreInfoRequestBody) GetNotice() string {
	if x != nil {
		return x.Notice
	}
	return ""
}

func (x *SetConversationCoreInfoRequestBody) GetIsNameSet() bool {
	if x != nil {
		return x.IsNameSet
	}
	return false
}

func (x *SetConversationCoreInfoRequestBody) GetIsDescSet() bool {
	if x != nil {
		return x.IsDescSet
	}
	return false
}

func (x *SetConversationCoreInfoRequestBody) GetIsIconSet() bool {
	if x != nil {
		return x.IsIconSet
	}
	return false
}

func (x *SetConversationCoreInfoRequestBody) GetIsNoticeSet() bool {
	if x != nil {
		return x.IsNoticeSet
	}
	return false
}

type UpsertConversationCoreExtInfoRequestBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConversationId      string            `protobuf:"bytes,1,opt,name=conversation_id,json=conversationId,proto3" json:"conversation_id,omitempty"`
	ConversationShortId int64             `protobuf:"varint,2,opt,name=conversation_short_id,json=conversationShortId,proto3" json:"conversation_short_id,omitempty"`
	ConversationType    int32             `protobuf:"varint,3,opt,name=conversation_type,json=conversationType,proto3" json:"conversation_type,omitempty"`
	Ext                 map[string]string `protobuf:"bytes,4,rep,name=ext,proto3" json:"ext,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *UpsertConversationCoreExtInfoRequestBody) Reset() {
	*x = UpsertConversationCoreExtInfoRequestBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertConversationCoreExtInfoRequestBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertConversationCoreExtInfoRequestBody) ProtoMessage() {}

func (x *UpsertConversationCoreExtInfoRequestBody) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertConversationCoreExtInfoRequestBody.ProtoReflect.Descriptor instead.
func (*UpsertConversationCoreExtInfoRequestBody) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{30}
}

func (x *UpsertConversationCoreExtInfoRequestBody) GetConversationId() string {
	if x != nil {
		return x.ConversationId
	}
	return ""
}

func (x *UpsertConversationCoreExtInfoRequestBody) GetConversationShortId() int64 {
	if x != nil {
		return x.ConversationShortId
	}
	return 0
}

func (x *UpsertConversationCoreExtInfoRequestBody) GetConversationType() int32 {
	if x != nil {
		return x.ConversationType
	}
	return 0
}

func (x *UpsertConversationCoreExtInfoRequestBody) GetExt() map[string]string {
	if x != nil {
		return x.Ext
	}
	return nil
}

type SetConversationSettingInfoRequestBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConversationId      string `protobuf:"bytes,1,opt,name=conversation_id,json=conversationId,proto3" json:"conversation_id,omitempty"`
	ConversationShortId int64  `protobuf:"varint,2,opt,name=conversation_short_id,json=conversationShortId,proto3" json:"conversation_short_id,omitempty"`
	ConversationType    int32  `protobuf:"varint,3,opt,name=conversation_type,json=conversationType,proto3" json:"conversation_type,omitempty"`
	SetStickOnTop       bool   `protobuf:"varint,4,opt,name=set_stick_on_top,json=setStickOnTop,proto3" json:"set_stick_on_top,omitempty"`
	SetMute             bool   `protobuf:"varint,5,opt,name=set_mute,json=setMute,proto3" json:"set_mute,omitempty"`
	SetFavorite         bool   `protobuf:"varint,6,opt,name=set_favorite,json=setFavorite,proto3" json:"set_favorite,omitempty"`
}

func (x *SetConversationSettingInfoRequestBody) Reset() {
	*x = SetConversationSettingInfoRequestBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetConversationSettingInfoRequestBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetConversationSettingInfoRequestBody) ProtoMessage() {}

func (x *SetConversationSettingInfoRequestBody) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetConversationSettingInfoRequestBody.ProtoReflect.Descriptor instead.
func (*SetConversationSettingInfoRequestBody) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{31}
}

func (x *SetConversationSettingInfoRequestBody) GetConversationId() string {
	if x != nil {
		return x.ConversationId
	}
	return ""
}

func (x *SetConversationSettingInfoRequestBody) GetConversationShortId() int64 {
	if x != nil {
		return x.ConversationShortId
	}
	return 0
}

func (x *SetConversationSettingInfoRequestBody) GetConversationType() int32 {
	if x != nil {
		return x.ConversationType
	}
	return 0
}

func (x *SetConversationSettingInfoRequestBody) GetSetStickOnTop() bool {
	if x != nil {
		return x.SetStickOnTop
	}
	return false
}

func (x *SetConversationSettingInfoRequestBody) GetSetMute() bool {
	if x != nil {
		return x.SetMute
	}
	return false
}

func (x *SetConversationSettingInfoRequestBody) GetSetFavorite() bool {
	if x != nil {
		return x.SetFavorite
	}
	return false
}

type UpsertConversationSettingExtInfoRequestBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConversationId      string            `protobuf:"bytes,1,opt,name=conversation_id,json=conversationId,proto3" json:"conversation_id,omitempty"`
	ConversationShortId int64             `protobuf:"varint,2,opt,name=conversation_short_id,json=conversationShortId,proto3" json:"conversation_short_id,omitempty"`
	ConversationType    int32             `protobuf:"varint,3,opt,name=conversation_type,json=conversationType,proto3" json:"conversation_type,omitempty"`
	Ext                 map[string]string `protobuf:"bytes,4,rep,name=ext,proto3" json:"ext,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *UpsertConversationSettingExtInfoRequestBody) Reset() {
	*x = UpsertConversationSettingExtInfoRequestBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertConversationSettingExtInfoRequestBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertConversationSettingExtInfoRequestBody) ProtoMessage() {}

func (x *UpsertConversationSettingExtInfoRequestBody) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertConversationSettingExtInfoRequestBody.ProtoReflect.Descriptor instead.
func (*UpsertConversationSettingExtInfoRequestBody) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{32}
}

func (x *UpsertConversationSettingExtInfoRequestBody) GetConversationId() string {
	if x != nil {
		return x.ConversationId
	}
	return ""
}

func (x *UpsertConversationSettingExtInfoRequestBody) GetConversationShortId() int64 {
	if x != nil {
		return x.ConversationShortId
	}
	return 0
}

func (x *UpsertConversationSettingExtInfoRequestBody) GetConversationType() int32 {
	if x != nil {
		return x.ConversationType
	}
	return 0
}

func (x *UpsertConversationSettingExtInfoRequestBody) GetExt() map[string]string {
	if x != nil {
		return x.Ext
	}
	return nil
}

type GetStrangerConversationListRequestBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cursor          int64 `protobuf:"varint,1,opt,name=cursor,proto3" json:"cursor,omitempty"`
	Count           int64 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	ShowTotalUnread bool  `protobuf:"varint,3,opt,name=show_total_unread,json=showTotalUnread,proto3" json:"show_total_unread,omitempty"`
}

func (x *GetStrangerConversationListRequestBody) Reset() {
	*x = GetStrangerConversationListRequestBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStrangerConversationListRequestBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStrangerConversationListRequestBody) ProtoMessage() {}

func (x *GetStrangerConversationListRequestBody) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStrangerConversationListRequestBody.ProtoReflect.Descriptor instead.
func (*GetStrangerConversationListRequestBody) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{33}
}

func (x *GetStrangerConversationListRequestBody) GetCursor() int64 {
	if x != nil {
		return x.Cursor
	}
	return 0
}

func (x *GetStrangerConversationListRequestBody) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *GetStrangerConversationListRequestBody) GetShowTotalUnread() bool {
	if x != nil {
		return x.ShowTotalUnread
	}
	return false
}

type GetStrangerMessagesRequestBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConversationShortId int64 `protobuf:"varint,1,opt,name=conversation_short_id,json=conversationShortId,proto3" json:"conversation_short_id,omitempty"`
	ResetUnreadCount    bool  `protobuf:"varint,2,opt,name=reset_unread_count,json=resetUnreadCount,proto3" json:"reset_unread_count,omitempty"`
}

func (x *GetStrangerMessagesRequestBody) Reset() {
	*x = GetStrangerMessagesRequestBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStrangerMessagesRequestBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStrangerMessagesRequestBody) ProtoMessage() {}

func (x *GetStrangerMessagesRequestBody) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStrangerMessagesRequestBody.ProtoReflect.Descriptor instead.
func (*GetStrangerMessagesRequestBody) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{34}
}

func (x *GetStrangerMessagesRequestBody) GetConversationShortId() int64 {
	if x != nil {
		return x.ConversationShortId
	}
	return 0
}

func (x *GetStrangerMessagesRequestBody) GetResetUnreadCount() bool {
	if x != nil {
		return x.ResetUnreadCount
	}
	return false
}

type DeleteStrangerMessageRequestBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerMessageId     int64 `protobuf:"varint,1,opt,name=server_message_id,json=serverMessageId,proto3" json:"server_message_id,omitempty"`
	ConversationShortId int64 `protobuf:"varint,2,opt,name=conversation_short_id,json=conversationShortId,proto3" json:"conversation_short_id,omitempty"`
}

func (x *DeleteStrangerMessageRequestBody) Reset() {
	*x = DeleteStrangerMessageRequestBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteStrangerMessageRequestBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteStrangerMessageRequestBody) ProtoMessage() {}

func (x *DeleteStrangerMessageRequestBody) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteStrangerMessageRequestBody.ProtoReflect.Descriptor instead.
func (*DeleteStrangerMessageRequestBody) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{35}
}

func (x *DeleteStrangerMessageRequestBody) GetServerMessageId() int64 {
	if x != nil {
		return x.ServerMessageId
	}
	return 0
}

func (x *DeleteStrangerMessageRequestBody) GetConversationShortId() int64 {
	if x != nil {
		return x.ConversationShortId
	}
	return 0
}

type DeleteStrangerConversationRequestBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteStrangerConversationRequestBody) Reset() {
	*x = DeleteStrangerConversationRequestBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteStrangerConversationRequestBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteStrangerConversationRequestBody) ProtoMessage() {}

func (x *DeleteStrangerConversationRequestBody) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteStrangerConversationRequestBody.ProtoReflect.Descriptor instead.
func (*DeleteStrangerConversationRequestBody) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{36}
}

type DeleteStrangerAllConversationRequestBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteStrangerAllConversationRequestBody) Reset() {
	*x = DeleteStrangerAllConversationRequestBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteStrangerAllConversationRequestBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteStrangerAllConversationRequestBody) ProtoMessage() {}

func (x *DeleteStrangerAllConversationRequestBody) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteStrangerAllConversationRequestBody.ProtoReflect.Descriptor instead.
func (*DeleteStrangerAllConversationRequestBody) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{37}
}

type MarkStrangerConversationReadRequestBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MarkStrangerConversationReadRequestBody) Reset() {
	*x = MarkStrangerConversationReadRequestBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarkStrangerConversationReadRequestBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkStrangerConversationReadRequestBody) ProtoMessage() {}

func (x *MarkStrangerConversationReadRequestBody) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkStrangerConversationReadRequestBody.ProtoReflect.Descriptor instead.
func (*MarkStrangerConversationReadRequestBody) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{38}
}

type MarkStrangerAllConversationReadRequestBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MarkStrangerAllConversationReadRequestBody) Reset() {
	*x = MarkStrangerAllConversationReadRequestBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarkStrangerAllConversationReadRequestBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkStrangerAllConversationReadRequestBody) ProtoMessage() {}

func (x *MarkStrangerAllConversationReadRequestBody) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkStrangerAllConversationReadRequestBody.ProtoReflect.Descriptor instead.
func (*MarkStrangerAllConversationReadRequestBody) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{39}
}

type GetConversationParticipantsMinIndexV3RequestBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConversationShortId int64  `protobuf:"varint,1,opt,name=conversation_short_id,json=conversationShortId,proto3" json:"conversation_short_id,omitempty"`
	ConversationType    int32  `protobuf:"varint,2,opt,name=conversation_type,json=conversationType,proto3" json:"conversation_type,omitempty"`
	ConversationId      string `protobuf:"bytes,3,opt,name=conversation_id,json=conversationId,proto3" json:"conversation_id,omitempty"`
}

func (x *GetConversationParticipantsMinIndexV3RequestBody) Reset() {
	*x = GetConversationParticipantsMinIndexV3RequestBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConversationParticipantsMinIndexV3RequestBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConversationParticipantsMinIndexV3RequestBody) ProtoMessage() {}

func (x *GetConversationParticipantsMinIndexV3RequestBody) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConversationParticipantsMinIndexV3RequestBody.ProtoReflect.Descriptor instead.
func (*GetConversationParticipantsMinIndexV3RequestBody) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{40}
}

func (x *GetConversationParticipantsMinIndexV3RequestBody) GetConversationShortId() int64 {
	if x != nil {
		return x.ConversationShortId
	}
	return 0
}

func (x *GetConversationParticipantsMinIndexV3RequestBody) GetConversationType() int32 {
	if x != nil {
		return x.ConversationType
	}
	return 0
}

func (x *GetConversationParticipantsMinIndexV3RequestBody) GetConversationId() string {
	if x != nil {
		return x.ConversationId
	}
	return ""
}

type GetUploadTokenRequestBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VsdkVersion string `protobuf:"bytes,1,opt,name=vsdk_version,json=vsdkVersion,proto3" json:"vsdk_version,omitempty"`
	TokenType   int32  `protobuf:"varint,2,opt,name=token_type,json=tokenType,proto3" json:"token_type,omitempty"`
}

func (x *GetUploadTokenRequestBody) Reset() {
	*x = GetUploadTokenRequestBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUploadTokenRequestBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUploadTokenRequestBody) ProtoMessage() {}

func (x *GetUploadTokenRequestBody) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUploadTokenRequestBody.ProtoReflect.Descriptor instead.
func (*GetUploadTokenRequestBody) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{41}
}

func (x *GetUploadTokenRequestBody) GetVsdkVersion() string {
	if x != nil {
		return x.VsdkVersion
	}
	return ""
}

func (x *GetUploadTokenRequestBody) GetTokenType() int32 {
	if x != nil {
		return x.TokenType
	}
	return 0
}

type GetMediaUrlsRequestBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceAppid  int32          `protobuf:"varint,1,opt,name=source_appid,json=sourceAppid,proto3" json:"source_appid,omitempty"`
	Uri          string         `protobuf:"bytes,2,opt,name=uri,proto3" json:"uri,omitempty"`
	MediaType    int32          `protobuf:"varint,3,opt,name=media_type,json=mediaType,proto3" json:"media_type,omitempty"`
	Encrypted    bool           `protobuf:"varint,4,opt,name=encrypted,proto3" json:"encrypted,omitempty"`
	ImgOptions   []*ImgOption   `protobuf:"bytes,5,rep,name=img_options,json=imgOptions,proto3" json:"img_options,omitempty"`
	VideoOptions []*VideoOption `protobuf:"bytes,6,rep,name=video_options,json=videoOptions,proto3" json:"video_options,omitempty"`
	AudioOptions []*AudioOption `protobuf:"bytes,7,rep,name=audio_options,json=audioOptions,proto3" json:"audio_options,omitempty"`
	FileOptions  []*FileOption  `protobuf:"bytes,8,rep,name=file_options,json=fileOptions,proto3" json:"file_options,omitempty"`
	EncryptedUri string         `protobuf:"bytes,9,opt,name=encrypted_uri,json=encryptedUri,proto3" json:"encrypted_uri,omitempty"`
	ReadUrlFrom  int32          `protobuf:"varint,10,opt,name=read_url_from,json=readUrlFrom,proto3" json:"read_url_from,omitempty"`
}

func (x *GetMediaUrlsRequestBody) Reset() {
	*x = GetMediaUrlsRequestBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMediaUrlsRequestBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMediaUrlsRequestBody) ProtoMessage() {}

func (x *GetMediaUrlsRequestBody) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMediaUrlsRequestBody.ProtoReflect.Descriptor instead.
func (*GetMediaUrlsRequestBody) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{42}
}

func (x *GetMediaUrlsRequestBody) GetSourceAppid() int32 {
	if x != nil {
		return x.SourceAppid
	}
	return 0
}

func (x *GetMediaUrlsRequestBody) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

func (x *GetMediaUrlsRequestBody) GetMediaType() int32 {
	if x != nil {
		return x.MediaType
	}
	return 0
}

func (x *GetMediaUrlsRequestBody) GetEncrypted() bool {
	if x != nil {
		return x.Encrypted
	}
	return false
}

func (x *GetMediaUrlsRequestBody) GetImgOptions() []*ImgOption {
	if x != nil {
		return x.ImgOptions
	}
	return nil
}

func (x *GetMediaUrlsRequestBody) GetVideoOptions() []*VideoOption {
	if x != nil {
		return x.VideoOptions
	}
	return nil
}

func (x *GetMediaUrlsRequestBody) GetAudioOptions() []*AudioOption {
	if x != nil {
		return x.AudioOptions
	}
	return nil
}

func (x *GetMediaUrlsRequestBody) GetFileOptions() []*FileOption {
	if x != nil {
		return x.FileOptions
	}
	return nil
}

func (x *GetMediaUrlsRequestBody) GetEncryptedUri() string {
	if x != nil {
		return x.EncryptedUri
	}
	return ""
}

func (x *GetMediaUrlsRequestBody) GetReadUrlFrom() int32 {
	if x != nil {
		return x.ReadUrlFrom
	}
	return 0
}

type GetTicketRequestBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TicketType          int32             `protobuf:"varint,1,opt,name=ticket_type,json=ticketType,proto3" json:"ticket_type,omitempty"`
	ConversationType    int32             `protobuf:"varint,2,opt,name=conversation_type,json=conversationType,proto3" json:"conversation_type,omitempty"`
	ToId                int64             `protobuf:"varint,4,opt,name=to_id,json=toId,proto3" json:"to_id,omitempty"`
	ConversationShortId int64             `protobuf:"varint,5,opt,name=conversation_short_id,json=conversationShortId,proto3" json:"conversation_short_id,omitempty"`
	Ext                 map[string]string `protobuf:"bytes,10,rep,name=ext,proto3" json:"ext,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetTicketRequestBody) Reset() {
	*x = GetTicketRequestBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTicketRequestBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTicketRequestBody) ProtoMessage() {}

func (x *GetTicketRequestBody) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTicketRequestBody.ProtoReflect.Descriptor instead.
func (*GetTicketRequestBody) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{43}
}

func (x *GetTicketRequestBody) GetTicketType() int32 {
	if x != nil {
		return x.TicketType
	}
	return 0
}

func (x *GetTicketRequestBody) GetConversationType() int32 {
	if x != nil {
		return x.ConversationType
	}
	return 0
}

func (x *GetTicketRequestBody) GetToId() int64 {
	if x != nil {
		return x.ToId
	}
	return 0
}

func (x *GetTicketRequestBody) GetConversationShortId() int64 {
	if x != nil {
		return x.ConversationShortId
	}
	return 0
}

func (x *GetTicketRequestBody) GetExt() map[string]string {
	if x != nil {
		return x.Ext
	}
	return nil
}

type GetUserConversationListRequestBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SortType    int32 `protobuf:"varint,1,opt,name=sort_type,json=sortType,proto3" json:"sort_type,omitempty"`
	Cursor      int64 `protobuf:"varint,2,opt,name=cursor,proto3" json:"cursor,omitempty"`
	ConType     int32 `protobuf:"varint,3,opt,name=con_type,json=conType,proto3" json:"con_type,omitempty"`
	Limit       int64 `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
	IncludeRole int32 `protobuf:"varint,5,opt,name=include_role,json=includeRole,proto3" json:"include_role,omitempty"`
	ExcludeRole int32 `protobuf:"varint,6,opt,name=exclude_role,json=excludeRole,proto3" json:"exclude_role,omitempty"`
	WithCold    bool  `protobuf:"varint,8,opt,name=with_cold,json=withCold,proto3" json:"with_cold,omitempty"`
}

func (x *GetUserConversationListRequestBody) Reset() {
	*x = GetUserConversationListRequestBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserConversationListRequestBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserConversationListRequestBody) ProtoMessage() {}

func (x *GetUserConversationListRequestBody) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserConversationListRequestBody.ProtoReflect.Descriptor instead.
func (*GetUserConversationListRequestBody) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{44}
}

func (x *GetUserConversationListRequestBody) GetSortType() int32 {
	if x != nil {
		return x.SortType
	}
	return 0
}

func (x *GetUserConversationListRequestBody) GetCursor() int64 {
	if x != nil {
		return x.Cursor
	}
	return 0
}

func (x *GetUserConversationListRequestBody) GetConType() int32 {
	if x != nil {
		return x.ConType
	}
	return 0
}

func (x *GetUserConversationListRequestBody) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetUserConversationListRequestBody) GetIncludeRole() int32 {
	if x != nil {
		return x.IncludeRole
	}
	return 0
}

func (x *GetUserConversationListRequestBody) GetExcludeRole() int32 {
	if x != nil {
		return x.ExcludeRole
	}
	return 0
}

func (x *GetUserConversationListRequestBody) GetWithCold() bool {
	if x != nil {
		return x.WithCold
	}
	return false
}

type BroadcastSendMessageRequestBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConversationId      string            `protobuf:"bytes,1,opt,name=conversation_id,json=conversationId,proto3" json:"conversation_id,omitempty"`
	ConversationType    int32             `protobuf:"varint,2,opt,name=conversation_type,json=conversationType,proto3" json:"conversation_type,omitempty"`
	ConversationShortId int64             `protobuf:"varint,3,opt,name=conversation_short_id,json=conversationShortId,proto3" json:"conversation_short_id,omitempty"`
	Content             string            `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`
	Ext                 map[string]string `protobuf:"bytes,5,rep,name=ext,proto3" json:"ext,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MessageType         int32             `protobuf:"varint,6,opt,name=message_type,json=messageType,proto3" json:"message_type,omitempty"`
	Ticket              string            `protobuf:"bytes,7,opt,name=ticket,proto3" json:"ticket,omitempty"`
	ClientMessageId     string            `protobuf:"bytes,8,opt,name=client_message_id,json=clientMessageId,proto3" json:"client_message_id,omitempty"`
	MentionedUsers      []int64           `protobuf:"varint,9,rep,packed,name=mentioned_users,json=mentionedUsers,proto3" json:"mentioned_users,omitempty"`
}

func (x *BroadcastSendMessageRequestBody) Reset() {
	*x = BroadcastSendMessageRequestBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BroadcastSendMessageRequestBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BroadcastSendMessageRequestBody) ProtoMessage() {}

func (x *BroadcastSendMessageRequestBody) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BroadcastSendMessageRequestBody.ProtoReflect.Descriptor instead.
func (*BroadcastSendMessageRequestBody) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{45}
}

func (x *BroadcastSendMessageRequestBody) GetConversationId() string {
	if x != nil {
		return x.ConversationId
	}
	return ""
}

func (x *BroadcastSendMessageRequestBody) GetConversationType() int32 {
	if x != nil {
		return x.ConversationType
	}
	return 0
}

func (x *BroadcastSendMessageRequestBody) GetConversationShortId() int64 {
	if x != nil {
		return x.ConversationShortId
	}
	return 0
}

func (x *BroadcastSendMessageRequestBody) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *BroadcastSendMessageRequestBody) GetExt() map[string]string {
	if x != nil {
		return x.Ext
	}
	return nil
}

func (x *BroadcastSendMessageRequestBody) GetMessageType() int32 {
	if x != nil {
		return x.MessageType
	}
	return 0
}

func (x *BroadcastSendMessageRequestBody) GetTicket() string {
	if x != nil {
		return x.Ticket
	}
	return ""
}

func (x *BroadcastSendMessageRequestBody) GetClientMessageId() string {
	if x != nil {
		return x.ClientMessageId
	}
	return ""
}

func (x *BroadcastSendMessageRequestBody) GetMentionedUsers() []int64 {
	if x != nil {
		return x.MentionedUsers
	}
	return nil
}

type GetConversationParticipantsReadIndexV3RequestBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConversationShortId int64  `protobuf:"varint,1,opt,name=conversation_short_id,json=conversationShortId,proto3" json:"conversation_short_id,omitempty"`
	ConversationType    int32  `protobuf:"varint,2,opt,name=conversation_type,json=conversationType,proto3" json:"conversation_type,omitempty"`
	ConversationId      string `protobuf:"bytes,3,opt,name=conversation_id,json=conversationId,proto3" json:"conversation_id,omitempty"`
}

func (x *GetConversationParticipantsReadIndexV3RequestBody) Reset() {
	*x = GetConversationParticipantsReadIndexV3RequestBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConversationParticipantsReadIndexV3RequestBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConversationParticipantsReadIndexV3RequestBody) ProtoMessage() {}

func (x *GetConversationParticipantsReadIndexV3RequestBody) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConversationParticipantsReadIndexV3RequestBody.ProtoReflect.Descriptor instead.
func (*GetConversationParticipantsReadIndexV3RequestBody) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{46}
}

func (x *GetConversationParticipantsReadIndexV3RequestBody) GetConversationShortId() int64 {
	if x != nil {
		return x.ConversationShortId
	}
	return 0
}

func (x *GetConversationParticipantsReadIndexV3RequestBody) GetConversationType() int32 {
	if x != nil {
		return x.ConversationType
	}
	return 0
}

func (x *GetConversationParticipantsReadIndexV3RequestBody) GetConversationId() string {
	if x != nil {
		return x.ConversationId
	}
	return ""
}

type BroadcastRecvMessageRequestBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConversationId      string `protobuf:"bytes,1,opt,name=conversation_id,json=conversationId,proto3" json:"conversation_id,omitempty"`
	ConversationType    int32  `protobuf:"varint,2,opt,name=conversation_type,json=conversationType,proto3" json:"conversation_type,omitempty"`
	ConversationShortId int64  `protobuf:"varint,3,opt,name=conversation_short_id,json=conversationShortId,proto3" json:"conversation_short_id,omitempty"`
	Cursor              int64  `protobuf:"varint,4,opt,name=cursor,proto3" json:"cursor,omitempty"`
	Limit               int64  `protobuf:"varint,5,opt,name=limit,proto3" json:"limit,omitempty"`
	Reverse             bool   `protobuf:"varint,6,opt,name=reverse,proto3" json:"reverse,omitempty"`
	PullType            int32  `protobuf:"varint,7,opt,name=pull_type,json=pullType,proto3" json:"pull_type,omitempty"`
}

func (x *BroadcastRecvMessageRequestBody) Reset() {
	*x = BroadcastRecvMessageRequestBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BroadcastRecvMessageRequestBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BroadcastRecvMessageRequestBody) ProtoMessage() {}

func (x *BroadcastRecvMessageRequestBody) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BroadcastRecvMessageRequestBody.ProtoReflect.Descriptor instead.
func (*BroadcastRecvMessageRequestBody) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{47}
}

func (x *BroadcastRecvMessageRequestBody) GetConversationId() string {
	if x != nil {
		return x.ConversationId
	}
	return ""
}

func (x *BroadcastRecvMessageRequestBody) GetConversationType() int32 {
	if x != nil {
		return x.ConversationType
	}
	return 0
}

func (x *BroadcastRecvMessageRequestBody) GetConversationShortId() int64 {
	if x != nil {
		return x.ConversationShortId
	}
	return 0
}

func (x *BroadcastRecvMessageRequestBody) GetCursor() int64 {
	if x != nil {
		return x.Cursor
	}
	return 0
}

func (x *BroadcastRecvMessageRequestBody) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *BroadcastRecvMessageRequestBody) GetReverse() bool {
	if x != nil {
		return x.Reverse
	}
	return false
}

func (x *BroadcastRecvMessageRequestBody) GetPullType() int32 {
	if x != nil {
		return x.PullType
	}
	return 0
}

type BroadcastUserCounterRequestBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BroadcastUserCounterRequestBody) Reset() {
	*x = BroadcastUserCounterRequestBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BroadcastUserCounterRequestBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BroadcastUserCounterRequestBody) ProtoMessage() {}

func (x *BroadcastUserCounterRequestBody) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BroadcastUserCounterRequestBody.ProtoReflect.Descriptor instead.
func (*BroadcastUserCounterRequestBody) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{48}
}

type ClientACKRequestBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTimeStamp  int64  `protobuf:"varint,1,opt,name=start_time_stamp,json=startTimeStamp,proto3" json:"start_time_stamp,omitempty"`
	Cmd             int32  `protobuf:"varint,2,opt,name=cmd,proto3" json:"cmd,omitempty"`
	NetworkType     int32  `protobuf:"varint,3,opt,name=network_type,json=networkType,proto3" json:"network_type,omitempty"`
	Logid           string `protobuf:"bytes,4,opt,name=logid,proto3" json:"logid,omitempty"`
	ClientTimeStamp int64  `protobuf:"varint,5,opt,name=client_time_stamp,json=clientTimeStamp,proto3" json:"client_time_stamp,omitempty"`
	ServerMessageId int64  `protobuf:"varint,6,opt,name=server_message_id,json=serverMessageId,proto3" json:"server_message_id,omitempty"`
}

func (x *ClientACKRequestBody) Reset() {
	*x = ClientACKRequestBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientACKRequestBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientACKRequestBody) ProtoMessage() {}

func (x *ClientACKRequestBody) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientACKRequestBody.ProtoReflect.Descriptor instead.
func (*ClientACKRequestBody) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{49}
}

func (x *ClientACKRequestBody) GetStartTimeStamp() int64 {
	if x != nil {
		return x.StartTimeStamp
	}
	return 0
}

func (x *ClientACKRequestBody) GetCmd() int32 {
	if x != nil {
		return x.Cmd
	}
	return 0
}

func (x *ClientACKRequestBody) GetNetworkType() int32 {
	if x != nil {
		return x.NetworkType
	}
	return 0
}

func (x *ClientACKRequestBody) GetLogid() string {
	if x != nil {
		return x.Logid
	}
	return ""
}

func (x *ClientACKRequestBody) GetClientTimeStamp() int64 {
	if x != nil {
		return x.ClientTimeStamp
	}
	return 0
}

func (x *ClientACKRequestBody) GetServerMessageId() int64 {
	if x != nil {
		return x.ServerMessageId
	}
	return 0
}

type CreateVoipRequestBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IdempotentId string `protobuf:"bytes,1,opt,name=idempotent_id,json=idempotentId,proto3" json:"idempotent_id,omitempty"`
	VType        int32  `protobuf:"varint,2,opt,name=v_type,json=vType,proto3" json:"v_type,omitempty"`
	ConShortId   int64  `protobuf:"varint,3,opt,name=con_short_id,json=conShortId,proto3" json:"con_short_id,omitempty"`
	SrvMsgId     int64  `protobuf:"varint,4,opt,name=srv_msg_id,json=srvMsgId,proto3" json:"srv_msg_id,omitempty"`
	RefChannelId string `protobuf:"bytes,5,opt,name=ref_channel_id,json=refChannelId,proto3" json:"ref_channel_id,omitempty"`
	VoipMode     int32  `protobuf:"varint,6,opt,name=voip_mode,json=voipMode,proto3" json:"voip_mode,omitempty"`
}

func (x *CreateVoipRequestBody) Reset() {
	*x = CreateVoipRequestBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateVoipRequestBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateVoipRequestBody) ProtoMessage() {}

func (x *CreateVoipRequestBody) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateVoipRequestBody.ProtoReflect.Descriptor instead.
func (*CreateVoipRequestBody) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{50}
}

func (x *CreateVoipRequestBody) GetIdempotentId() string {
	if x != nil {
		return x.IdempotentId
	}
	return ""
}

func (x *CreateVoipRequestBody) GetVType() int32 {
	if x != nil {
		return x.VType
	}
	return 0
}

func (x *CreateVoipRequestBody) GetConShortId() int64 {
	if x != nil {
		return x.ConShortId
	}
	return 0
}

func (x *CreateVoipRequestBody) GetSrvMsgId() int64 {
	if x != nil {
		return x.SrvMsgId
	}
	return 0
}

func (x *CreateVoipRequestBody) GetRefChannelId() string {
	if x != nil {
		return x.RefChannelId
	}
	return ""
}

func (x *CreateVoipRequestBody) GetVoipMode() int32 {
	if x != nil {
		return x.VoipMode
	}
	return 0
}

type CallVoipRequestBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CalleeIds       []int64           `protobuf:"varint,1,rep,packed,name=callee_ids,json=calleeIds,proto3" json:"callee_ids,omitempty"`
	ChannelId       string            `protobuf:"bytes,2,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	VType           int32             `protobuf:"varint,3,opt,name=v_type,json=vType,proto3" json:"v_type,omitempty"`
	Ext             map[string]string `protobuf:"bytes,4,rep,name=ext,proto3" json:"ext,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	RefChannelUsers int64             `protobuf:"varint,5,opt,name=ref_channel_users,json=refChannelUsers,proto3" json:"ref_channel_users,omitempty"`
	ConId           string            `protobuf:"bytes,6,opt,name=con_id,json=conId,proto3" json:"con_id,omitempty"`
}

func (x *CallVoipRequestBody) Reset() {
	*x = CallVoipRequestBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallVoipRequestBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallVoipRequestBody) ProtoMessage() {}

func (x *CallVoipRequestBody) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallVoipRequestBody.ProtoReflect.Descriptor instead.
func (*CallVoipRequestBody) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{51}
}

func (x *CallVoipRequestBody) GetCalleeIds() []int64 {
	if x != nil {
		return x.CalleeIds
	}
	return nil
}

func (x *CallVoipRequestBody) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *CallVoipRequestBody) GetVType() int32 {
	if x != nil {
		return x.VType
	}
	return 0
}

func (x *CallVoipRequestBody) GetExt() map[string]string {
	if x != nil {
		return x.Ext
	}
	return nil
}

func (x *CallVoipRequestBody) GetRefChannelUsers() int64 {
	if x != nil {
		return x.RefChannelUsers
	}
	return 0
}

func (x *CallVoipRequestBody) GetConId() string {
	if x != nil {
		return x.ConId
	}
	return ""
}

type UpdateVoipRequestBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId string `protobuf:"bytes,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	Status    int32  `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
	VType     int32  `protobuf:"varint,3,opt,name=v_type,json=vType,proto3" json:"v_type,omitempty"`
}

func (x *UpdateVoipRequestBody) Reset() {
	*x = UpdateVoipRequestBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateVoipRequestBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateVoipRequestBody) ProtoMessage() {}

func (x *UpdateVoipRequestBody) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateVoipRequestBody.ProtoReflect.Descriptor instead.
func (*UpdateVoipRequestBody) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{52}
}

func (x *UpdateVoipRequestBody) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *UpdateVoipRequestBody) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *UpdateVoipRequestBody) GetVType() int32 {
	if x != nil {
		return x.VType
	}
	return 0
}

type ChannelHeartBeatRequestBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ChannelHeartBeatRequestBody) Reset() {
	*x = ChannelHeartBeatRequestBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelHeartBeatRequestBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelHeartBeatRequestBody) ProtoMessage() {}

func (x *ChannelHeartBeatRequestBody) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelHeartBeatRequestBody.ProtoReflect.Descriptor instead.
func (*ChannelHeartBeatRequestBody) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{53}
}

type ProfileGetInfoRequestBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ProfileGetInfoRequestBody) Reset() {
	*x = ProfileGetInfoRequestBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProfileGetInfoRequestBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfileGetInfoRequestBody) ProtoMessage() {}

func (x *ProfileGetInfoRequestBody) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProfileGetInfoRequestBody.ProtoReflect.Descriptor instead.
func (*ProfileGetInfoRequestBody) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{54}
}

type ReportClientMetricsRequestBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ReportClientMetricsRequestBody) Reset() {
	*x = ReportClientMetricsRequestBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportClientMetricsRequestBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportClientMetricsRequestBody) ProtoMessage() {}

func (x *ReportClientMetricsRequestBody) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportClientMetricsRequestBody.ProtoReflect.Descriptor instead.
func (*ReportClientMetricsRequestBody) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{55}
}

type GetConfigsRequestBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetConfigsRequestBody) Reset() {
	*x = GetConfigsRequestBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConfigsRequestBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConfigsRequestBody) ProtoMessage() {}

func (x *GetConfigsRequestBody) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConfigsRequestBody.ProtoReflect.Descriptor instead.
func (*GetConfigsRequestBody) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{56}
}

type ModifyMessageExtRequestBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConversationShortId int64             `protobuf:"varint,1,opt,name=conversation_short_id,json=conversationShortId,proto3" json:"conversation_short_id,omitempty"`
	MessageId           int64             `protobuf:"varint,2,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	Ticket              string            `protobuf:"bytes,3,opt,name=ticket,proto3" json:"ticket,omitempty"`
	Ext                 map[string]string `protobuf:"bytes,4,rep,name=ext,proto3" json:"ext,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ModifyMessageExtRequestBody) Reset() {
	*x = ModifyMessageExtRequestBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyMessageExtRequestBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyMessageExtRequestBody) ProtoMessage() {}

func (x *ModifyMessageExtRequestBody) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyMessageExtRequestBody.ProtoReflect.Descriptor instead.
func (*ModifyMessageExtRequestBody) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{57}
}

func (x *ModifyMessageExtRequestBody) GetConversationShortId() int64 {
	if x != nil {
		return x.ConversationShortId
	}
	return 0
}

func (x *ModifyMessageExtRequestBody) GetMessageId() int64 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *ModifyMessageExtRequestBody) GetTicket() string {
	if x != nil {
		return x.Ticket
	}
	return ""
}

func (x *ModifyMessageExtRequestBody) GetExt() map[string]string {
	if x != nil {
		return x.Ext
	}
	return nil
}

type ConvCountReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConvShortId      int64 `protobuf:"varint,1,opt,name=conv_short_id,json=convShortId,proto3" json:"conv_short_id,omitempty"`
	UnreadCount      int64 `protobuf:"varint,2,opt,name=unread_count,json=unreadCount,proto3" json:"unread_count,omitempty"`
	ConversationType int32 `protobuf:"varint,3,opt,name=conversation_type,json=conversationType,proto3" json:"conversation_type,omitempty"`
}

func (x *ConvCountReport) Reset() {
	*x = ConvCountReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConvCountReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConvCountReport) ProtoMessage() {}

func (x *ConvCountReport) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConvCountReport.ProtoReflect.Descriptor instead.
func (*ConvCountReport) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{58}
}

func (x *ConvCountReport) GetConvShortId() int64 {
	if x != nil {
		return x.ConvShortId
	}
	return 0
}

func (x *ConvCountReport) GetUnreadCount() int64 {
	if x != nil {
		return x.UnreadCount
	}
	return 0
}

func (x *ConvCountReport) GetConversationType() int32 {
	if x != nil {
		return x.ConversationType
	}
	return 0
}

type UnReadCountReportRequestBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalUnreadCount int64              `protobuf:"varint,1,opt,name=total_unread_count,json=totalUnreadCount,proto3" json:"total_unread_count,omitempty"`
	ConvUnreadCount  []*ConvCountReport `protobuf:"bytes,2,rep,name=conv_unread_count,json=convUnreadCount,proto3" json:"conv_unread_count,omitempty"`
}

func (x *UnReadCountReportRequestBody) Reset() {
	*x = UnReadCountReportRequestBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnReadCountReportRequestBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnReadCountReportRequestBody) ProtoMessage() {}

func (x *UnReadCountReportRequestBody) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnReadCountReportRequestBody.ProtoReflect.Descriptor instead.
func (*UnReadCountReportRequestBody) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{59}
}

func (x *UnReadCountReportRequestBody) GetTotalUnreadCount() int64 {
	if x != nil {
		return x.TotalUnreadCount
	}
	return 0
}

func (x *UnReadCountReportRequestBody) GetConvUnreadCount() []*ConvCountReport {
	if x != nil {
		return x.ConvUnreadCount
	}
	return nil
}

type BlockMembersRequestBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockStatus      int32             `protobuf:"varint,1,opt,name=block_status,json=blockStatus,proto3" json:"block_status,omitempty"`
	BlockTime        map[int64]int64   `protobuf:"bytes,2,rep,name=block_time,json=blockTime,proto3" json:"block_time,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	ConvShortId      int64             `protobuf:"varint,3,opt,name=conv_short_id,json=convShortId,proto3" json:"conv_short_id,omitempty"`
	ConversationType int64             `protobuf:"varint,4,opt,name=conversation_type,json=conversationType,proto3" json:"conversation_type,omitempty"`
	ConversationId   string            `protobuf:"bytes,5,opt,name=conversation_id,json=conversationId,proto3" json:"conversation_id,omitempty"`
	BizExt           map[string]string `protobuf:"bytes,11,rep,name=biz_ext,json=bizExt,proto3" json:"biz_ext,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *BlockMembersRequestBody) Reset() {
	*x = BlockMembersRequestBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockMembersRequestBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockMembersRequestBody) ProtoMessage() {}

func (x *BlockMembersRequestBody) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockMembersRequestBody.ProtoReflect.Descriptor instead.
func (*BlockMembersRequestBody) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{60}
}

func (x *BlockMembersRequestBody) GetBlockStatus() int32 {
	if x != nil {
		return x.BlockStatus
	}
	return 0
}

func (x *BlockMembersRequestBody) GetBlockTime() map[int64]int64 {
	if x != nil {
		return x.BlockTime
	}
	return nil
}

func (x *BlockMembersRequestBody) GetConvShortId() int64 {
	if x != nil {
		return x.ConvShortId
	}
	return 0
}

func (x *BlockMembersRequestBody) GetConversationType() int64 {
	if x != nil {
		return x.ConversationType
	}
	return 0
}

func (x *BlockMembersRequestBody) GetConversationId() string {
	if x != nil {
		return x.ConversationId
	}
	return ""
}

func (x *BlockMembersRequestBody) GetBizExt() map[string]string {
	if x != nil {
		return x.BizExt
	}
	return nil
}

type BlockConversationRequestBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConversationId   string `protobuf:"bytes,1,opt,name=conversation_id,json=conversationId,proto3" json:"conversation_id,omitempty"`
	ConvShortId      int64  `protobuf:"varint,2,opt,name=conv_short_id,json=convShortId,proto3" json:"conv_short_id,omitempty"`
	ConversationType int32  `protobuf:"varint,3,opt,name=conversation_type,json=conversationType,proto3" json:"conversation_type,omitempty"`
	BlockStatus      int32  `protobuf:"varint,4,opt,name=block_status,json=blockStatus,proto3" json:"block_status,omitempty"`
	BlockNormalOnly  bool   `protobuf:"varint,5,opt,name=block_normal_only,json=blockNormalOnly,proto3" json:"block_normal_only,omitempty"`
}

func (x *BlockConversationRequestBody) Reset() {
	*x = BlockConversationRequestBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockConversationRequestBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockConversationRequestBody) ProtoMessage() {}

func (x *BlockConversationRequestBody) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockConversationRequestBody.ProtoReflect.Descriptor instead.
func (*BlockConversationRequestBody) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{61}
}

func (x *BlockConversationRequestBody) GetConversationId() string {
	if x != nil {
		return x.ConversationId
	}
	return ""
}

func (x *BlockConversationRequestBody) GetConvShortId() int64 {
	if x != nil {
		return x.ConvShortId
	}
	return 0
}

func (x *BlockConversationRequestBody) GetConversationType() int32 {
	if x != nil {
		return x.ConversationType
	}
	return 0
}

func (x *BlockConversationRequestBody) GetBlockStatus() int32 {
	if x != nil {
		return x.BlockStatus
	}
	return 0
}

func (x *BlockConversationRequestBody) GetBlockNormalOnly() bool {
	if x != nil {
		return x.BlockNormalOnly
	}
	return false
}

type GetUnreadCountRequestBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GetTotal    bool    `protobuf:"varint,1,opt,name=get_total,json=getTotal,proto3" json:"get_total,omitempty"`
	ConvShortId []int64 `protobuf:"varint,2,rep,packed,name=conv_short_id,json=convShortId,proto3" json:"conv_short_id,omitempty"`
}

func (x *GetUnreadCountRequestBody) Reset() {
	*x = GetUnreadCountRequestBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUnreadCountRequestBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUnreadCountRequestBody) ProtoMessage() {}

func (x *GetUnreadCountRequestBody) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUnreadCountRequestBody.ProtoReflect.Descriptor instead.
func (*GetUnreadCountRequestBody) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{62}
}

func (x *GetUnreadCountRequestBody) GetGetTotal() bool {
	if x != nil {
		return x.GetTotal
	}
	return false
}

func (x *GetUnreadCountRequestBody) GetConvShortId() []int64 {
	if x != nil {
		return x.ConvShortId
	}
	return nil
}

type SendMessageP2PRequestBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SendType            int32             `protobuf:"varint,1,opt,name=send_type,json=sendType,proto3" json:"send_type,omitempty"`
	ConversationId      string            `protobuf:"bytes,2,opt,name=conversation_id,json=conversationId,proto3" json:"conversation_id,omitempty"`
	ConversationType    int32             `protobuf:"varint,3,opt,name=conversation_type,json=conversationType,proto3" json:"conversation_type,omitempty"`
	ConversationShortId int64             `protobuf:"varint,4,opt,name=conversation_short_id,json=conversationShortId,proto3" json:"conversation_short_id,omitempty"`
	VisibleUser         []int64           `protobuf:"varint,5,rep,packed,name=visible_user,json=visibleUser,proto3" json:"visible_user,omitempty"`
	InvisibleUser       []int64           `protobuf:"varint,6,rep,packed,name=invisible_user,json=invisibleUser,proto3" json:"invisible_user,omitempty"`
	MessageType         int32             `protobuf:"varint,7,opt,name=message_type,json=messageType,proto3" json:"message_type,omitempty"`
	Content             string            `protobuf:"bytes,8,opt,name=content,proto3" json:"content,omitempty"`
	Ext                 map[string]string `protobuf:"bytes,9,rep,name=ext,proto3" json:"ext,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ClientMessageId     string            `protobuf:"bytes,10,opt,name=client_message_id,json=clientMessageId,proto3" json:"client_message_id,omitempty"`
}

func (x *SendMessageP2PRequestBody) Reset() {
	*x = SendMessageP2PRequestBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendMessageP2PRequestBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendMessageP2PRequestBody) ProtoMessage() {}

func (x *SendMessageP2PRequestBody) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendMessageP2PRequestBody.ProtoReflect.Descriptor instead.
func (*SendMessageP2PRequestBody) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{63}
}

func (x *SendMessageP2PRequestBody) GetSendType() int32 {
	if x != nil {
		return x.SendType
	}
	return 0
}

func (x *SendMessageP2PRequestBody) GetConversationId() string {
	if x != nil {
		return x.ConversationId
	}
	return ""
}

func (x *SendMessageP2PRequestBody) GetConversationType() int32 {
	if x != nil {
		return x.ConversationType
	}
	return 0
}

func (x *SendMessageP2PRequestBody) GetConversationShortId() int64 {
	if x != nil {
		return x.ConversationShortId
	}
	return 0
}

func (x *SendMessageP2PRequestBody) GetVisibleUser() []int64 {
	if x != nil {
		return x.VisibleUser
	}
	return nil
}

func (x *SendMessageP2PRequestBody) GetInvisibleUser() []int64 {
	if x != nil {
		return x.InvisibleUser
	}
	return nil
}

func (x *SendMessageP2PRequestBody) GetMessageType() int32 {
	if x != nil {
		return x.MessageType
	}
	return 0
}

func (x *SendMessageP2PRequestBody) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *SendMessageP2PRequestBody) GetExt() map[string]string {
	if x != nil {
		return x.Ext
	}
	return nil
}

func (x *SendMessageP2PRequestBody) GetClientMessageId() string {
	if x != nil {
		return x.ClientMessageId
	}
	return ""
}

type GetBlockListRequestBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cursor int64 `protobuf:"varint,1,opt,name=cursor,proto3" json:"cursor,omitempty"`
	Limit  int32 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *GetBlockListRequestBody) Reset() {
	*x = GetBlockListRequestBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBlockListRequestBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlockListRequestBody) ProtoMessage() {}

func (x *GetBlockListRequestBody) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlockListRequestBody.ProtoReflect.Descriptor instead.
func (*GetBlockListRequestBody) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{64}
}

func (x *GetBlockListRequestBody) GetCursor() int64 {
	if x != nil {
		return x.Cursor
	}
	return 0
}

func (x *GetBlockListRequestBody) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type SetBlocklistRequestBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SetBlockList bool    `protobuf:"varint,1,opt,name=set_block_list,json=setBlockList,proto3" json:"set_block_list,omitempty"`
	Blocklist    []int64 `protobuf:"varint,2,rep,packed,name=blocklist,proto3" json:"blocklist,omitempty"`
}

func (x *SetBlocklistRequestBody) Reset() {
	*x = SetBlocklistRequestBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetBlocklistRequestBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetBlocklistRequestBody) ProtoMessage() {}

func (x *SetBlocklistRequestBody) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetBlocklistRequestBody.ProtoReflect.Descriptor instead.
func (*SetBlocklistRequestBody) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{65}
}

func (x *SetBlocklistRequestBody) GetSetBlockList() bool {
	if x != nil {
		return x.SetBlockList
	}
	return false
}

func (x *SetBlocklistRequestBody) GetBlocklist() []int64 {
	if x != nil {
		return x.Blocklist
	}
	return nil
}

type CheckInBlockListRequestBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CheckInBlockListRequestBody) Reset() {
	*x = CheckInBlockListRequestBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckInBlockListRequestBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckInBlockListRequestBody) ProtoMessage() {}

func (x *CheckInBlockListRequestBody) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckInBlockListRequestBody.ProtoReflect.Descriptor instead.
func (*CheckInBlockListRequestBody) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{66}
}

type MarkMessageRequestBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConversationId      string `protobuf:"bytes,1,opt,name=conversation_id,json=conversationId,proto3" json:"conversation_id,omitempty"`
	ConversationType    int32  `protobuf:"varint,2,opt,name=conversation_type,json=conversationType,proto3" json:"conversation_type,omitempty"`
	ConversationShortId int64  `protobuf:"varint,3,opt,name=conversation_short_id,json=conversationShortId,proto3" json:"conversation_short_id,omitempty"`
	ServerMessageId     int64  `protobuf:"varint,4,opt,name=server_message_id,json=serverMessageId,proto3" json:"server_message_id,omitempty"`
	DoAction            bool   `protobuf:"varint,5,opt,name=do_action,json=doAction,proto3" json:"do_action,omitempty"`
	ActionType          int32  `protobuf:"varint,6,opt,name=action_type,json=actionType,proto3" json:"action_type,omitempty"`
	SortTime            int64  `protobuf:"varint,7,opt,name=sort_time,json=sortTime,proto3" json:"sort_time,omitempty"`
	Tag                 int64  `protobuf:"varint,8,opt,name=tag,proto3" json:"tag,omitempty"`
}

func (x *MarkMessageRequestBody) Reset() {
	*x = MarkMessageRequestBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarkMessageRequestBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkMessageRequestBody) ProtoMessage() {}

func (x *MarkMessageRequestBody) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkMessageRequestBody.ProtoReflect.Descriptor instead.
func (*MarkMessageRequestBody) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{67}
}

func (x *MarkMessageRequestBody) GetConversationId() string {
	if x != nil {
		return x.ConversationId
	}
	return ""
}

func (x *MarkMessageRequestBody) GetConversationType() int32 {
	if x != nil {
		return x.ConversationType
	}
	return 0
}

func (x *MarkMessageRequestBody) GetConversationShortId() int64 {
	if x != nil {
		return x.ConversationShortId
	}
	return 0
}

func (x *MarkMessageRequestBody) GetServerMessageId() int64 {
	if x != nil {
		return x.ServerMessageId
	}
	return 0
}

func (x *MarkMessageRequestBody) GetDoAction() bool {
	if x != nil {
		return x.DoAction
	}
	return false
}

func (x *MarkMessageRequestBody) GetActionType() int32 {
	if x != nil {
		return x.ActionType
	}
	return 0
}

func (x *MarkMessageRequestBody) GetSortTime() int64 {
	if x != nil {
		return x.SortTime
	}
	return 0
}

func (x *MarkMessageRequestBody) GetTag() int64 {
	if x != nil {
		return x.Tag
	}
	return 0
}

type PullMarkMessageRequestBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConversationId      string `protobuf:"bytes,1,opt,name=conversation_id,json=conversationId,proto3" json:"conversation_id,omitempty"`
	ConversationType    int32  `protobuf:"varint,2,opt,name=conversation_type,json=conversationType,proto3" json:"conversation_type,omitempty"`
	ConversationShortId int64  `protobuf:"varint,3,opt,name=conversation_short_id,json=conversationShortId,proto3" json:"conversation_short_id,omitempty"`
	Cursor              int64  `protobuf:"varint,4,opt,name=cursor,proto3" json:"cursor,omitempty"`
	Limit               int64  `protobuf:"varint,5,opt,name=limit,proto3" json:"limit,omitempty"`
	Asc                 bool   `protobuf:"varint,6,opt,name=asc,proto3" json:"asc,omitempty"`
	ActionType          int32  `protobuf:"varint,7,opt,name=action_type,json=actionType,proto3" json:"action_type,omitempty"`
	Tag                 int64  `protobuf:"varint,8,opt,name=tag,proto3" json:"tag,omitempty"`
	ClearUnreadCount    bool   `protobuf:"varint,9,opt,name=clear_unread_count,json=clearUnreadCount,proto3" json:"clear_unread_count,omitempty"`
}

func (x *PullMarkMessageRequestBody) Reset() {
	*x = PullMarkMessageRequestBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PullMarkMessageRequestBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PullMarkMessageRequestBody) ProtoMessage() {}

func (x *PullMarkMessageRequestBody) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PullMarkMessageRequestBody.ProtoReflect.Descriptor instead.
func (*PullMarkMessageRequestBody) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{68}
}

func (x *PullMarkMessageRequestBody) GetConversationId() string {
	if x != nil {
		return x.ConversationId
	}
	return ""
}

func (x *PullMarkMessageRequestBody) GetConversationType() int32 {
	if x != nil {
		return x.ConversationType
	}
	return 0
}

func (x *PullMarkMessageRequestBody) GetConversationShortId() int64 {
	if x != nil {
		return x.ConversationShortId
	}
	return 0
}

func (x *PullMarkMessageRequestBody) GetCursor() int64 {
	if x != nil {
		return x.Cursor
	}
	return 0
}

func (x *PullMarkMessageRequestBody) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *PullMarkMessageRequestBody) GetAsc() bool {
	if x != nil {
		return x.Asc
	}
	return false
}

func (x *PullMarkMessageRequestBody) GetActionType() int32 {
	if x != nil {
		return x.ActionType
	}
	return 0
}

func (x *PullMarkMessageRequestBody) GetTag() int64 {
	if x != nil {
		return x.Tag
	}
	return 0
}

func (x *PullMarkMessageRequestBody) GetClearUnreadCount() bool {
	if x != nil {
		return x.ClearUnreadCount
	}
	return false
}

type MarkMsgUnreadCountReportRequestBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConversationId      string          `protobuf:"bytes,1,opt,name=conversation_id,json=conversationId,proto3" json:"conversation_id,omitempty"`
	ConversationType    int32           `protobuf:"varint,2,opt,name=conversation_type,json=conversationType,proto3" json:"conversation_type,omitempty"`
	ConversationShortId int64           `protobuf:"varint,3,opt,name=conversation_short_id,json=conversationShortId,proto3" json:"conversation_short_id,omitempty"`
	TotalUnreadCount    int64           `protobuf:"varint,4,opt,name=total_unread_count,json=totalUnreadCount,proto3" json:"total_unread_count,omitempty"`
	TagUnreadCount      map[int64]int64 `protobuf:"bytes,5,rep,name=tag_unread_count,json=tagUnreadCount,proto3" json:"tag_unread_count,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *MarkMsgUnreadCountReportRequestBody) Reset() {
	*x = MarkMsgUnreadCountReportRequestBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarkMsgUnreadCountReportRequestBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkMsgUnreadCountReportRequestBody) ProtoMessage() {}

func (x *MarkMsgUnreadCountReportRequestBody) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkMsgUnreadCountReportRequestBody.ProtoReflect.Descriptor instead.
func (*MarkMsgUnreadCountReportRequestBody) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{69}
}

func (x *MarkMsgUnreadCountReportRequestBody) GetConversationId() string {
	if x != nil {
		return x.ConversationId
	}
	return ""
}

func (x *MarkMsgUnreadCountReportRequestBody) GetConversationType() int32 {
	if x != nil {
		return x.ConversationType
	}
	return 0
}

func (x *MarkMsgUnreadCountReportRequestBody) GetConversationShortId() int64 {
	if x != nil {
		return x.ConversationShortId
	}
	return 0
}

func (x *MarkMsgUnreadCountReportRequestBody) GetTotalUnreadCount() int64 {
	if x != nil {
		return x.TotalUnreadCount
	}
	return 0
}

func (x *MarkMsgUnreadCountReportRequestBody) GetTagUnreadCount() map[int64]int64 {
	if x != nil {
		return x.TagUnreadCount
	}
	return nil
}

type MarkMsgGetUnreadCountRequestBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConversationId      string  `protobuf:"bytes,1,opt,name=conversation_id,json=conversationId,proto3" json:"conversation_id,omitempty"`
	ConversationType    int32   `protobuf:"varint,2,opt,name=conversation_type,json=conversationType,proto3" json:"conversation_type,omitempty"`
	ConversationShortId int64   `protobuf:"varint,3,opt,name=conversation_short_id,json=conversationShortId,proto3" json:"conversation_short_id,omitempty"`
	GetTotal            bool    `protobuf:"varint,4,opt,name=get_total,json=getTotal,proto3" json:"get_total,omitempty"`
	Tags                []int64 `protobuf:"varint,5,rep,packed,name=tags,proto3" json:"tags,omitempty"`
}

func (x *MarkMsgGetUnreadCountRequestBody) Reset() {
	*x = MarkMsgGetUnreadCountRequestBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarkMsgGetUnreadCountRequestBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkMsgGetUnreadCountRequestBody) ProtoMessage() {}

func (x *MarkMsgGetUnreadCountRequestBody) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkMsgGetUnreadCountRequestBody.ProtoReflect.Descriptor instead.
func (*MarkMsgGetUnreadCountRequestBody) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{70}
}

func (x *MarkMsgGetUnreadCountRequestBody) GetConversationId() string {
	if x != nil {
		return x.ConversationId
	}
	return ""
}

func (x *MarkMsgGetUnreadCountRequestBody) GetConversationType() int32 {
	if x != nil {
		return x.ConversationType
	}
	return 0
}

func (x *MarkMsgGetUnreadCountRequestBody) GetConversationShortId() int64 {
	if x != nil {
		return x.ConversationShortId
	}
	return 0
}

func (x *MarkMsgGetUnreadCountRequestBody) GetGetTotal() bool {
	if x != nil {
		return x.GetTotal
	}
	return false
}

func (x *MarkMsgGetUnreadCountRequestBody) GetTags() []int64 {
	if x != nil {
		return x.Tags
	}
	return nil
}

type BatchUnmarkMessageRequestBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConversationId      string  `protobuf:"bytes,1,opt,name=conversation_id,json=conversationId,proto3" json:"conversation_id,omitempty"`
	ConversationType    int32   `protobuf:"varint,2,opt,name=conversation_type,json=conversationType,proto3" json:"conversation_type,omitempty"`
	ConversationShortId int64   `protobuf:"varint,3,opt,name=conversation_short_id,json=conversationShortId,proto3" json:"conversation_short_id,omitempty"`
	ServerMessageIds    []int64 `protobuf:"varint,4,rep,packed,name=server_message_ids,json=serverMessageIds,proto3" json:"server_message_ids,omitempty"`
	ActionType          int32   `protobuf:"varint,5,opt,name=action_type,json=actionType,proto3" json:"action_type,omitempty"`
	Tag                 int64   `protobuf:"varint,6,opt,name=tag,proto3" json:"tag,omitempty"`
}

func (x *BatchUnmarkMessageRequestBody) Reset() {
	*x = BatchUnmarkMessageRequestBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchUnmarkMessageRequestBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchUnmarkMessageRequestBody) ProtoMessage() {}

func (x *BatchUnmarkMessageRequestBody) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchUnmarkMessageRequestBody.ProtoReflect.Descriptor instead.
func (*BatchUnmarkMessageRequestBody) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{71}
}

func (x *BatchUnmarkMessageRequestBody) GetConversationId() string {
	if x != nil {
		return x.ConversationId
	}
	return ""
}

func (x *BatchUnmarkMessageRequestBody) GetConversationType() int32 {
	if x != nil {
		return x.ConversationType
	}
	return 0
}

func (x *BatchUnmarkMessageRequestBody) GetConversationShortId() int64 {
	if x != nil {
		return x.ConversationShortId
	}
	return 0
}

func (x *BatchUnmarkMessageRequestBody) GetServerMessageIds() []int64 {
	if x != nil {
		return x.ServerMessageIds
	}
	return nil
}

func (x *BatchUnmarkMessageRequestBody) GetActionType() int32 {
	if x != nil {
		return x.ActionType
	}
	return 0
}

func (x *BatchUnmarkMessageRequestBody) GetTag() int64 {
	if x != nil {
		return x.Tag
	}
	return 0
}

type RequestBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SendMessageBody                         *SendMessageRequestBody                            `protobuf:"bytes,100,opt,name=send_message_body,json=sendMessageBody,proto3" json:"send_message_body,omitempty"`
	MessagesPerUserBody                     *MessagesPerUserRequestBody                        `protobuf:"bytes,200,opt,name=messages_per_user_body,json=messagesPerUserBody,proto3" json:"messages_per_user_body,omitempty"`
	MessagesPerUserInitV2Body               *MessagesPerUserInitV2RequestBody                  `protobuf:"bytes,203,opt,name=messages_per_user_init_v2_body,json=messagesPerUserInitV2Body,proto3" json:"messages_per_user_init_v2_body,omitempty"`
	GetMessageByIdBody                      *GetMessageByIdRequestBody                         `protobuf:"bytes,211,opt,name=get_message_by_id_body,json=getMessageByIdBody,proto3" json:"get_message_by_id_body,omitempty"`
	MessagesInConversationBody              *MessagesInConversationRequestBody                 `protobuf:"bytes,301,opt,name=messages_in_conversation_body,json=messagesInConversationBody,proto3" json:"messages_in_conversation_body,omitempty"`
	GetMessagesCheckinfoInConversationBody  *GetMessagesCheckInfoInConversationRequestBody     `protobuf:"bytes,302,opt,name=get_messages_checkinfo_in_conversation_body,json=getMessagesCheckinfoInConversationBody,proto3" json:"get_messages_checkinfo_in_conversation_body,omitempty"`
	SendUserActionBody                      *SendUserActionRequestBody                         `protobuf:"bytes,410,opt,name=send_user_action_body,json=sendUserActionBody,proto3" json:"send_user_action_body,omitempty"`
	SendInputStatusBody                     *SendInputStatusRequestBody                        `protobuf:"bytes,411,opt,name=send_input_status_body,json=sendInputStatusBody,proto3" json:"send_input_status_body,omitempty"`
	DeleteConversationBody                  *DeleteConversationRequestBody                     `protobuf:"bytes,603,opt,name=delete_conversation_body,json=deleteConversationBody,proto3" json:"delete_conversation_body,omitempty"`
	MarkConversationReadBody                *MarkConversationReadRequestBody                   `protobuf:"bytes,604,opt,name=mark_conversation_read_body,json=markConversationReadBody,proto3" json:"mark_conversation_read_body,omitempty"`
	ConversationParticipantsBody            *ConversationParticipantsListRequestBody           `protobuf:"bytes,605,opt,name=conversation_participants_body,json=conversationParticipantsBody,proto3" json:"conversation_participants_body,omitempty"`
	DissolveConversationBody                *DissolveConversationRequestBody                   `protobuf:"bytes,614,opt,name=dissolve_conversation_body,json=dissolveConversationBody,proto3" json:"dissolve_conversation_body,omitempty"`
	CreateConversationV2Body                *CreateConversationV2RequestBody                   `protobuf:"bytes,609,opt,name=create_conversation_v2_body,json=createConversationV2Body,proto3" json:"create_conversation_v2_body,omitempty"`
	GetConversationInfoListV2Body           *GetConversationInfoListV2RequestBody              `protobuf:"bytes,610,opt,name=get_conversation_info_list_v2_body,json=getConversationInfoListV2Body,proto3" json:"get_conversation_info_list_v2_body,omitempty"`
	GetConversationInfoListByFavoriteV2Body *ConversationsPerUserByFavoriteV2RequestBody       `protobuf:"bytes,611,opt,name=get_conversation_info_list_by_favorite_v2_body,json=getConversationInfoListByFavoriteV2Body,proto3" json:"get_conversation_info_list_by_favorite_v2_body,omitempty"`
	GetConversationInfoListByTopV2Body      *ConversationsPerUserByTopV2RequestBody            `protobuf:"bytes,612,opt,name=get_conversation_info_list_by_top_v2_body,json=getConversationInfoListByTopV2Body,proto3" json:"get_conversation_info_list_by_top_v2_body,omitempty"`
	ConversationAddParticipantsBody         *ConversationAddParticipantsRequestBody            `protobuf:"bytes,650,opt,name=conversation_add_participants_body,json=conversationAddParticipantsBody,proto3" json:"conversation_add_participants_body,omitempty"`
	ConversationRemoveParticipantsBody      *ConversationRemoveParticipantsRequestBody         `protobuf:"bytes,651,opt,name=conversation_remove_participants_body,json=conversationRemoveParticipantsBody,proto3" json:"conversation_remove_participants_body,omitempty"`
	LeaveConversationBody                   *ConversationLeaveRequestBody                      `protobuf:"bytes,652,opt,name=leave_conversation_body,json=leaveConversationBody,proto3" json:"leave_conversation_body,omitempty"`
	UpdateConversationParticipantBody       *UpdateConversationParticipantRequestBody          `protobuf:"bytes,655,opt,name=update_conversation_participant_body,json=updateConversationParticipantBody,proto3" json:"update_conversation_participant_body,omitempty"`
	DeleteMessageBody                       *DeleteMessageRequestBody                          `protobuf:"bytes,701,opt,name=delete_message_body,json=deleteMessageBody,proto3" json:"delete_message_body,omitempty"`
	RecallMessageBody                       *RecallMessageRequestBody                          `protobuf:"bytes,702,opt,name=recall_message_body,json=recallMessageBody,proto3" json:"recall_message_body,omitempty"`
	ModifyMessagePropertyBody               *ModifyMessagePropertyRequestBody                  `protobuf:"bytes,705,opt,name=modify_message_property_body,json=modifyMessagePropertyBody,proto3" json:"modify_message_property_body,omitempty"`
	GetConversationCoreInfoBody             *GetConversationCoreInfoRequestBody                `protobuf:"bytes,901,opt,name=get_conversation_core_info_body,json=getConversationCoreInfoBody,proto3" json:"get_conversation_core_info_body,omitempty"`
	SetConversationCoreInfoBody             *SetConversationCoreInfoRequestBody                `protobuf:"bytes,902,opt,name=set_conversation_core_info_body,json=setConversationCoreInfoBody,proto3" json:"set_conversation_core_info_body,omitempty"`
	UpsertConversationCoreExtInfoBody       *UpsertConversationCoreExtInfoRequestBody          `protobuf:"bytes,904,opt,name=upsert_conversation_core_ext_info_body,json=upsertConversationCoreExtInfoBody,proto3" json:"upsert_conversation_core_ext_info_body,omitempty"`
	SetConversationSettingInfoBody          *SetConversationSettingInfoRequestBody             `protobuf:"bytes,921,opt,name=set_conversation_setting_info_body,json=setConversationSettingInfoBody,proto3" json:"set_conversation_setting_info_body,omitempty"`
	UpsertConversationSettingExtInfoBody    *UpsertConversationSettingExtInfoRequestBody       `protobuf:"bytes,922,opt,name=upsert_conversation_setting_ext_info_body,json=upsertConversationSettingExtInfoBody,proto3" json:"upsert_conversation_setting_ext_info_body,omitempty"`
	GetStrangerConversationBody             *GetStrangerConversationListRequestBody            `protobuf:"bytes,483,opt,name=get_stranger_conversation_body,json=getStrangerConversationBody,proto3" json:"get_stranger_conversation_body,omitempty"`
	GetStrangerMessagesBody                 *GetStrangerMessagesRequestBody                    `protobuf:"bytes,1001,opt,name=get_stranger_messages_body,json=getStrangerMessagesBody,proto3" json:"get_stranger_messages_body,omitempty"`
	DeleteStrangerMessageBody               *DeleteStrangerMessageRequestBody                  `protobuf:"bytes,1002,opt,name=delete_stranger_message_body,json=deleteStrangerMessageBody,proto3" json:"delete_stranger_message_body,omitempty"`
	DeleteStrangerConversationBody          *DeleteStrangerConversationRequestBody             `protobuf:"bytes,1003,opt,name=delete_stranger_conversation_body,json=deleteStrangerConversationBody,proto3" json:"delete_stranger_conversation_body,omitempty"`
	DeleteStrangerAllConversationBody       *DeleteStrangerAllConversationRequestBody          `protobuf:"bytes,1004,opt,name=delete_stranger_all_conversation_body,json=deleteStrangerAllConversationBody,proto3" json:"delete_stranger_all_conversation_body,omitempty"`
	MarkStrangerConversationReadBody        *MarkStrangerConversationReadRequestBody           `protobuf:"bytes,1005,opt,name=mark_stranger_conversation_read_body,json=markStrangerConversationReadBody,proto3" json:"mark_stranger_conversation_read_body,omitempty"`
	MarkStrangerAllConversationReadBody     *MarkStrangerAllConversationReadRequestBody        `protobuf:"bytes,1006,opt,name=mark_stranger_all_conversation_read_body,json=markStrangerAllConversationReadBody,proto3" json:"mark_stranger_all_conversation_read_body,omitempty"`
	ParticipantsReadIndexBody               *GetConversationParticipantsReadIndexV3RequestBody `protobuf:"bytes,739,opt,name=participants_read_index_body,json=participantsReadIndexBody,proto3" json:"participants_read_index_body,omitempty"`
	ParticipantsMinIndexBody                *GetConversationParticipantsMinIndexV3RequestBody  `protobuf:"bytes,2001,opt,name=participants_min_index_body,json=participantsMinIndexBody,proto3" json:"participants_min_index_body,omitempty"`
	GetUploadTokenBody                      *GetUploadTokenRequestBody                         `protobuf:"bytes,2003,opt,name=get_upload_token_body,json=getUploadTokenBody,proto3" json:"get_upload_token_body,omitempty"`
	GetMediaUrlsBody                        *GetMediaUrlsRequestBody                           `protobuf:"bytes,2004,opt,name=get_media_urls_body,json=getMediaUrlsBody,proto3" json:"get_media_urls_body,omitempty"`
	GetTicketBody                           *GetTicketRequestBody                              `protobuf:"bytes,2005,opt,name=get_ticket_body,json=getTicketBody,proto3" json:"get_ticket_body,omitempty"`
	GetConversationListBody                 *GetUserConversationListRequestBody                `protobuf:"bytes,2006,opt,name=get_conversation_list_body,json=getConversationListBody,proto3" json:"get_conversation_list_body,omitempty"`
	BroadcastSendMessageBody                *BroadcastSendMessageRequestBody                   `protobuf:"bytes,2007,opt,name=broadcast_send_message_body,json=broadcastSendMessageBody,proto3" json:"broadcast_send_message_body,omitempty"`
	BroadcastRecvMessageBody                *BroadcastRecvMessageRequestBody                   `protobuf:"bytes,2008,opt,name=broadcast_recv_message_body,json=broadcastRecvMessageBody,proto3" json:"broadcast_recv_message_body,omitempty"`
	BroadcastUserCounterBody                *BroadcastUserCounterRequestBody                   `protobuf:"bytes,2009,opt,name=broadcast_user_counter_body,json=broadcastUserCounterBody,proto3" json:"broadcast_user_counter_body,omitempty"`
	ClientAckBody                           *ClientACKRequestBody                              `protobuf:"bytes,2010,opt,name=client_ack_body,json=clientAckBody,proto3" json:"client_ack_body,omitempty"`
	CreateVoipBody                          *CreateVoipRequestBody                             `protobuf:"bytes,2011,opt,name=create_voip_body,json=createVoipBody,proto3" json:"create_voip_body,omitempty"`
	CallVoipBody                            *CallVoipRequestBody                               `protobuf:"bytes,2012,opt,name=call_voip_body,json=callVoipBody,proto3" json:"call_voip_body,omitempty"`
	UpdateVoipBody                          *UpdateVoipRequestBody                             `protobuf:"bytes,2013,opt,name=update_voip_body,json=updateVoipBody,proto3" json:"update_voip_body,omitempty"`
	ChannelHeartbeatBody                    *ChannelHeartBeatRequestBody                       `protobuf:"bytes,2014,opt,name=channel_heartbeat_body,json=channelHeartbeatBody,proto3" json:"channel_heartbeat_body,omitempty"`
	ProfileGetInfo                          *ProfileGetInfoRequestBody                         `protobuf:"bytes,2015,opt,name=profile_get_info,json=profileGetInfo,proto3" json:"profile_get_info,omitempty"`
	ReportClientMetricsBody                 *ReportClientMetricsRequestBody                    `protobuf:"bytes,2016,opt,name=report_client_metrics_body,json=reportClientMetricsBody,proto3" json:"report_client_metrics_body,omitempty"`
	GetConfigsBody                          *GetConfigsRequestBody                             `protobuf:"bytes,2017,opt,name=get_configs_body,json=getConfigsBody,proto3" json:"get_configs_body,omitempty"`
	ModifyMessageExtBody                    *ModifyMessageExtRequestBody                       `protobuf:"bytes,2021,opt,name=modify_message_ext_body,json=modifyMessageExtBody,proto3" json:"modify_message_ext_body,omitempty"`
	UnreadCountReportBody                   *UnReadCountReportRequestBody                      `protobuf:"bytes,2018,opt,name=unread_count_report_body,json=unreadCountReportBody,proto3" json:"unread_count_report_body,omitempty"`
	BlockMembersBody                        *BlockMembersRequestBody                           `protobuf:"bytes,2019,opt,name=block_members_body,json=blockMembersBody,proto3" json:"block_members_body,omitempty"`
	BlockConversationBody                   *BlockConversationRequestBody                      `protobuf:"bytes,2020,opt,name=block_conversation_body,json=blockConversationBody,proto3" json:"block_conversation_body,omitempty"`
	GetUnreadCountBody                      *GetUnreadCountRequestBody                         `protobuf:"bytes,2030,opt,name=get_unread_count_body,json=getUnreadCountBody,proto3" json:"get_unread_count_body,omitempty"`
	SendMessageP2PBody                      *SendMessageP2PRequestBody                         `protobuf:"bytes,2031,opt,name=send_message_p2p_body,json=sendMessageP2pBody,proto3" json:"send_message_p2p_body,omitempty"`
	GetBlocklistBody                        *GetBlockListRequestBody                           `protobuf:"bytes,2032,opt,name=get_blocklist_body,json=getBlocklistBody,proto3" json:"get_blocklist_body,omitempty"`
	SetBlocklistBody                        *SetBlocklistRequestBody                           `protobuf:"bytes,2033,opt,name=set_blocklist_body,json=setBlocklistBody,proto3" json:"set_blocklist_body,omitempty"`
	CheckInBlocklistBody                    *CheckInBlockListRequestBody                       `protobuf:"bytes,2034,opt,name=check_in_blocklist_body,json=checkInBlocklistBody,proto3" json:"check_in_blocklist_body,omitempty"`
	MarkMessageBody                         *MarkMessageRequestBody                            `protobuf:"bytes,2036,opt,name=mark_message_body,json=markMessageBody,proto3" json:"mark_message_body,omitempty"`
	PullMarkMessageBody                     *PullMarkMessageRequestBody                        `protobuf:"bytes,2037,opt,name=pull_mark_message_body,json=pullMarkMessageBody,proto3" json:"pull_mark_message_body,omitempty"`
	MarkMsgUnreadCountReport                *MarkMsgUnreadCountReportRequestBody               `protobuf:"bytes,2054,opt,name=mark_msg_unread_count_report,json=markMsgUnreadCountReport,proto3" json:"mark_msg_unread_count_report,omitempty"`
	MarkMsgGetUnreadCount                   *MarkMsgGetUnreadCountRequestBody                  `protobuf:"bytes,2055,opt,name=mark_msg_get_unread_count,json=markMsgGetUnreadCount,proto3" json:"mark_msg_get_unread_count,omitempty"`
	BatchUnmarkMessage                      *BatchUnmarkMessageRequestBody                     `protobuf:"bytes,2056,opt,name=batch_unmark_message,json=batchUnmarkMessage,proto3" json:"batch_unmark_message,omitempty"`
}

func (x *RequestBody) Reset() {
	*x = RequestBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestBody) ProtoMessage() {}

func (x *RequestBody) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestBody.ProtoReflect.Descriptor instead.
func (*RequestBody) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{72}
}

func (x *RequestBody) GetSendMessageBody() *SendMessageRequestBody {
	if x != nil {
		return x.SendMessageBody
	}
	return nil
}

func (x *RequestBody) GetMessagesPerUserBody() *MessagesPerUserRequestBody {
	if x != nil {
		return x.MessagesPerUserBody
	}
	return nil
}

func (x *RequestBody) GetMessagesPerUserInitV2Body() *MessagesPerUserInitV2RequestBody {
	if x != nil {
		return x.MessagesPerUserInitV2Body
	}
	return nil
}

func (x *RequestBody) GetGetMessageByIdBody() *GetMessageByIdRequestBody {
	if x != nil {
		return x.GetMessageByIdBody
	}
	return nil
}

func (x *RequestBody) GetMessagesInConversationBody() *MessagesInConversationRequestBody {
	if x != nil {
		return x.MessagesInConversationBody
	}
	return nil
}

func (x *RequestBody) GetGetMessagesCheckinfoInConversationBody() *GetMessagesCheckInfoInConversationRequestBody {
	if x != nil {
		return x.GetMessagesCheckinfoInConversationBody
	}
	return nil
}

func (x *RequestBody) GetSendUserActionBody() *SendUserActionRequestBody {
	if x != nil {
		return x.SendUserActionBody
	}
	return nil
}

func (x *RequestBody) GetSendInputStatusBody() *SendInputStatusRequestBody {
	if x != nil {
		return x.SendInputStatusBody
	}
	return nil
}

func (x *RequestBody) GetDeleteConversationBody() *DeleteConversationRequestBody {
	if x != nil {
		return x.DeleteConversationBody
	}
	return nil
}

func (x *RequestBody) GetMarkConversationReadBody() *MarkConversationReadRequestBody {
	if x != nil {
		return x.MarkConversationReadBody
	}
	return nil
}

func (x *RequestBody) GetConversationParticipantsBody() *ConversationParticipantsListRequestBody {
	if x != nil {
		return x.ConversationParticipantsBody
	}
	return nil
}

func (x *RequestBody) GetDissolveConversationBody() *DissolveConversationRequestBody {
	if x != nil {
		return x.DissolveConversationBody
	}
	return nil
}

func (x *RequestBody) GetCreateConversationV2Body() *CreateConversationV2RequestBody {
	if x != nil {
		return x.CreateConversationV2Body
	}
	return nil
}

func (x *RequestBody) GetGetConversationInfoListV2Body() *GetConversationInfoListV2RequestBody {
	if x != nil {
		return x.GetConversationInfoListV2Body
	}
	return nil
}

func (x *RequestBody) GetGetConversationInfoListByFavoriteV2Body() *ConversationsPerUserByFavoriteV2RequestBody {
	if x != nil {
		return x.GetConversationInfoListByFavoriteV2Body
	}
	return nil
}

func (x *RequestBody) GetGetConversationInfoListByTopV2Body() *ConversationsPerUserByTopV2RequestBody {
	if x != nil {
		return x.GetConversationInfoListByTopV2Body
	}
	return nil
}

func (x *RequestBody) GetConversationAddParticipantsBody() *ConversationAddParticipantsRequestBody {
	if x != nil {
		return x.ConversationAddParticipantsBody
	}
	return nil
}

func (x *RequestBody) GetConversationRemoveParticipantsBody() *ConversationRemoveParticipantsRequestBody {
	if x != nil {
		return x.ConversationRemoveParticipantsBody
	}
	return nil
}

func (x *RequestBody) GetLeaveConversationBody() *ConversationLeaveRequestBody {
	if x != nil {
		return x.LeaveConversationBody
	}
	return nil
}

func (x *RequestBody) GetUpdateConversationParticipantBody() *UpdateConversationParticipantRequestBody {
	if x != nil {
		return x.UpdateConversationParticipantBody
	}
	return nil
}

func (x *RequestBody) GetDeleteMessageBody() *DeleteMessageRequestBody {
	if x != nil {
		return x.DeleteMessageBody
	}
	return nil
}

func (x *RequestBody) GetRecallMessageBody() *RecallMessageRequestBody {
	if x != nil {
		return x.RecallMessageBody
	}
	return nil
}

func (x *RequestBody) GetModifyMessagePropertyBody() *ModifyMessagePropertyRequestBody {
	if x != nil {
		return x.ModifyMessagePropertyBody
	}
	return nil
}

func (x *RequestBody) GetGetConversationCoreInfoBody() *GetConversationCoreInfoRequestBody {
	if x != nil {
		return x.GetConversationCoreInfoBody
	}
	return nil
}

func (x *RequestBody) GetSetConversationCoreInfoBody() *SetConversationCoreInfoRequestBody {
	if x != nil {
		return x.SetConversationCoreInfoBody
	}
	return nil
}

func (x *RequestBody) GetUpsertConversationCoreExtInfoBody() *UpsertConversationCoreExtInfoRequestBody {
	if x != nil {
		return x.UpsertConversationCoreExtInfoBody
	}
	return nil
}

func (x *RequestBody) GetSetConversationSettingInfoBody() *SetConversationSettingInfoRequestBody {
	if x != nil {
		return x.SetConversationSettingInfoBody
	}
	return nil
}

func (x *RequestBody) GetUpsertConversationSettingExtInfoBody() *UpsertConversationSettingExtInfoRequestBody {
	if x != nil {
		return x.UpsertConversationSettingExtInfoBody
	}
	return nil
}

func (x *RequestBody) GetGetStrangerConversationBody() *GetStrangerConversationListRequestBody {
	if x != nil {
		return x.GetStrangerConversationBody
	}
	return nil
}

func (x *RequestBody) GetGetStrangerMessagesBody() *GetStrangerMessagesRequestBody {
	if x != nil {
		return x.GetStrangerMessagesBody
	}
	return nil
}

func (x *RequestBody) GetDeleteStrangerMessageBody() *DeleteStrangerMessageRequestBody {
	if x != nil {
		return x.DeleteStrangerMessageBody
	}
	return nil
}

func (x *RequestBody) GetDeleteStrangerConversationBody() *DeleteStrangerConversationRequestBody {
	if x != nil {
		return x.DeleteStrangerConversationBody
	}
	return nil
}

func (x *RequestBody) GetDeleteStrangerAllConversationBody() *DeleteStrangerAllConversationRequestBody {
	if x != nil {
		return x.DeleteStrangerAllConversationBody
	}
	return nil
}

func (x *RequestBody) GetMarkStrangerConversationReadBody() *MarkStrangerConversationReadRequestBody {
	if x != nil {
		return x.MarkStrangerConversationReadBody
	}
	return nil
}

func (x *RequestBody) GetMarkStrangerAllConversationReadBody() *MarkStrangerAllConversationReadRequestBody {
	if x != nil {
		return x.MarkStrangerAllConversationReadBody
	}
	return nil
}

func (x *RequestBody) GetParticipantsReadIndexBody() *GetConversationParticipantsReadIndexV3RequestBody {
	if x != nil {
		return x.ParticipantsReadIndexBody
	}
	return nil
}

func (x *RequestBody) GetParticipantsMinIndexBody() *GetConversationParticipantsMinIndexV3RequestBody {
	if x != nil {
		return x.ParticipantsMinIndexBody
	}
	return nil
}

func (x *RequestBody) GetGetUploadTokenBody() *GetUploadTokenRequestBody {
	if x != nil {
		return x.GetUploadTokenBody
	}
	return nil
}

func (x *RequestBody) GetGetMediaUrlsBody() *GetMediaUrlsRequestBody {
	if x != nil {
		return x.GetMediaUrlsBody
	}
	return nil
}

func (x *RequestBody) GetGetTicketBody() *GetTicketRequestBody {
	if x != nil {
		return x.GetTicketBody
	}
	return nil
}

func (x *RequestBody) GetGetConversationListBody() *GetUserConversationListRequestBody {
	if x != nil {
		return x.GetConversationListBody
	}
	return nil
}

func (x *RequestBody) GetBroadcastSendMessageBody() *BroadcastSendMessageRequestBody {
	if x != nil {
		return x.BroadcastSendMessageBody
	}
	return nil
}

func (x *RequestBody) GetBroadcastRecvMessageBody() *BroadcastRecvMessageRequestBody {
	if x != nil {
		return x.BroadcastRecvMessageBody
	}
	return nil
}

func (x *RequestBody) GetBroadcastUserCounterBody() *BroadcastUserCounterRequestBody {
	if x != nil {
		return x.BroadcastUserCounterBody
	}
	return nil
}

func (x *RequestBody) GetClientAckBody() *ClientACKRequestBody {
	if x != nil {
		return x.ClientAckBody
	}
	return nil
}

func (x *RequestBody) GetCreateVoipBody() *CreateVoipRequestBody {
	if x != nil {
		return x.CreateVoipBody
	}
	return nil
}

func (x *RequestBody) GetCallVoipBody() *CallVoipRequestBody {
	if x != nil {
		return x.CallVoipBody
	}
	return nil
}

func (x *RequestBody) GetUpdateVoipBody() *UpdateVoipRequestBody {
	if x != nil {
		return x.UpdateVoipBody
	}
	return nil
}

func (x *RequestBody) GetChannelHeartbeatBody() *ChannelHeartBeatRequestBody {
	if x != nil {
		return x.ChannelHeartbeatBody
	}
	return nil
}

func (x *RequestBody) GetProfileGetInfo() *ProfileGetInfoRequestBody {
	if x != nil {
		return x.ProfileGetInfo
	}
	return nil
}

func (x *RequestBody) GetReportClientMetricsBody() *ReportClientMetricsRequestBody {
	if x != nil {
		return x.ReportClientMetricsBody
	}
	return nil
}

func (x *RequestBody) GetGetConfigsBody() *GetConfigsRequestBody {
	if x != nil {
		return x.GetConfigsBody
	}
	return nil
}

func (x *RequestBody) GetModifyMessageExtBody() *ModifyMessageExtRequestBody {
	if x != nil {
		return x.ModifyMessageExtBody
	}
	return nil
}

func (x *RequestBody) GetUnreadCountReportBody() *UnReadCountReportRequestBody {
	if x != nil {
		return x.UnreadCountReportBody
	}
	return nil
}

func (x *RequestBody) GetBlockMembersBody() *BlockMembersRequestBody {
	if x != nil {
		return x.BlockMembersBody
	}
	return nil
}

func (x *RequestBody) GetBlockConversationBody() *BlockConversationRequestBody {
	if x != nil {
		return x.BlockConversationBody
	}
	return nil
}

func (x *RequestBody) GetGetUnreadCountBody() *GetUnreadCountRequestBody {
	if x != nil {
		return x.GetUnreadCountBody
	}
	return nil
}

func (x *RequestBody) GetSendMessageP2PBody() *SendMessageP2PRequestBody {
	if x != nil {
		return x.SendMessageP2PBody
	}
	return nil
}

func (x *RequestBody) GetGetBlocklistBody() *GetBlockListRequestBody {
	if x != nil {
		return x.GetBlocklistBody
	}
	return nil
}

func (x *RequestBody) GetSetBlocklistBody() *SetBlocklistRequestBody {
	if x != nil {
		return x.SetBlocklistBody
	}
	return nil
}

func (x *RequestBody) GetCheckInBlocklistBody() *CheckInBlockListRequestBody {
	if x != nil {
		return x.CheckInBlocklistBody
	}
	return nil
}

func (x *RequestBody) GetMarkMessageBody() *MarkMessageRequestBody {
	if x != nil {
		return x.MarkMessageBody
	}
	return nil
}

func (x *RequestBody) GetPullMarkMessageBody() *PullMarkMessageRequestBody {
	if x != nil {
		return x.PullMarkMessageBody
	}
	return nil
}

func (x *RequestBody) GetMarkMsgUnreadCountReport() *MarkMsgUnreadCountReportRequestBody {
	if x != nil {
		return x.MarkMsgUnreadCountReport
	}
	return nil
}

func (x *RequestBody) GetMarkMsgGetUnreadCount() *MarkMsgGetUnreadCountRequestBody {
	if x != nil {
		return x.MarkMsgGetUnreadCount
	}
	return nil
}

func (x *RequestBody) GetBatchUnmarkMessage() *BatchUnmarkMessageRequestBody {
	if x != nil {
		return x.BatchUnmarkMessage
	}
	return nil
}

type Headers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Headers) Reset() {
	*x = Headers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Headers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Headers) ProtoMessage() {}

func (x *Headers) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Headers.ProtoReflect.Descriptor instead.
func (*Headers) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{73}
}

type Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd            int32             `protobuf:"varint,1,opt,name=cmd,proto3" json:"cmd,omitempty"`
	SequenceId     int64             `protobuf:"varint,2,opt,name=sequence_id,json=sequenceId,proto3" json:"sequence_id,omitempty"`
	SdkVersion     string            `protobuf:"bytes,3,opt,name=sdk_version,json=sdkVersion,proto3" json:"sdk_version,omitempty"`
	Token          string            `protobuf:"bytes,4,opt,name=token,proto3" json:"token,omitempty"`
	Refer          int32             `protobuf:"varint,5,opt,name=refer,proto3" json:"refer,omitempty"`
	InboxType      int32             `protobuf:"varint,6,opt,name=inbox_type,json=inboxType,proto3" json:"inbox_type,omitempty"`
	BuildNumber    string            `protobuf:"bytes,7,opt,name=build_number,json=buildNumber,proto3" json:"build_number,omitempty"`
	Body           *RequestBody      `protobuf:"bytes,8,opt,name=body,proto3" json:"body,omitempty"`
	DeviceId       string            `protobuf:"bytes,9,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	Channel        string            `protobuf:"bytes,10,opt,name=channel,proto3" json:"channel,omitempty"`
	DevicePlatform string            `protobuf:"bytes,11,opt,name=device_platform,json=devicePlatform,proto3" json:"device_platform,omitempty"`
	DeviceType     string            `protobuf:"bytes,12,opt,name=device_type,json=deviceType,proto3" json:"device_type,omitempty"`
	OsVersion      string            `protobuf:"bytes,13,opt,name=os_version,json=osVersion,proto3" json:"os_version,omitempty"`
	VersionCode    string            `protobuf:"bytes,14,opt,name=version_code,json=versionCode,proto3" json:"version_code,omitempty"`
	Headers        map[string]string `protobuf:"bytes,15,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ConfigId       int32             `protobuf:"varint,16,opt,name=config_id,json=configId,proto3" json:"config_id,omitempty"`
	TokenInfo      *TokenInfo        `protobuf:"bytes,17,opt,name=token_info,json=tokenInfo,proto3" json:"token_info,omitempty"`
	AuthType       int32             `protobuf:"varint,18,opt,name=auth_type,json=authType,proto3" json:"auth_type,omitempty"`
}

func (x *Request) Reset() {
	*x = Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Request) ProtoMessage() {}

func (x *Request) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Request.ProtoReflect.Descriptor instead.
func (*Request) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{74}
}

func (x *Request) GetCmd() int32 {
	if x != nil {
		return x.Cmd
	}
	return 0
}

func (x *Request) GetSequenceId() int64 {
	if x != nil {
		return x.SequenceId
	}
	return 0
}

func (x *Request) GetSdkVersion() string {
	if x != nil {
		return x.SdkVersion
	}
	return ""
}

func (x *Request) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *Request) GetRefer() int32 {
	if x != nil {
		return x.Refer
	}
	return 0
}

func (x *Request) GetInboxType() int32 {
	if x != nil {
		return x.InboxType
	}
	return 0
}

func (x *Request) GetBuildNumber() string {
	if x != nil {
		return x.BuildNumber
	}
	return ""
}

func (x *Request) GetBody() *RequestBody {
	if x != nil {
		return x.Body
	}
	return nil
}

func (x *Request) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *Request) GetChannel() string {
	if x != nil {
		return x.Channel
	}
	return ""
}

func (x *Request) GetDevicePlatform() string {
	if x != nil {
		return x.DevicePlatform
	}
	return ""
}

func (x *Request) GetDeviceType() string {
	if x != nil {
		return x.DeviceType
	}
	return ""
}

func (x *Request) GetOsVersion() string {
	if x != nil {
		return x.OsVersion
	}
	return ""
}

func (x *Request) GetVersionCode() string {
	if x != nil {
		return x.VersionCode
	}
	return ""
}

func (x *Request) GetHeaders() map[string]string {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *Request) GetConfigId() int32 {
	if x != nil {
		return x.ConfigId
	}
	return 0
}

func (x *Request) GetTokenInfo() *TokenInfo {
	if x != nil {
		return x.TokenInfo
	}
	return nil
}

func (x *Request) GetAuthType() int32 {
	if x != nil {
		return x.AuthType
	}
	return 0
}

type TokenInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MarkId    int32 `protobuf:"varint,1,opt,name=mark_id,json=markId,proto3" json:"mark_id,omitempty"`
	Type      int32 `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"`
	AppId     int32 `protobuf:"varint,3,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	UserId    int64 `protobuf:"varint,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Timestamp int64 `protobuf:"varint,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *TokenInfo) Reset() {
	*x = TokenInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TokenInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenInfo) ProtoMessage() {}

func (x *TokenInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenInfo.ProtoReflect.Descriptor instead.
func (*TokenInfo) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{75}
}

func (x *TokenInfo) GetMarkId() int32 {
	if x != nil {
		return x.MarkId
	}
	return 0
}

func (x *TokenInfo) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *TokenInfo) GetAppId() int32 {
	if x != nil {
		return x.AppId
	}
	return 0
}

func (x *TokenInfo) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *TokenInfo) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type SendMessageResponseBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerMessageId int64  `protobuf:"varint,1,opt,name=server_message_id,json=serverMessageId,proto3" json:"server_message_id,omitempty"`
	ExtraInfo       string `protobuf:"bytes,2,opt,name=extra_info,json=extraInfo,proto3" json:"extra_info,omitempty"`
	Status          int32  `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`
	ClientMessageId string `protobuf:"bytes,4,opt,name=client_message_id,json=clientMessageId,proto3" json:"client_message_id,omitempty"`
	CheckCode       int64  `protobuf:"varint,5,opt,name=check_code,json=checkCode,proto3" json:"check_code,omitempty"`
	CheckMessage    string `protobuf:"bytes,6,opt,name=check_message,json=checkMessage,proto3" json:"check_message,omitempty"`
}

func (x *SendMessageResponseBody) Reset() {
	*x = SendMessageResponseBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendMessageResponseBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendMessageResponseBody) ProtoMessage() {}

func (x *SendMessageResponseBody) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendMessageResponseBody.ProtoReflect.Descriptor instead.
func (*SendMessageResponseBody) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{76}
}

func (x *SendMessageResponseBody) GetServerMessageId() int64 {
	if x != nil {
		return x.ServerMessageId
	}
	return 0
}

func (x *SendMessageResponseBody) GetExtraInfo() string {
	if x != nil {
		return x.ExtraInfo
	}
	return ""
}

func (x *SendMessageResponseBody) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *SendMessageResponseBody) GetClientMessageId() string {
	if x != nil {
		return x.ClientMessageId
	}
	return ""
}

func (x *SendMessageResponseBody) GetCheckCode() int64 {
	if x != nil {
		return x.CheckCode
	}
	return 0
}

func (x *SendMessageResponseBody) GetCheckMessage() string {
	if x != nil {
		return x.CheckMessage
	}
	return ""
}

type MessageBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConversationId      string `protobuf:"bytes,1,opt,name=conversation_id,json=conversationId,proto3" json:"conversation_id,omitempty"`
	ConversationType    int32  `protobuf:"varint,2,opt,name=conversation_type,json=conversationType,proto3" json:"conversation_type,omitempty"`
	ServerMessageId     int64  `protobuf:"varint,3,opt,name=server_message_id,json=serverMessageId,proto3" json:"server_message_id,omitempty"`
	IndexInConversation int64  `protobuf:"varint,4,opt,name=index_in_conversation,json=indexInConversation,proto3" json:"index_in_conversation,omitempty"`
	ConversationShortId int64  `protobuf:"varint,5,opt,name=conversation_short_id,json=conversationShortId,proto3" json:"conversation_short_id,omitempty"`
	MessageType         int32  `protobuf:"varint,6,opt,name=message_type,json=messageType,proto3" json:"message_type,omitempty"`
	Sender              int64  `protobuf:"varint,7,opt,name=sender,proto3" json:"sender,omitempty"`
	Content             string `protobuf:"bytes,8,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *MessageBody) Reset() {
	*x = MessageBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageBody) ProtoMessage() {}

func (x *MessageBody) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageBody.ProtoReflect.Descriptor instead.
func (*MessageBody) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{77}
}

func (x *MessageBody) GetConversationId() string {
	if x != nil {
		return x.ConversationId
	}
	return ""
}

func (x *MessageBody) GetConversationType() int32 {
	if x != nil {
		return x.ConversationType
	}
	return 0
}

func (x *MessageBody) GetServerMessageId() int64 {
	if x != nil {
		return x.ServerMessageId
	}
	return 0
}

func (x *MessageBody) GetIndexInConversation() int64 {
	if x != nil {
		return x.IndexInConversation
	}
	return 0
}

func (x *MessageBody) GetConversationShortId() int64 {
	if x != nil {
		return x.ConversationShortId
	}
	return 0
}

func (x *MessageBody) GetMessageType() int32 {
	if x != nil {
		return x.MessageType
	}
	return 0
}

func (x *MessageBody) GetSender() int64 {
	if x != nil {
		return x.Sender
	}
	return 0
}

func (x *MessageBody) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

type MessagesPerUserResponseBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Messages   []*MessageBody `protobuf:"bytes,1,rep,name=messages,proto3" json:"messages,omitempty"`
	NextCursor int64          `protobuf:"varint,2,opt,name=next_cursor,json=nextCursor,proto3" json:"next_cursor,omitempty"`
	HasMore    bool           `protobuf:"varint,3,opt,name=has_more,json=hasMore,proto3" json:"has_more,omitempty"`
}

func (x *MessagesPerUserResponseBody) Reset() {
	*x = MessagesPerUserResponseBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessagesPerUserResponseBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessagesPerUserResponseBody) ProtoMessage() {}

func (x *MessagesPerUserResponseBody) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessagesPerUserResponseBody.ProtoReflect.Descriptor instead.
func (*MessagesPerUserResponseBody) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{78}
}

func (x *MessagesPerUserResponseBody) GetMessages() []*MessageBody {
	if x != nil {
		return x.Messages
	}
	return nil
}

func (x *MessagesPerUserResponseBody) GetNextCursor() int64 {
	if x != nil {
		return x.NextCursor
	}
	return 0
}

func (x *MessagesPerUserResponseBody) GetHasMore() bool {
	if x != nil {
		return x.HasMore
	}
	return false
}

type MessageInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status int32        `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Body   *MessageBody `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *MessageInfo) Reset() {
	*x = MessageInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageInfo) ProtoMessage() {}

func (x *MessageInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageInfo.ProtoReflect.Descriptor instead.
func (*MessageInfo) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{79}
}

func (x *MessageInfo) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *MessageInfo) GetBody() *MessageBody {
	if x != nil {
		return x.Body
	}
	return nil
}

type GetMessageByIdResponseBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgInfo *MessageInfo `protobuf:"bytes,1,opt,name=msg_info,json=msgInfo,proto3" json:"msg_info,omitempty"`
}

func (x *GetMessageByIdResponseBody) Reset() {
	*x = GetMessageByIdResponseBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMessageByIdResponseBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMessageByIdResponseBody) ProtoMessage() {}

func (x *GetMessageByIdResponseBody) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMessageByIdResponseBody.ProtoReflect.Descriptor instead.
func (*GetMessageByIdResponseBody) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{80}
}

func (x *GetMessageByIdResponseBody) GetMsgInfo() *MessageInfo {
	if x != nil {
		return x.MsgInfo
	}
	return nil
}

type MessagesInConversationResponseBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Messages   []*MessageBody `protobuf:"bytes,1,rep,name=messages,proto3" json:"messages,omitempty"`
	NextCursor int64          `protobuf:"varint,2,opt,name=next_cursor,json=nextCursor,proto3" json:"next_cursor,omitempty"`
	HasMore    bool           `protobuf:"varint,3,opt,name=has_more,json=hasMore,proto3" json:"has_more,omitempty"`
}

func (x *MessagesInConversationResponseBody) Reset() {
	*x = MessagesInConversationResponseBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessagesInConversationResponseBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessagesInConversationResponseBody) ProtoMessage() {}

func (x *MessagesInConversationResponseBody) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessagesInConversationResponseBody.ProtoReflect.Descriptor instead.
func (*MessagesInConversationResponseBody) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{81}
}

func (x *MessagesInConversationResponseBody) GetMessages() []*MessageBody {
	if x != nil {
		return x.Messages
	}
	return nil
}

func (x *MessagesInConversationResponseBody) GetNextCursor() int64 {
	if x != nil {
		return x.NextCursor
	}
	return 0
}

func (x *MessagesInConversationResponseBody) GetHasMore() bool {
	if x != nil {
		return x.HasMore
	}
	return false
}

type MessagesCheckInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HeadMsgIndex    int64  `protobuf:"varint,1,opt,name=head_msg_index,json=headMsgIndex,proto3" json:"head_msg_index,omitempty"`
	TailMsgIndex    int64  `protobuf:"varint,2,opt,name=tail_msg_index,json=tailMsgIndex,proto3" json:"tail_msg_index,omitempty"`
	MsgCount        int32  `protobuf:"varint,3,opt,name=msg_count,json=msgCount,proto3" json:"msg_count,omitempty"`
	IndexesChecksum uint32 `protobuf:"varint,4,opt,name=indexes_checksum,json=indexesChecksum,proto3" json:"indexes_checksum,omitempty"`
}

func (x *MessagesCheckInfo) Reset() {
	*x = MessagesCheckInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessagesCheckInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessagesCheckInfo) ProtoMessage() {}

func (x *MessagesCheckInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessagesCheckInfo.ProtoReflect.Descriptor instead.
func (*MessagesCheckInfo) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{82}
}

func (x *MessagesCheckInfo) GetHeadMsgIndex() int64 {
	if x != nil {
		return x.HeadMsgIndex
	}
	return 0
}

func (x *MessagesCheckInfo) GetTailMsgIndex() int64 {
	if x != nil {
		return x.TailMsgIndex
	}
	return 0
}

func (x *MessagesCheckInfo) GetMsgCount() int32 {
	if x != nil {
		return x.MsgCount
	}
	return 0
}

func (x *MessagesCheckInfo) GetIndexesChecksum() uint32 {
	if x != nil {
		return x.IndexesChecksum
	}
	return 0
}

type GetMessagesCheckInfoInConversationResponseBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgsCheckinfoList []*MessagesCheckInfo `protobuf:"bytes,1,rep,name=msgs_checkinfo_list,json=msgsCheckinfoList,proto3" json:"msgs_checkinfo_list,omitempty"`
	RealMsgTotalCount int32                `protobuf:"varint,2,opt,name=real_msg_total_count,json=realMsgTotalCount,proto3" json:"real_msg_total_count,omitempty"`
	CursorReverseNext int64                `protobuf:"varint,4,opt,name=cursor_reverse_next,json=cursorReverseNext,proto3" json:"cursor_reverse_next,omitempty"`
}

func (x *GetMessagesCheckInfoInConversationResponseBody) Reset() {
	*x = GetMessagesCheckInfoInConversationResponseBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMessagesCheckInfoInConversationResponseBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMessagesCheckInfoInConversationResponseBody) ProtoMessage() {}

func (x *GetMessagesCheckInfoInConversationResponseBody) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMessagesCheckInfoInConversationResponseBody.ProtoReflect.Descriptor instead.
func (*GetMessagesCheckInfoInConversationResponseBody) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{83}
}

func (x *GetMessagesCheckInfoInConversationResponseBody) GetMsgsCheckinfoList() []*MessagesCheckInfo {
	if x != nil {
		return x.MsgsCheckinfoList
	}
	return nil
}

func (x *GetMessagesCheckInfoInConversationResponseBody) GetRealMsgTotalCount() int32 {
	if x != nil {
		return x.RealMsgTotalCount
	}
	return 0
}

func (x *GetMessagesCheckInfoInConversationResponseBody) GetCursorReverseNext() int64 {
	if x != nil {
		return x.CursorReverseNext
	}
	return 0
}

type ReferenceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReferencedMessageId     int64  `protobuf:"varint,1,opt,name=referenced_message_id,json=referencedMessageId,proto3" json:"referenced_message_id,omitempty"`
	Hint                    string `protobuf:"bytes,2,opt,name=hint,proto3" json:"hint,omitempty"`
	RefMessageType          int64  `protobuf:"varint,3,opt,name=ref_message_type,json=refMessageType,proto3" json:"ref_message_type,omitempty"`
	ReferencedMessageStatus int32  `protobuf:"varint,4,opt,name=referenced_message_status,json=referencedMessageStatus,proto3" json:"referenced_message_status,omitempty"`
	RootMessageId           int64  `protobuf:"varint,5,opt,name=root_message_id,json=rootMessageId,proto3" json:"root_message_id,omitempty"`
	RootMessageConvIndex    int64  `protobuf:"varint,6,opt,name=root_message_conv_index,json=rootMessageConvIndex,proto3" json:"root_message_conv_index,omitempty"`
}

func (x *ReferenceInfo) Reset() {
	*x = ReferenceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReferenceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReferenceInfo) ProtoMessage() {}

func (x *ReferenceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReferenceInfo.ProtoReflect.Descriptor instead.
func (*ReferenceInfo) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{84}
}

func (x *ReferenceInfo) GetReferencedMessageId() int64 {
	if x != nil {
		return x.ReferencedMessageId
	}
	return 0
}

func (x *ReferenceInfo) GetHint() string {
	if x != nil {
		return x.Hint
	}
	return ""
}

func (x *ReferenceInfo) GetRefMessageType() int64 {
	if x != nil {
		return x.RefMessageType
	}
	return 0
}

func (x *ReferenceInfo) GetReferencedMessageStatus() int32 {
	if x != nil {
		return x.ReferencedMessageStatus
	}
	return 0
}

func (x *ReferenceInfo) GetRootMessageId() int64 {
	if x != nil {
		return x.RootMessageId
	}
	return 0
}

func (x *ReferenceInfo) GetRootMessageConvIndex() int64 {
	if x != nil {
		return x.RootMessageConvIndex
	}
	return 0
}

type NewMessageNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConversationId      string         `protobuf:"bytes,2,opt,name=conversation_id,json=conversationId,proto3" json:"conversation_id,omitempty"`
	ConversationType    int32          `protobuf:"varint,3,opt,name=conversation_type,json=conversationType,proto3" json:"conversation_type,omitempty"`
	NotifyType          int32          `protobuf:"varint,4,opt,name=notify_type,json=notifyType,proto3" json:"notify_type,omitempty"`
	Message             *MessageBody   `protobuf:"bytes,5,opt,name=message,proto3" json:"message,omitempty"`
	PreviousCursor      int64          `protobuf:"varint,6,opt,name=previous_cursor,json=previousCursor,proto3" json:"previous_cursor,omitempty"`
	NextCursor          int64          `protobuf:"varint,7,opt,name=next_cursor,json=nextCursor,proto3" json:"next_cursor,omitempty"`
	IndexInConversation int64          `protobuf:"varint,8,opt,name=index_in_conversation,json=indexInConversation,proto3" json:"index_in_conversation,omitempty"`
	RefMsgInfo          *ReferenceInfo `protobuf:"bytes,15,opt,name=ref_msg_info,json=refMsgInfo,proto3" json:"ref_msg_info,omitempty"`
}

func (x *NewMessageNotify) Reset() {
	*x = NewMessageNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewMessageNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewMessageNotify) ProtoMessage() {}

func (x *NewMessageNotify) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewMessageNotify.ProtoReflect.Descriptor instead.
func (*NewMessageNotify) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{85}
}

func (x *NewMessageNotify) GetConversationId() string {
	if x != nil {
		return x.ConversationId
	}
	return ""
}

func (x *NewMessageNotify) GetConversationType() int32 {
	if x != nil {
		return x.ConversationType
	}
	return 0
}

func (x *NewMessageNotify) GetNotifyType() int32 {
	if x != nil {
		return x.NotifyType
	}
	return 0
}

func (x *NewMessageNotify) GetMessage() *MessageBody {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *NewMessageNotify) GetPreviousCursor() int64 {
	if x != nil {
		return x.PreviousCursor
	}
	return 0
}

func (x *NewMessageNotify) GetNextCursor() int64 {
	if x != nil {
		return x.NextCursor
	}
	return 0
}

func (x *NewMessageNotify) GetIndexInConversation() int64 {
	if x != nil {
		return x.IndexInConversation
	}
	return 0
}

func (x *NewMessageNotify) GetRefMsgInfo() *ReferenceInfo {
	if x != nil {
		return x.RefMsgInfo
	}
	return nil
}

type ConversationCheckInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConversationShortId int64  `protobuf:"varint,1,opt,name=conversation_short_id,json=conversationShortId,proto3" json:"conversation_short_id,omitempty"`
	ConversationId      string `protobuf:"bytes,2,opt,name=conversation_id,json=conversationId,proto3" json:"conversation_id,omitempty"`
	ConversationType    int32  `protobuf:"varint,3,opt,name=conversation_type,json=conversationType,proto3" json:"conversation_type,omitempty"`
}

func (x *ConversationCheckInfo) Reset() {
	*x = ConversationCheckInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConversationCheckInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConversationCheckInfo) ProtoMessage() {}

func (x *ConversationCheckInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConversationCheckInfo.ProtoReflect.Descriptor instead.
func (*ConversationCheckInfo) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{86}
}

func (x *ConversationCheckInfo) GetConversationShortId() int64 {
	if x != nil {
		return x.ConversationShortId
	}
	return 0
}

func (x *ConversationCheckInfo) GetConversationId() string {
	if x != nil {
		return x.ConversationId
	}
	return ""
}

func (x *ConversationCheckInfo) GetConversationType() int32 {
	if x != nil {
		return x.ConversationType
	}
	return 0
}

type GetConversationsCheckInfoResponseBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConversationCheckinfoList []*ConversationCheckInfo `protobuf:"bytes,1,rep,name=conversation_checkinfo_list,json=conversationCheckinfoList,proto3" json:"conversation_checkinfo_list,omitempty"`
}

func (x *GetConversationsCheckInfoResponseBody) Reset() {
	*x = GetConversationsCheckInfoResponseBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConversationsCheckInfoResponseBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConversationsCheckInfoResponseBody) ProtoMessage() {}

func (x *GetConversationsCheckInfoResponseBody) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConversationsCheckInfoResponseBody.ProtoReflect.Descriptor instead.
func (*GetConversationsCheckInfoResponseBody) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{87}
}

func (x *GetConversationsCheckInfoResponseBody) GetConversationCheckinfoList() []*ConversationCheckInfo {
	if x != nil {
		return x.ConversationCheckinfoList
	}
	return nil
}

type Participant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId        int64  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	SortOrder     int64  `protobuf:"varint,2,opt,name=sort_order,json=sortOrder,proto3" json:"sort_order,omitempty"`
	Role          int32  `protobuf:"varint,3,opt,name=role,proto3" json:"role,omitempty"`
	Alias         string `protobuf:"bytes,4,opt,name=alias,proto3" json:"alias,omitempty"`
	SecUid        string `protobuf:"bytes,5,opt,name=sec_uid,json=secUid,proto3" json:"sec_uid,omitempty"`
	Blocked       int32  `protobuf:"varint,6,opt,name=blocked,proto3" json:"blocked,omitempty"`
	LeftBlockTime int64  `protobuf:"varint,7,opt,name=left_block_time,json=leftBlockTime,proto3" json:"left_block_time,omitempty"`
}

func (x *Participant) Reset() {
	*x = Participant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Participant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Participant) ProtoMessage() {}

func (x *Participant) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Participant.ProtoReflect.Descriptor instead.
func (*Participant) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{88}
}

func (x *Participant) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *Participant) GetSortOrder() int64 {
	if x != nil {
		return x.SortOrder
	}
	return 0
}

func (x *Participant) GetRole() int32 {
	if x != nil {
		return x.Role
	}
	return 0
}

func (x *Participant) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

func (x *Participant) GetSecUid() string {
	if x != nil {
		return x.SecUid
	}
	return ""
}

func (x *Participant) GetBlocked() int32 {
	if x != nil {
		return x.Blocked
	}
	return 0
}

func (x *Participant) GetLeftBlockTime() int64 {
	if x != nil {
		return x.LeftBlockTime
	}
	return 0
}

type ParticipantsPage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Participants []*Participant `protobuf:"bytes,1,rep,name=participants,proto3" json:"participants,omitempty"`
	HasMore      bool           `protobuf:"varint,2,opt,name=has_more,json=hasMore,proto3" json:"has_more,omitempty"`
	Cursor       int64          `protobuf:"varint,3,opt,name=cursor,proto3" json:"cursor,omitempty"`
}

func (x *ParticipantsPage) Reset() {
	*x = ParticipantsPage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParticipantsPage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParticipantsPage) ProtoMessage() {}

func (x *ParticipantsPage) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParticipantsPage.ProtoReflect.Descriptor instead.
func (*ParticipantsPage) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{89}
}

func (x *ParticipantsPage) GetParticipants() []*Participant {
	if x != nil {
		return x.Participants
	}
	return nil
}

func (x *ParticipantsPage) GetHasMore() bool {
	if x != nil {
		return x.HasMore
	}
	return false
}

func (x *ParticipantsPage) GetCursor() int64 {
	if x != nil {
		return x.Cursor
	}
	return 0
}

type ConversationParticipantsListResponseBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParticipantsPage *ParticipantsPage `protobuf:"bytes,1,opt,name=participants_page,json=participantsPage,proto3" json:"participants_page,omitempty"`
}

func (x *ConversationParticipantsListResponseBody) Reset() {
	*x = ConversationParticipantsListResponseBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConversationParticipantsListResponseBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConversationParticipantsListResponseBody) ProtoMessage() {}

func (x *ConversationParticipantsListResponseBody) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConversationParticipantsListResponseBody.ProtoReflect.Descriptor instead.
func (*ConversationParticipantsListResponseBody) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{90}
}

func (x *ConversationParticipantsListResponseBody) GetParticipantsPage() *ParticipantsPage {
	if x != nil {
		return x.ParticipantsPage
	}
	return nil
}

type SecUidPair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid    int64  `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	SecUid string `protobuf:"bytes,2,opt,name=sec_uid,json=secUid,proto3" json:"sec_uid,omitempty"`
}

func (x *SecUidPair) Reset() {
	*x = SecUidPair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecUidPair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecUidPair) ProtoMessage() {}

func (x *SecUidPair) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecUidPair.ProtoReflect.Descriptor instead.
func (*SecUidPair) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{91}
}

func (x *SecUidPair) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *SecUidPair) GetSecUid() string {
	if x != nil {
		return x.SecUid
	}
	return ""
}

type ConversationAddParticipantsResponseBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SuccessParticipants    []int64       `protobuf:"varint,1,rep,packed,name=success_participants,json=successParticipants,proto3" json:"success_participants,omitempty"`
	FailedParticipants     []int64       `protobuf:"varint,2,rep,packed,name=failed_participants,json=failedParticipants,proto3" json:"failed_participants,omitempty"`
	Status                 int32         `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`
	ExtraInfo              string        `protobuf:"bytes,4,opt,name=extra_info,json=extraInfo,proto3" json:"extra_info,omitempty"`
	CheckCode              int64         `protobuf:"varint,5,opt,name=check_code,json=checkCode,proto3" json:"check_code,omitempty"`
	CheckMessage           string        `protobuf:"bytes,6,opt,name=check_message,json=checkMessage,proto3" json:"check_message,omitempty"`
	SecSuccessParticipants []*SecUidPair `protobuf:"bytes,7,rep,name=sec_success_participants,json=secSuccessParticipants,proto3" json:"sec_success_participants,omitempty"`
	SecFailedParticipants  []*SecUidPair `protobuf:"bytes,8,rep,name=sec_failed_participants,json=secFailedParticipants,proto3" json:"sec_failed_participants,omitempty"`
}

func (x *ConversationAddParticipantsResponseBody) Reset() {
	*x = ConversationAddParticipantsResponseBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConversationAddParticipantsResponseBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConversationAddParticipantsResponseBody) ProtoMessage() {}

func (x *ConversationAddParticipantsResponseBody) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConversationAddParticipantsResponseBody.ProtoReflect.Descriptor instead.
func (*ConversationAddParticipantsResponseBody) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{92}
}

func (x *ConversationAddParticipantsResponseBody) GetSuccessParticipants() []int64 {
	if x != nil {
		return x.SuccessParticipants
	}
	return nil
}

func (x *ConversationAddParticipantsResponseBody) GetFailedParticipants() []int64 {
	if x != nil {
		return x.FailedParticipants
	}
	return nil
}

func (x *ConversationAddParticipantsResponseBody) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *ConversationAddParticipantsResponseBody) GetExtraInfo() string {
	if x != nil {
		return x.ExtraInfo
	}
	return ""
}

func (x *ConversationAddParticipantsResponseBody) GetCheckCode() int64 {
	if x != nil {
		return x.CheckCode
	}
	return 0
}

func (x *ConversationAddParticipantsResponseBody) GetCheckMessage() string {
	if x != nil {
		return x.CheckMessage
	}
	return ""
}

func (x *ConversationAddParticipantsResponseBody) GetSecSuccessParticipants() []*SecUidPair {
	if x != nil {
		return x.SecSuccessParticipants
	}
	return nil
}

func (x *ConversationAddParticipantsResponseBody) GetSecFailedParticipants() []*SecUidPair {
	if x != nil {
		return x.SecFailedParticipants
	}
	return nil
}

type ConversationRemoveParticipantsResponseBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FailedParticipants    []int64       `protobuf:"varint,1,rep,packed,name=failed_participants,json=failedParticipants,proto3" json:"failed_participants,omitempty"`
	Status                int32         `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
	ExtraInfo             string        `protobuf:"bytes,3,opt,name=extra_info,json=extraInfo,proto3" json:"extra_info,omitempty"`
	CheckCode             int64         `protobuf:"varint,4,opt,name=check_code,json=checkCode,proto3" json:"check_code,omitempty"`
	CheckMessage          string        `protobuf:"bytes,5,opt,name=check_message,json=checkMessage,proto3" json:"check_message,omitempty"`
	FailedSecParticipants []*SecUidPair `protobuf:"bytes,6,rep,name=failed_sec_participants,json=failedSecParticipants,proto3" json:"failed_sec_participants,omitempty"`
}

func (x *ConversationRemoveParticipantsResponseBody) Reset() {
	*x = ConversationRemoveParticipantsResponseBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConversationRemoveParticipantsResponseBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConversationRemoveParticipantsResponseBody) ProtoMessage() {}

func (x *ConversationRemoveParticipantsResponseBody) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConversationRemoveParticipantsResponseBody.ProtoReflect.Descriptor instead.
func (*ConversationRemoveParticipantsResponseBody) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{93}
}

func (x *ConversationRemoveParticipantsResponseBody) GetFailedParticipants() []int64 {
	if x != nil {
		return x.FailedParticipants
	}
	return nil
}

func (x *ConversationRemoveParticipantsResponseBody) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *ConversationRemoveParticipantsResponseBody) GetExtraInfo() string {
	if x != nil {
		return x.ExtraInfo
	}
	return ""
}

func (x *ConversationRemoveParticipantsResponseBody) GetCheckCode() int64 {
	if x != nil {
		return x.CheckCode
	}
	return 0
}

func (x *ConversationRemoveParticipantsResponseBody) GetCheckMessage() string {
	if x != nil {
		return x.CheckMessage
	}
	return ""
}

func (x *ConversationRemoveParticipantsResponseBody) GetFailedSecParticipants() []*SecUidPair {
	if x != nil {
		return x.FailedSecParticipants
	}
	return nil
}

type UpdateConversationParticipantResponseBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Participant  *Participant `protobuf:"bytes,1,opt,name=participant,proto3" json:"participant,omitempty"`
	Status       int32        `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
	ExtraInfo    string       `protobuf:"bytes,3,opt,name=extra_info,json=extraInfo,proto3" json:"extra_info,omitempty"`
	CheckCode    int64        `protobuf:"varint,4,opt,name=check_code,json=checkCode,proto3" json:"check_code,omitempty"`
	CheckMessage string       `protobuf:"bytes,5,opt,name=check_message,json=checkMessage,proto3" json:"check_message,omitempty"`
}

func (x *UpdateConversationParticipantResponseBody) Reset() {
	*x = UpdateConversationParticipantResponseBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateConversationParticipantResponseBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateConversationParticipantResponseBody) ProtoMessage() {}

func (x *UpdateConversationParticipantResponseBody) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateConversationParticipantResponseBody.ProtoReflect.Descriptor instead.
func (*UpdateConversationParticipantResponseBody) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{94}
}

func (x *UpdateConversationParticipantResponseBody) GetParticipant() *Participant {
	if x != nil {
		return x.Participant
	}
	return nil
}

func (x *UpdateConversationParticipantResponseBody) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *UpdateConversationParticipantResponseBody) GetExtraInfo() string {
	if x != nil {
		return x.ExtraInfo
	}
	return ""
}

func (x *UpdateConversationParticipantResponseBody) GetCheckCode() int64 {
	if x != nil {
		return x.CheckCode
	}
	return 0
}

func (x *UpdateConversationParticipantResponseBody) GetCheckMessage() string {
	if x != nil {
		return x.CheckMessage
	}
	return ""
}

type ModifyMessagePropertyResponseBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  int32 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Version int64 `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *ModifyMessagePropertyResponseBody) Reset() {
	*x = ModifyMessagePropertyResponseBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyMessagePropertyResponseBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyMessagePropertyResponseBody) ProtoMessage() {}

func (x *ModifyMessagePropertyResponseBody) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyMessagePropertyResponseBody.ProtoReflect.Descriptor instead.
func (*ModifyMessagePropertyResponseBody) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{95}
}

func (x *ModifyMessagePropertyResponseBody) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *ModifyMessagePropertyResponseBody) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

type Ext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Ext) Reset() {
	*x = Ext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ext) ProtoMessage() {}

func (x *Ext) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ext.ProtoReflect.Descriptor instead.
func (*Ext) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{96}
}

type ConversationCoreInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConversationId      string            `protobuf:"bytes,1,opt,name=conversation_id,json=conversationId,proto3" json:"conversation_id,omitempty"`
	ConversationShortId int64             `protobuf:"varint,2,opt,name=conversation_short_id,json=conversationShortId,proto3" json:"conversation_short_id,omitempty"`
	ConversationType    int32             `protobuf:"varint,3,opt,name=conversation_type,json=conversationType,proto3" json:"conversation_type,omitempty"`
	InfoVersion         int64             `protobuf:"varint,4,opt,name=info_version,json=infoVersion,proto3" json:"info_version,omitempty"`
	Name                string            `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	Desc                string            `protobuf:"bytes,6,opt,name=desc,proto3" json:"desc,omitempty"`
	Icon                string            `protobuf:"bytes,7,opt,name=icon,proto3" json:"icon,omitempty"`
	InboxType           int32             `protobuf:"varint,8,opt,name=inbox_type,json=inboxType,proto3" json:"inbox_type,omitempty"`
	Notice              string            `protobuf:"bytes,9,opt,name=notice,proto3" json:"notice,omitempty"`
	Ext                 map[string]string `protobuf:"bytes,11,rep,name=ext,proto3" json:"ext,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Owner               int64             `protobuf:"varint,12,opt,name=owner,proto3" json:"owner,omitempty"`
	SecOwner            string            `protobuf:"bytes,13,opt,name=sec_owner,json=secOwner,proto3" json:"sec_owner,omitempty"`
}

func (x *ConversationCoreInfo) Reset() {
	*x = ConversationCoreInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConversationCoreInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConversationCoreInfo) ProtoMessage() {}

func (x *ConversationCoreInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConversationCoreInfo.ProtoReflect.Descriptor instead.
func (*ConversationCoreInfo) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{97}
}

func (x *ConversationCoreInfo) GetConversationId() string {
	if x != nil {
		return x.ConversationId
	}
	return ""
}

func (x *ConversationCoreInfo) GetConversationShortId() int64 {
	if x != nil {
		return x.ConversationShortId
	}
	return 0
}

func (x *ConversationCoreInfo) GetConversationType() int32 {
	if x != nil {
		return x.ConversationType
	}
	return 0
}

func (x *ConversationCoreInfo) GetInfoVersion() int64 {
	if x != nil {
		return x.InfoVersion
	}
	return 0
}

func (x *ConversationCoreInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ConversationCoreInfo) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *ConversationCoreInfo) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *ConversationCoreInfo) GetInboxType() int32 {
	if x != nil {
		return x.InboxType
	}
	return 0
}

func (x *ConversationCoreInfo) GetNotice() string {
	if x != nil {
		return x.Notice
	}
	return ""
}

func (x *ConversationCoreInfo) GetExt() map[string]string {
	if x != nil {
		return x.Ext
	}
	return nil
}

func (x *ConversationCoreInfo) GetOwner() int64 {
	if x != nil {
		return x.Owner
	}
	return 0
}

func (x *ConversationCoreInfo) GetSecOwner() string {
	if x != nil {
		return x.SecOwner
	}
	return ""
}

type GetConversationCoreInfoResponseBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConversationCoreInfo *ConversationCoreInfo `protobuf:"bytes,1,opt,name=conversation_core_info,json=conversationCoreInfo,proto3" json:"conversation_core_info,omitempty"`
}

func (x *GetConversationCoreInfoResponseBody) Reset() {
	*x = GetConversationCoreInfoResponseBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConversationCoreInfoResponseBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConversationCoreInfoResponseBody) ProtoMessage() {}

func (x *GetConversationCoreInfoResponseBody) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConversationCoreInfoResponseBody.ProtoReflect.Descriptor instead.
func (*GetConversationCoreInfoResponseBody) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{98}
}

func (x *GetConversationCoreInfoResponseBody) GetConversationCoreInfo() *ConversationCoreInfo {
	if x != nil {
		return x.ConversationCoreInfo
	}
	return nil
}

type SetConversationCoreInfoResponseBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConversationCoreInfo *ConversationCoreInfo `protobuf:"bytes,1,opt,name=conversation_core_info,json=conversationCoreInfo,proto3" json:"conversation_core_info,omitempty"`
	Status               int32                 `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
	ExtraInfo            string                `protobuf:"bytes,3,opt,name=extra_info,json=extraInfo,proto3" json:"extra_info,omitempty"`
	CheckCode            int64                 `protobuf:"varint,4,opt,name=check_code,json=checkCode,proto3" json:"check_code,omitempty"`
	CheckMessage         string                `protobuf:"bytes,5,opt,name=check_message,json=checkMessage,proto3" json:"check_message,omitempty"`
}

func (x *SetConversationCoreInfoResponseBody) Reset() {
	*x = SetConversationCoreInfoResponseBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetConversationCoreInfoResponseBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetConversationCoreInfoResponseBody) ProtoMessage() {}

func (x *SetConversationCoreInfoResponseBody) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetConversationCoreInfoResponseBody.ProtoReflect.Descriptor instead.
func (*SetConversationCoreInfoResponseBody) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{99}
}

func (x *SetConversationCoreInfoResponseBody) GetConversationCoreInfo() *ConversationCoreInfo {
	if x != nil {
		return x.ConversationCoreInfo
	}
	return nil
}

func (x *SetConversationCoreInfoResponseBody) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *SetConversationCoreInfoResponseBody) GetExtraInfo() string {
	if x != nil {
		return x.ExtraInfo
	}
	return ""
}

func (x *SetConversationCoreInfoResponseBody) GetCheckCode() int64 {
	if x != nil {
		return x.CheckCode
	}
	return 0
}

func (x *SetConversationCoreInfoResponseBody) GetCheckMessage() string {
	if x != nil {
		return x.CheckMessage
	}
	return ""
}

type UpsertConversationCoreExtInfoResponseBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CoreInfo     *ConversationCoreInfo `protobuf:"bytes,1,opt,name=core_info,json=coreInfo,proto3" json:"core_info,omitempty"`
	Status       int32                 `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
	CheckCode    int64                 `protobuf:"varint,3,opt,name=check_code,json=checkCode,proto3" json:"check_code,omitempty"`
	CheckMessage string                `protobuf:"bytes,4,opt,name=check_message,json=checkMessage,proto3" json:"check_message,omitempty"`
	ExtraInfo    string                `protobuf:"bytes,5,opt,name=extra_info,json=extraInfo,proto3" json:"extra_info,omitempty"`
}

func (x *UpsertConversationCoreExtInfoResponseBody) Reset() {
	*x = UpsertConversationCoreExtInfoResponseBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertConversationCoreExtInfoResponseBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertConversationCoreExtInfoResponseBody) ProtoMessage() {}

func (x *UpsertConversationCoreExtInfoResponseBody) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertConversationCoreExtInfoResponseBody.ProtoReflect.Descriptor instead.
func (*UpsertConversationCoreExtInfoResponseBody) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{100}
}

func (x *UpsertConversationCoreExtInfoResponseBody) GetCoreInfo() *ConversationCoreInfo {
	if x != nil {
		return x.CoreInfo
	}
	return nil
}

func (x *UpsertConversationCoreExtInfoResponseBody) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *UpsertConversationCoreExtInfoResponseBody) GetCheckCode() int64 {
	if x != nil {
		return x.CheckCode
	}
	return 0
}

func (x *UpsertConversationCoreExtInfoResponseBody) GetCheckMessage() string {
	if x != nil {
		return x.CheckMessage
	}
	return ""
}

func (x *UpsertConversationCoreExtInfoResponseBody) GetExtraInfo() string {
	if x != nil {
		return x.ExtraInfo
	}
	return ""
}

type ConversationSettingInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConversationId      string            `protobuf:"bytes,1,opt,name=conversation_id,json=conversationId,proto3" json:"conversation_id,omitempty"`
	ConversationShortId int64             `protobuf:"varint,2,opt,name=conversation_short_id,json=conversationShortId,proto3" json:"conversation_short_id,omitempty"`
	ConversationType    int32             `protobuf:"varint,3,opt,name=conversation_type,json=conversationType,proto3" json:"conversation_type,omitempty"`
	MinIndex            int64             `protobuf:"varint,4,opt,name=min_index,json=minIndex,proto3" json:"min_index,omitempty"`
	ReadIndex           int64             `protobuf:"varint,5,opt,name=read_index,json=readIndex,proto3" json:"read_index,omitempty"`
	Mute                int32             `protobuf:"varint,6,opt,name=mute,proto3" json:"mute,omitempty"`
	StickOnTop          int32             `protobuf:"varint,7,opt,name=stick_on_top,json=stickOnTop,proto3" json:"stick_on_top,omitempty"`
	InboxType           int32             `protobuf:"varint,8,opt,name=inbox_type,json=inboxType,proto3" json:"inbox_type,omitempty"`
	Ext                 map[string]string `protobuf:"bytes,9,rep,name=ext,proto3" json:"ext,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	SettingVersion      int64             `protobuf:"varint,10,opt,name=setting_version,json=settingVersion,proto3" json:"setting_version,omitempty"`
	Favorite            int32             `protobuf:"varint,11,opt,name=favorite,proto3" json:"favorite,omitempty"`
	SetTopTime          int64             `protobuf:"varint,12,opt,name=set_top_time,json=setTopTime,proto3" json:"set_top_time,omitempty"`
	SetFavoriteTime     int64             `protobuf:"varint,13,opt,name=set_favorite_time,json=setFavoriteTime,proto3" json:"set_favorite_time,omitempty"`
}

func (x *ConversationSettingInfo) Reset() {
	*x = ConversationSettingInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConversationSettingInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConversationSettingInfo) ProtoMessage() {}

func (x *ConversationSettingInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConversationSettingInfo.ProtoReflect.Descriptor instead.
func (*ConversationSettingInfo) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{101}
}

func (x *ConversationSettingInfo) GetConversationId() string {
	if x != nil {
		return x.ConversationId
	}
	return ""
}

func (x *ConversationSettingInfo) GetConversationShortId() int64 {
	if x != nil {
		return x.ConversationShortId
	}
	return 0
}

func (x *ConversationSettingInfo) GetConversationType() int32 {
	if x != nil {
		return x.ConversationType
	}
	return 0
}

func (x *ConversationSettingInfo) GetMinIndex() int64 {
	if x != nil {
		return x.MinIndex
	}
	return 0
}

func (x *ConversationSettingInfo) GetReadIndex() int64 {
	if x != nil {
		return x.ReadIndex
	}
	return 0
}

func (x *ConversationSettingInfo) GetMute() int32 {
	if x != nil {
		return x.Mute
	}
	return 0
}

func (x *ConversationSettingInfo) GetStickOnTop() int32 {
	if x != nil {
		return x.StickOnTop
	}
	return 0
}

func (x *ConversationSettingInfo) GetInboxType() int32 {
	if x != nil {
		return x.InboxType
	}
	return 0
}

func (x *ConversationSettingInfo) GetExt() map[string]string {
	if x != nil {
		return x.Ext
	}
	return nil
}

func (x *ConversationSettingInfo) GetSettingVersion() int64 {
	if x != nil {
		return x.SettingVersion
	}
	return 0
}

func (x *ConversationSettingInfo) GetFavorite() int32 {
	if x != nil {
		return x.Favorite
	}
	return 0
}

func (x *ConversationSettingInfo) GetSetTopTime() int64 {
	if x != nil {
		return x.SetTopTime
	}
	return 0
}

func (x *ConversationSettingInfo) GetSetFavoriteTime() int64 {
	if x != nil {
		return x.SetFavoriteTime
	}
	return 0
}

type SetConversationSettingInfoResponseBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SettingInfo  *ConversationSettingInfo `protobuf:"bytes,1,opt,name=setting_info,json=settingInfo,proto3" json:"setting_info,omitempty"`
	Status       int32                    `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
	CheckCode    int64                    `protobuf:"varint,3,opt,name=check_code,json=checkCode,proto3" json:"check_code,omitempty"`
	CheckMessage string                   `protobuf:"bytes,4,opt,name=check_message,json=checkMessage,proto3" json:"check_message,omitempty"`
	ExtraInfo    string                   `protobuf:"bytes,5,opt,name=extra_info,json=extraInfo,proto3" json:"extra_info,omitempty"`
}

func (x *SetConversationSettingInfoResponseBody) Reset() {
	*x = SetConversationSettingInfoResponseBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetConversationSettingInfoResponseBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetConversationSettingInfoResponseBody) ProtoMessage() {}

func (x *SetConversationSettingInfoResponseBody) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetConversationSettingInfoResponseBody.ProtoReflect.Descriptor instead.
func (*SetConversationSettingInfoResponseBody) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{102}
}

func (x *SetConversationSettingInfoResponseBody) GetSettingInfo() *ConversationSettingInfo {
	if x != nil {
		return x.SettingInfo
	}
	return nil
}

func (x *SetConversationSettingInfoResponseBody) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *SetConversationSettingInfoResponseBody) GetCheckCode() int64 {
	if x != nil {
		return x.CheckCode
	}
	return 0
}

func (x *SetConversationSettingInfoResponseBody) GetCheckMessage() string {
	if x != nil {
		return x.CheckMessage
	}
	return ""
}

func (x *SetConversationSettingInfoResponseBody) GetExtraInfo() string {
	if x != nil {
		return x.ExtraInfo
	}
	return ""
}

type UpsertConversationSettingExtInfoResponseBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SettingInfo  *ConversationSettingInfo `protobuf:"bytes,1,opt,name=setting_info,json=settingInfo,proto3" json:"setting_info,omitempty"`
	Status       int32                    `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
	CheckCode    int64                    `protobuf:"varint,3,opt,name=check_code,json=checkCode,proto3" json:"check_code,omitempty"`
	CheckMessage string                   `protobuf:"bytes,4,opt,name=check_message,json=checkMessage,proto3" json:"check_message,omitempty"`
	ExtraInfo    string                   `protobuf:"bytes,5,opt,name=extra_info,json=extraInfo,proto3" json:"extra_info,omitempty"`
}

func (x *UpsertConversationSettingExtInfoResponseBody) Reset() {
	*x = UpsertConversationSettingExtInfoResponseBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertConversationSettingExtInfoResponseBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertConversationSettingExtInfoResponseBody) ProtoMessage() {}

func (x *UpsertConversationSettingExtInfoResponseBody) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertConversationSettingExtInfoResponseBody.ProtoReflect.Descriptor instead.
func (*UpsertConversationSettingExtInfoResponseBody) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{103}
}

func (x *UpsertConversationSettingExtInfoResponseBody) GetSettingInfo() *ConversationSettingInfo {
	if x != nil {
		return x.SettingInfo
	}
	return nil
}

func (x *UpsertConversationSettingExtInfoResponseBody) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *UpsertConversationSettingExtInfoResponseBody) GetCheckCode() int64 {
	if x != nil {
		return x.CheckCode
	}
	return 0
}

func (x *UpsertConversationSettingExtInfoResponseBody) GetCheckMessage() string {
	if x != nil {
		return x.CheckMessage
	}
	return ""
}

func (x *UpsertConversationSettingExtInfoResponseBody) GetExtraInfo() string {
	if x != nil {
		return x.ExtraInfo
	}
	return ""
}

type GetStrangerMessagesResponseBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Messages []*MessageBody `protobuf:"bytes,3,rep,name=messages,proto3" json:"messages,omitempty"`
}

func (x *GetStrangerMessagesResponseBody) Reset() {
	*x = GetStrangerMessagesResponseBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStrangerMessagesResponseBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStrangerMessagesResponseBody) ProtoMessage() {}

func (x *GetStrangerMessagesResponseBody) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStrangerMessagesResponseBody.ProtoReflect.Descriptor instead.
func (*GetStrangerMessagesResponseBody) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{104}
}

func (x *GetStrangerMessagesResponseBody) GetMessages() []*MessageBody {
	if x != nil {
		return x.Messages
	}
	return nil
}

type GetUploadTokenResponseBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessKey string   `protobuf:"bytes,1,opt,name=access_key,json=accessKey,proto3" json:"access_key,omitempty"`
	Hosts     []string `protobuf:"bytes,2,rep,name=hosts,proto3" json:"hosts,omitempty"`
	Token     string   `protobuf:"bytes,3,opt,name=token,proto3" json:"token,omitempty"`
	TokenType int32    `protobuf:"varint,4,opt,name=token_type,json=tokenType,proto3" json:"token_type,omitempty"`
}

func (x *GetUploadTokenResponseBody) Reset() {
	*x = GetUploadTokenResponseBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUploadTokenResponseBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUploadTokenResponseBody) ProtoMessage() {}

func (x *GetUploadTokenResponseBody) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUploadTokenResponseBody.ProtoReflect.Descriptor instead.
func (*GetUploadTokenResponseBody) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{105}
}

func (x *GetUploadTokenResponseBody) GetAccessKey() string {
	if x != nil {
		return x.AccessKey
	}
	return ""
}

func (x *GetUploadTokenResponseBody) GetHosts() []string {
	if x != nil {
		return x.Hosts
	}
	return nil
}

func (x *GetUploadTokenResponseBody) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *GetUploadTokenResponseBody) GetTokenType() int32 {
	if x != nil {
		return x.TokenType
	}
	return 0
}

type ImgOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tplv   string   `protobuf:"bytes,1,opt,name=tplv,proto3" json:"tplv,omitempty"`
	Params []string `protobuf:"bytes,2,rep,name=params,proto3" json:"params,omitempty"`
	Format string   `protobuf:"bytes,3,opt,name=format,proto3" json:"format,omitempty"`
	Urls   []string `protobuf:"bytes,100,rep,name=urls,proto3" json:"urls,omitempty"`
}

func (x *ImgOption) Reset() {
	*x = ImgOption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImgOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImgOption) ProtoMessage() {}

func (x *ImgOption) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImgOption.ProtoReflect.Descriptor instead.
func (*ImgOption) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{106}
}

func (x *ImgOption) GetTplv() string {
	if x != nil {
		return x.Tplv
	}
	return ""
}

func (x *ImgOption) GetParams() []string {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *ImgOption) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *ImgOption) GetUrls() []string {
	if x != nil {
		return x.Urls
	}
	return nil
}

type VideoOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vid       string   `protobuf:"bytes,1,opt,name=vid,proto3" json:"vid,omitempty"`
	CoverUri  string   `protobuf:"bytes,2,opt,name=cover_uri,json=coverUri,proto3" json:"cover_uri,omitempty"`
	Urls      []string `protobuf:"bytes,100,rep,name=urls,proto3" json:"urls,omitempty"`
	CoverUrls []string `protobuf:"bytes,101,rep,name=cover_urls,json=coverUrls,proto3" json:"cover_urls,omitempty"`
}

func (x *VideoOption) Reset() {
	*x = VideoOption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoOption) ProtoMessage() {}

func (x *VideoOption) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoOption.ProtoReflect.Descriptor instead.
func (*VideoOption) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{107}
}

func (x *VideoOption) GetVid() string {
	if x != nil {
		return x.Vid
	}
	return ""
}

func (x *VideoOption) GetCoverUri() string {
	if x != nil {
		return x.CoverUri
	}
	return ""
}

func (x *VideoOption) GetUrls() []string {
	if x != nil {
		return x.Urls
	}
	return nil
}

func (x *VideoOption) GetCoverUrls() []string {
	if x != nil {
		return x.CoverUrls
	}
	return nil
}

type AudioOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vid  string   `protobuf:"bytes,1,opt,name=vid,proto3" json:"vid,omitempty"`
	Urls []string `protobuf:"bytes,100,rep,name=urls,proto3" json:"urls,omitempty"`
}

func (x *AudioOption) Reset() {
	*x = AudioOption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AudioOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AudioOption) ProtoMessage() {}

func (x *AudioOption) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AudioOption.ProtoReflect.Descriptor instead.
func (*AudioOption) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{108}
}

func (x *AudioOption) GetVid() string {
	if x != nil {
		return x.Vid
	}
	return ""
}

func (x *AudioOption) GetUrls() []string {
	if x != nil {
		return x.Urls
	}
	return nil
}

type FileOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Urls []string `protobuf:"bytes,300,rep,name=urls,proto3" json:"urls,omitempty"`
}

func (x *FileOption) Reset() {
	*x = FileOption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileOption) ProtoMessage() {}

func (x *FileOption) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileOption.ProtoReflect.Descriptor instead.
func (*FileOption) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{109}
}

func (x *FileOption) GetUrls() []string {
	if x != nil {
		return x.Urls
	}
	return nil
}

type GetMediaUrlsResponseBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uri           string         `protobuf:"bytes,1,opt,name=uri,proto3" json:"uri,omitempty"`
	MediaType     int32          `protobuf:"varint,2,opt,name=media_type,json=mediaType,proto3" json:"media_type,omitempty"`
	ImgOptions    []*ImgOption   `protobuf:"bytes,3,rep,name=img_options,json=imgOptions,proto3" json:"img_options,omitempty"`
	VideoOptions  []*VideoOption `protobuf:"bytes,4,rep,name=video_options,json=videoOptions,proto3" json:"video_options,omitempty"`
	AudioOptions  []*AudioOption `protobuf:"bytes,5,rep,name=audio_options,json=audioOptions,proto3" json:"audio_options,omitempty"`
	FileOptions   []*FileOption  `protobuf:"bytes,6,rep,name=file_options,json=fileOptions,proto3" json:"file_options,omitempty"`
	EncryptedUrls []string       `protobuf:"bytes,7,rep,name=encrypted_urls,json=encryptedUrls,proto3" json:"encrypted_urls,omitempty"`
}

func (x *GetMediaUrlsResponseBody) Reset() {
	*x = GetMediaUrlsResponseBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMediaUrlsResponseBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMediaUrlsResponseBody) ProtoMessage() {}

func (x *GetMediaUrlsResponseBody) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMediaUrlsResponseBody.ProtoReflect.Descriptor instead.
func (*GetMediaUrlsResponseBody) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{110}
}

func (x *GetMediaUrlsResponseBody) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

func (x *GetMediaUrlsResponseBody) GetMediaType() int32 {
	if x != nil {
		return x.MediaType
	}
	return 0
}

func (x *GetMediaUrlsResponseBody) GetImgOptions() []*ImgOption {
	if x != nil {
		return x.ImgOptions
	}
	return nil
}

func (x *GetMediaUrlsResponseBody) GetVideoOptions() []*VideoOption {
	if x != nil {
		return x.VideoOptions
	}
	return nil
}

func (x *GetMediaUrlsResponseBody) GetAudioOptions() []*AudioOption {
	if x != nil {
		return x.AudioOptions
	}
	return nil
}

func (x *GetMediaUrlsResponseBody) GetFileOptions() []*FileOption {
	if x != nil {
		return x.FileOptions
	}
	return nil
}

func (x *GetMediaUrlsResponseBody) GetEncryptedUrls() []string {
	if x != nil {
		return x.EncryptedUrls
	}
	return nil
}

type GetTicketResponseBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ticket string `protobuf:"bytes,1,opt,name=ticket,proto3" json:"ticket,omitempty"`
}

func (x *GetTicketResponseBody) Reset() {
	*x = GetTicketResponseBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTicketResponseBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTicketResponseBody) ProtoMessage() {}

func (x *GetTicketResponseBody) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTicketResponseBody.ProtoReflect.Descriptor instead.
func (*GetTicketResponseBody) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{111}
}

func (x *GetTicketResponseBody) GetTicket() string {
	if x != nil {
		return x.Ticket
	}
	return ""
}

type ConversationInfoV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConversationId          string                   `protobuf:"bytes,1,opt,name=conversation_id,json=conversationId,proto3" json:"conversation_id,omitempty"`
	ConversationShortId     int64                    `protobuf:"varint,2,opt,name=conversation_short_id,json=conversationShortId,proto3" json:"conversation_short_id,omitempty"`
	ConversationType        int32                    `protobuf:"varint,3,opt,name=conversation_type,json=conversationType,proto3" json:"conversation_type,omitempty"`
	Ticket                  string                   `protobuf:"bytes,4,opt,name=ticket,proto3" json:"ticket,omitempty"`
	FirstPageParticipants   *ParticipantsPage        `protobuf:"bytes,6,opt,name=first_page_participants,json=firstPageParticipants,proto3" json:"first_page_participants,omitempty"`
	ParticipantsCount       int32                    `protobuf:"varint,7,opt,name=participants_count,json=participantsCount,proto3" json:"participants_count,omitempty"`
	IsParticipant           bool                     `protobuf:"varint,8,opt,name=is_participant,json=isParticipant,proto3" json:"is_participant,omitempty"`
	InboxType               int32                    `protobuf:"varint,9,opt,name=inbox_type,json=inboxType,proto3" json:"inbox_type,omitempty"`
	UserInfo                *Participant             `protobuf:"bytes,20,opt,name=user_info,json=userInfo,proto3" json:"user_info,omitempty"`
	ConversationCoreInfo    *ConversationCoreInfo    `protobuf:"bytes,50,opt,name=conversation_core_info,json=conversationCoreInfo,proto3" json:"conversation_core_info,omitempty"`
	ConversationSettingInfo *ConversationSettingInfo `protobuf:"bytes,51,opt,name=conversation_setting_info,json=conversationSettingInfo,proto3" json:"conversation_setting_info,omitempty"`
}

func (x *ConversationInfoV2) Reset() {
	*x = ConversationInfoV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConversationInfoV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConversationInfoV2) ProtoMessage() {}

func (x *ConversationInfoV2) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConversationInfoV2.ProtoReflect.Descriptor instead.
func (*ConversationInfoV2) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{112}
}

func (x *ConversationInfoV2) GetConversationId() string {
	if x != nil {
		return x.ConversationId
	}
	return ""
}

func (x *ConversationInfoV2) GetConversationShortId() int64 {
	if x != nil {
		return x.ConversationShortId
	}
	return 0
}

func (x *ConversationInfoV2) GetConversationType() int32 {
	if x != nil {
		return x.ConversationType
	}
	return 0
}

func (x *ConversationInfoV2) GetTicket() string {
	if x != nil {
		return x.Ticket
	}
	return ""
}

func (x *ConversationInfoV2) GetFirstPageParticipants() *ParticipantsPage {
	if x != nil {
		return x.FirstPageParticipants
	}
	return nil
}

func (x *ConversationInfoV2) GetParticipantsCount() int32 {
	if x != nil {
		return x.ParticipantsCount
	}
	return 0
}

func (x *ConversationInfoV2) GetIsParticipant() bool {
	if x != nil {
		return x.IsParticipant
	}
	return false
}

func (x *ConversationInfoV2) GetInboxType() int32 {
	if x != nil {
		return x.InboxType
	}
	return 0
}

func (x *ConversationInfoV2) GetUserInfo() *Participant {
	if x != nil {
		return x.UserInfo
	}
	return nil
}

func (x *ConversationInfoV2) GetConversationCoreInfo() *ConversationCoreInfo {
	if x != nil {
		return x.ConversationCoreInfo
	}
	return nil
}

func (x *ConversationInfoV2) GetConversationSettingInfo() *ConversationSettingInfo {
	if x != nil {
		return x.ConversationSettingInfo
	}
	return nil
}

type GetUserConversationListResponseBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*ConversationInfoV2 `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	HasMore    bool                  `protobuf:"varint,2,opt,name=has_more,json=hasMore,proto3" json:"has_more,omitempty"`
	NextCursor int64                 `protobuf:"varint,3,opt,name=next_cursor,json=nextCursor,proto3" json:"next_cursor,omitempty"`
}

func (x *GetUserConversationListResponseBody) Reset() {
	*x = GetUserConversationListResponseBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserConversationListResponseBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserConversationListResponseBody) ProtoMessage() {}

func (x *GetUserConversationListResponseBody) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserConversationListResponseBody.ProtoReflect.Descriptor instead.
func (*GetUserConversationListResponseBody) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{113}
}

func (x *GetUserConversationListResponseBody) GetList() []*ConversationInfoV2 {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *GetUserConversationListResponseBody) GetHasMore() bool {
	if x != nil {
		return x.HasMore
	}
	return false
}

func (x *GetUserConversationListResponseBody) GetNextCursor() int64 {
	if x != nil {
		return x.NextCursor
	}
	return 0
}

type BroadcastSendMessageResponseBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerMessageId int64  `protobuf:"varint,1,opt,name=server_message_id,json=serverMessageId,proto3" json:"server_message_id,omitempty"`
	ExtraInfo       string `protobuf:"bytes,2,opt,name=extra_info,json=extraInfo,proto3" json:"extra_info,omitempty"`
	Status          int32  `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`
	ClientMessageId string `protobuf:"bytes,4,opt,name=client_message_id,json=clientMessageId,proto3" json:"client_message_id,omitempty"`
	CheckCode       int64  `protobuf:"varint,5,opt,name=check_code,json=checkCode,proto3" json:"check_code,omitempty"`
	CheckMessage    string `protobuf:"bytes,6,opt,name=check_message,json=checkMessage,proto3" json:"check_message,omitempty"`
}

func (x *BroadcastSendMessageResponseBody) Reset() {
	*x = BroadcastSendMessageResponseBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BroadcastSendMessageResponseBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BroadcastSendMessageResponseBody) ProtoMessage() {}

func (x *BroadcastSendMessageResponseBody) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BroadcastSendMessageResponseBody.ProtoReflect.Descriptor instead.
func (*BroadcastSendMessageResponseBody) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{114}
}

func (x *BroadcastSendMessageResponseBody) GetServerMessageId() int64 {
	if x != nil {
		return x.ServerMessageId
	}
	return 0
}

func (x *BroadcastSendMessageResponseBody) GetExtraInfo() string {
	if x != nil {
		return x.ExtraInfo
	}
	return ""
}

func (x *BroadcastSendMessageResponseBody) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *BroadcastSendMessageResponseBody) GetClientMessageId() string {
	if x != nil {
		return x.ClientMessageId
	}
	return ""
}

func (x *BroadcastSendMessageResponseBody) GetCheckCode() int64 {
	if x != nil {
		return x.CheckCode
	}
	return 0
}

func (x *BroadcastSendMessageResponseBody) GetCheckMessage() string {
	if x != nil {
		return x.CheckMessage
	}
	return ""
}

type BroadcastRecvMessageResponseBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Messages   []*MessageBody `protobuf:"bytes,1,rep,name=messages,proto3" json:"messages,omitempty"`
	HasMore    bool           `protobuf:"varint,2,opt,name=has_more,json=hasMore,proto3" json:"has_more,omitempty"`
	NextCursor int64          `protobuf:"varint,3,opt,name=next_cursor,json=nextCursor,proto3" json:"next_cursor,omitempty"`
}

func (x *BroadcastRecvMessageResponseBody) Reset() {
	*x = BroadcastRecvMessageResponseBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BroadcastRecvMessageResponseBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BroadcastRecvMessageResponseBody) ProtoMessage() {}

func (x *BroadcastRecvMessageResponseBody) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BroadcastRecvMessageResponseBody.ProtoReflect.Descriptor instead.
func (*BroadcastRecvMessageResponseBody) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{115}
}

func (x *BroadcastRecvMessageResponseBody) GetMessages() []*MessageBody {
	if x != nil {
		return x.Messages
	}
	return nil
}

func (x *BroadcastRecvMessageResponseBody) GetHasMore() bool {
	if x != nil {
		return x.HasMore
	}
	return false
}

func (x *BroadcastRecvMessageResponseBody) GetNextCursor() int64 {
	if x != nil {
		return x.NextCursor
	}
	return 0
}

type BroadcastUserInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConversationShortId int64 `protobuf:"varint,1,opt,name=conversation_short_id,json=conversationShortId,proto3" json:"conversation_short_id,omitempty"`
	Counter             int32 `protobuf:"varint,2,opt,name=counter,proto3" json:"counter,omitempty"`
	ConversationType    int32 `protobuf:"varint,3,opt,name=conversation_type,json=conversationType,proto3" json:"conversation_type,omitempty"`
}

func (x *BroadcastUserInfo) Reset() {
	*x = BroadcastUserInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BroadcastUserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BroadcastUserInfo) ProtoMessage() {}

func (x *BroadcastUserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BroadcastUserInfo.ProtoReflect.Descriptor instead.
func (*BroadcastUserInfo) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{116}
}

func (x *BroadcastUserInfo) GetConversationShortId() int64 {
	if x != nil {
		return x.ConversationShortId
	}
	return 0
}

func (x *BroadcastUserInfo) GetCounter() int32 {
	if x != nil {
		return x.Counter
	}
	return 0
}

func (x *BroadcastUserInfo) GetConversationType() int32 {
	if x != nil {
		return x.ConversationType
	}
	return 0
}

type BroadcastUserCounterResponseBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*BroadcastUserInfo `protobuf:"bytes,1,rep,name=infos,proto3" json:"infos,omitempty"`
}

func (x *BroadcastUserCounterResponseBody) Reset() {
	*x = BroadcastUserCounterResponseBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BroadcastUserCounterResponseBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BroadcastUserCounterResponseBody) ProtoMessage() {}

func (x *BroadcastUserCounterResponseBody) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BroadcastUserCounterResponseBody.ProtoReflect.Descriptor instead.
func (*BroadcastUserCounterResponseBody) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{117}
}

func (x *BroadcastUserCounterResponseBody) GetInfos() []*BroadcastUserInfo {
	if x != nil {
		return x.Infos
	}
	return nil
}

type VoipInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId        int64  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	DeviceId      string `protobuf:"bytes,2,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	ChannelId     string `protobuf:"bytes,3,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	Token         string `protobuf:"bytes,4,opt,name=token,proto3" json:"token,omitempty"`
	Status        int32  `protobuf:"varint,5,opt,name=status,proto3" json:"status,omitempty"`
	CallerId      int64  `protobuf:"varint,6,opt,name=caller_id,json=callerId,proto3" json:"caller_id,omitempty"`
	CreatedTimeMs int64  `protobuf:"varint,7,opt,name=created_time_ms,json=createdTimeMs,proto3" json:"created_time_ms,omitempty"`
	UpdatedTimeMs int64  `protobuf:"varint,8,opt,name=updated_time_ms,json=updatedTimeMs,proto3" json:"updated_time_ms,omitempty"`
	ConShortId    int64  `protobuf:"varint,9,opt,name=con_short_id,json=conShortId,proto3" json:"con_short_id,omitempty"`
	VType         int32  `protobuf:"varint,10,opt,name=v_type,json=vType,proto3" json:"v_type,omitempty"`
	SrvMsgId      int64  `protobuf:"varint,11,opt,name=srv_msg_id,json=srvMsgId,proto3" json:"srv_msg_id,omitempty"`
}

func (x *VoipInfo) Reset() {
	*x = VoipInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VoipInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VoipInfo) ProtoMessage() {}

func (x *VoipInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VoipInfo.ProtoReflect.Descriptor instead.
func (*VoipInfo) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{118}
}

func (x *VoipInfo) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *VoipInfo) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *VoipInfo) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *VoipInfo) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *VoipInfo) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *VoipInfo) GetCallerId() int64 {
	if x != nil {
		return x.CallerId
	}
	return 0
}

func (x *VoipInfo) GetCreatedTimeMs() int64 {
	if x != nil {
		return x.CreatedTimeMs
	}
	return 0
}

func (x *VoipInfo) GetUpdatedTimeMs() int64 {
	if x != nil {
		return x.UpdatedTimeMs
	}
	return 0
}

func (x *VoipInfo) GetConShortId() int64 {
	if x != nil {
		return x.ConShortId
	}
	return 0
}

func (x *VoipInfo) GetVType() int32 {
	if x != nil {
		return x.VType
	}
	return 0
}

func (x *VoipInfo) GetSrvMsgId() int64 {
	if x != nil {
		return x.SrvMsgId
	}
	return 0
}

type CreateVoipResponseBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info       *VoipInfo `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
	StatusCode int32     `protobuf:"varint,2,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	VoipMode   int32     `protobuf:"varint,3,opt,name=voip_mode,json=voipMode,proto3" json:"voip_mode,omitempty"`
}

func (x *CreateVoipResponseBody) Reset() {
	*x = CreateVoipResponseBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateVoipResponseBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateVoipResponseBody) ProtoMessage() {}

func (x *CreateVoipResponseBody) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateVoipResponseBody.ProtoReflect.Descriptor instead.
func (*CreateVoipResponseBody) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{119}
}

func (x *CreateVoipResponseBody) GetInfo() *VoipInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *CreateVoipResponseBody) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *CreateVoipResponseBody) GetVoipMode() int32 {
	if x != nil {
		return x.VoipMode
	}
	return 0
}

type CallVoipResponseBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info         *VoipInfo `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
	CalleeIds    []int64   `protobuf:"varint,2,rep,packed,name=callee_ids,json=calleeIds,proto3" json:"callee_ids,omitempty"`
	Status       int32     `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`
	ExtraInfo    string    `protobuf:"bytes,4,opt,name=extra_info,json=extraInfo,proto3" json:"extra_info,omitempty"`
	CheckCode    int64     `protobuf:"varint,5,opt,name=check_code,json=checkCode,proto3" json:"check_code,omitempty"`
	CheckMessage string    `protobuf:"bytes,6,opt,name=check_message,json=checkMessage,proto3" json:"check_message,omitempty"`
	RefChannelId string    `protobuf:"bytes,7,opt,name=ref_channel_id,json=refChannelId,proto3" json:"ref_channel_id,omitempty"`
	VoipMode     int32     `protobuf:"varint,8,opt,name=voip_mode,json=voipMode,proto3" json:"voip_mode,omitempty"`
}

func (x *CallVoipResponseBody) Reset() {
	*x = CallVoipResponseBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallVoipResponseBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallVoipResponseBody) ProtoMessage() {}

func (x *CallVoipResponseBody) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallVoipResponseBody.ProtoReflect.Descriptor instead.
func (*CallVoipResponseBody) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{120}
}

func (x *CallVoipResponseBody) GetInfo() *VoipInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *CallVoipResponseBody) GetCalleeIds() []int64 {
	if x != nil {
		return x.CalleeIds
	}
	return nil
}

func (x *CallVoipResponseBody) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *CallVoipResponseBody) GetExtraInfo() string {
	if x != nil {
		return x.ExtraInfo
	}
	return ""
}

func (x *CallVoipResponseBody) GetCheckCode() int64 {
	if x != nil {
		return x.CheckCode
	}
	return 0
}

func (x *CallVoipResponseBody) GetCheckMessage() string {
	if x != nil {
		return x.CheckMessage
	}
	return ""
}

func (x *CallVoipResponseBody) GetRefChannelId() string {
	if x != nil {
		return x.RefChannelId
	}
	return ""
}

func (x *CallVoipResponseBody) GetVoipMode() int32 {
	if x != nil {
		return x.VoipMode
	}
	return 0
}

type UpdateVoipResponseBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info       *VoipInfo `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
	StatusCode int32     `protobuf:"varint,2,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	VoipMode   int32     `protobuf:"varint,3,opt,name=voip_mode,json=voipMode,proto3" json:"voip_mode,omitempty"`
	Callees    []int64   `protobuf:"varint,4,rep,packed,name=callees,proto3" json:"callees,omitempty"`
}

func (x *UpdateVoipResponseBody) Reset() {
	*x = UpdateVoipResponseBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateVoipResponseBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateVoipResponseBody) ProtoMessage() {}

func (x *UpdateVoipResponseBody) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateVoipResponseBody.ProtoReflect.Descriptor instead.
func (*UpdateVoipResponseBody) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{121}
}

func (x *UpdateVoipResponseBody) GetInfo() *VoipInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *UpdateVoipResponseBody) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *UpdateVoipResponseBody) GetVoipMode() int32 {
	if x != nil {
		return x.VoipMode
	}
	return 0
}

func (x *UpdateVoipResponseBody) GetCallees() []int64 {
	if x != nil {
		return x.Callees
	}
	return nil
}

type Profile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NickName      string `protobuf:"bytes,1,opt,name=nick_name,json=nickName,proto3" json:"nick_name,omitempty"`
	Protrait      string `protobuf:"bytes,2,opt,name=protrait,proto3" json:"protrait,omitempty"`
	BasicExtInfo  string `protobuf:"bytes,3,opt,name=basic_ext_info,json=basicExtInfo,proto3" json:"basic_ext_info,omitempty"`
	DetailExtInfo string `protobuf:"bytes,4,opt,name=detail_ext_info,json=detailExtInfo,proto3" json:"detail_ext_info,omitempty"`
}

func (x *Profile) Reset() {
	*x = Profile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Profile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Profile) ProtoMessage() {}

func (x *Profile) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Profile.ProtoReflect.Descriptor instead.
func (*Profile) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{122}
}

func (x *Profile) GetNickName() string {
	if x != nil {
		return x.NickName
	}
	return ""
}

func (x *Profile) GetProtrait() string {
	if x != nil {
		return x.Protrait
	}
	return ""
}

func (x *Profile) GetBasicExtInfo() string {
	if x != nil {
		return x.BasicExtInfo
	}
	return ""
}

func (x *Profile) GetDetailExtInfo() string {
	if x != nil {
		return x.DetailExtInfo
	}
	return ""
}

type ProfileGetInfoResponseBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Profile *Profile `protobuf:"bytes,1,opt,name=profile,proto3" json:"profile,omitempty"`
}

func (x *ProfileGetInfoResponseBody) Reset() {
	*x = ProfileGetInfoResponseBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProfileGetInfoResponseBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfileGetInfoResponseBody) ProtoMessage() {}

func (x *ProfileGetInfoResponseBody) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProfileGetInfoResponseBody.ProtoReflect.Descriptor instead.
func (*ProfileGetInfoResponseBody) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{123}
}

func (x *ProfileGetInfoResponseBody) GetProfile() *Profile {
	if x != nil {
		return x.Profile
	}
	return nil
}

type Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConfName  string `protobuf:"bytes,1,opt,name=conf_name,json=confName,proto3" json:"conf_name,omitempty"`
	ConfValue string `protobuf:"bytes,2,opt,name=conf_value,json=confValue,proto3" json:"conf_value,omitempty"`
}

func (x *Config) Reset() {
	*x = Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config) ProtoMessage() {}

func (x *Config) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config.ProtoReflect.Descriptor instead.
func (*Config) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{124}
}

func (x *Config) GetConfName() string {
	if x != nil {
		return x.ConfName
	}
	return ""
}

func (x *Config) GetConfValue() string {
	if x != nil {
		return x.ConfValue
	}
	return ""
}

type GetConfigsResponseBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version int32     `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	Configs []*Config `protobuf:"bytes,2,rep,name=configs,proto3" json:"configs,omitempty"`
}

func (x *GetConfigsResponseBody) Reset() {
	*x = GetConfigsResponseBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConfigsResponseBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConfigsResponseBody) ProtoMessage() {}

func (x *GetConfigsResponseBody) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConfigsResponseBody.ProtoReflect.Descriptor instead.
func (*GetConfigsResponseBody) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{125}
}

func (x *GetConfigsResponseBody) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *GetConfigsResponseBody) GetConfigs() []*Config {
	if x != nil {
		return x.Configs
	}
	return nil
}

type UnReadCountReportResponseBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SetTotalStatus bool    `protobuf:"varint,1,opt,name=set_total_status,json=setTotalStatus,proto3" json:"set_total_status,omitempty"`
	FailedConvList []int64 `protobuf:"varint,2,rep,packed,name=failed_conv_list,json=failedConvList,proto3" json:"failed_conv_list,omitempty"`
}

func (x *UnReadCountReportResponseBody) Reset() {
	*x = UnReadCountReportResponseBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnReadCountReportResponseBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnReadCountReportResponseBody) ProtoMessage() {}

func (x *UnReadCountReportResponseBody) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnReadCountReportResponseBody.ProtoReflect.Descriptor instead.
func (*UnReadCountReportResponseBody) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{126}
}

func (x *UnReadCountReportResponseBody) GetSetTotalStatus() bool {
	if x != nil {
		return x.SetTotalStatus
	}
	return false
}

func (x *UnReadCountReportResponseBody) GetFailedConvList() []int64 {
	if x != nil {
		return x.FailedConvList
	}
	return nil
}

type BlockMembersResponseBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FailedMembers []int64 `protobuf:"varint,1,rep,packed,name=failed_members,json=failedMembers,proto3" json:"failed_members,omitempty"`
}

func (x *BlockMembersResponseBody) Reset() {
	*x = BlockMembersResponseBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockMembersResponseBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockMembersResponseBody) ProtoMessage() {}

func (x *BlockMembersResponseBody) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockMembersResponseBody.ProtoReflect.Descriptor instead.
func (*BlockMembersResponseBody) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{127}
}

func (x *BlockMembersResponseBody) GetFailedMembers() []int64 {
	if x != nil {
		return x.FailedMembers
	}
	return nil
}

type GetUnreadCountResponseBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalUnreadCount int64           `protobuf:"varint,1,opt,name=total_unread_count,json=totalUnreadCount,proto3" json:"total_unread_count,omitempty"`
	ConvUnreadCount  map[int64]int64 `protobuf:"bytes,2,rep,name=conv_unread_count,json=convUnreadCount,proto3" json:"conv_unread_count,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	FailedConvList   []int64         `protobuf:"varint,3,rep,packed,name=failed_conv_list,json=failedConvList,proto3" json:"failed_conv_list,omitempty"`
}

func (x *GetUnreadCountResponseBody) Reset() {
	*x = GetUnreadCountResponseBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUnreadCountResponseBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUnreadCountResponseBody) ProtoMessage() {}

func (x *GetUnreadCountResponseBody) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUnreadCountResponseBody.ProtoReflect.Descriptor instead.
func (*GetUnreadCountResponseBody) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{128}
}

func (x *GetUnreadCountResponseBody) GetTotalUnreadCount() int64 {
	if x != nil {
		return x.TotalUnreadCount
	}
	return 0
}

func (x *GetUnreadCountResponseBody) GetConvUnreadCount() map[int64]int64 {
	if x != nil {
		return x.ConvUnreadCount
	}
	return nil
}

func (x *GetUnreadCountResponseBody) GetFailedConvList() []int64 {
	if x != nil {
		return x.FailedConvList
	}
	return nil
}

type BlockUserInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId     int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	CreateTime int64 `protobuf:"varint,2,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
}

func (x *BlockUserInfo) Reset() {
	*x = BlockUserInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockUserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockUserInfo) ProtoMessage() {}

func (x *BlockUserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockUserInfo.ProtoReflect.Descriptor instead.
func (*BlockUserInfo) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{129}
}

func (x *BlockUserInfo) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *BlockUserInfo) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

type GetBlockListResponseBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserInfo   []*BlockUserInfo `protobuf:"bytes,1,rep,name=user_info,json=userInfo,proto3" json:"user_info,omitempty"`
	HasMore    bool             `protobuf:"varint,2,opt,name=has_more,json=hasMore,proto3" json:"has_more,omitempty"`
	NextCursor int64            `protobuf:"varint,3,opt,name=next_cursor,json=nextCursor,proto3" json:"next_cursor,omitempty"`
}

func (x *GetBlockListResponseBody) Reset() {
	*x = GetBlockListResponseBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBlockListResponseBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlockListResponseBody) ProtoMessage() {}

func (x *GetBlockListResponseBody) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlockListResponseBody.ProtoReflect.Descriptor instead.
func (*GetBlockListResponseBody) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{130}
}

func (x *GetBlockListResponseBody) GetUserInfo() []*BlockUserInfo {
	if x != nil {
		return x.UserInfo
	}
	return nil
}

func (x *GetBlockListResponseBody) GetHasMore() bool {
	if x != nil {
		return x.HasMore
	}
	return false
}

func (x *GetBlockListResponseBody) GetNextCursor() int64 {
	if x != nil {
		return x.NextCursor
	}
	return 0
}

type SetBlocklistResponseBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FailedList []int64 `protobuf:"varint,1,rep,packed,name=failed_list,json=failedList,proto3" json:"failed_list,omitempty"`
}

func (x *SetBlocklistResponseBody) Reset() {
	*x = SetBlocklistResponseBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetBlocklistResponseBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetBlocklistResponseBody) ProtoMessage() {}

func (x *SetBlocklistResponseBody) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetBlocklistResponseBody.ProtoReflect.Descriptor instead.
func (*SetBlocklistResponseBody) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{131}
}

func (x *SetBlocklistResponseBody) GetFailedList() []int64 {
	if x != nil {
		return x.FailedList
	}
	return nil
}

type CheckInBlockListResponseBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InBlocklist bool `protobuf:"varint,1,opt,name=in_blocklist,json=inBlocklist,proto3" json:"in_blocklist,omitempty"`
}

func (x *CheckInBlockListResponseBody) Reset() {
	*x = CheckInBlockListResponseBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[132]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckInBlockListResponseBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckInBlockListResponseBody) ProtoMessage() {}

func (x *CheckInBlockListResponseBody) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[132]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckInBlockListResponseBody.ProtoReflect.Descriptor instead.
func (*CheckInBlockListResponseBody) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{132}
}

func (x *CheckInBlockListResponseBody) GetInBlocklist() bool {
	if x != nil {
		return x.InBlocklist
	}
	return false
}

type MarkMessageResponseBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerMessageId int64  `protobuf:"varint,1,opt,name=server_message_id,json=serverMessageId,proto3" json:"server_message_id,omitempty"`
	CheckCode       int64  `protobuf:"varint,2,opt,name=check_code,json=checkCode,proto3" json:"check_code,omitempty"`
	CheckMessage    string `protobuf:"bytes,3,opt,name=check_message,json=checkMessage,proto3" json:"check_message,omitempty"`
	Status          int32  `protobuf:"varint,4,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *MarkMessageResponseBody) Reset() {
	*x = MarkMessageResponseBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[133]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarkMessageResponseBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkMessageResponseBody) ProtoMessage() {}

func (x *MarkMessageResponseBody) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[133]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkMessageResponseBody.ProtoReflect.Descriptor instead.
func (*MarkMessageResponseBody) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{133}
}

func (x *MarkMessageResponseBody) GetServerMessageId() int64 {
	if x != nil {
		return x.ServerMessageId
	}
	return 0
}

func (x *MarkMessageResponseBody) GetCheckCode() int64 {
	if x != nil {
		return x.CheckCode
	}
	return 0
}

func (x *MarkMessageResponseBody) GetCheckMessage() string {
	if x != nil {
		return x.CheckMessage
	}
	return ""
}

func (x *MarkMessageResponseBody) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

type PullMarkMessageResponseBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Messages   []*MessageBody `protobuf:"bytes,1,rep,name=messages,proto3" json:"messages,omitempty"`
	HasMore    bool           `protobuf:"varint,2,opt,name=has_more,json=hasMore,proto3" json:"has_more,omitempty"`
	NextCursor int64          `protobuf:"varint,3,opt,name=next_cursor,json=nextCursor,proto3" json:"next_cursor,omitempty"`
}

func (x *PullMarkMessageResponseBody) Reset() {
	*x = PullMarkMessageResponseBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[134]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PullMarkMessageResponseBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PullMarkMessageResponseBody) ProtoMessage() {}

func (x *PullMarkMessageResponseBody) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[134]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PullMarkMessageResponseBody.ProtoReflect.Descriptor instead.
func (*PullMarkMessageResponseBody) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{134}
}

func (x *PullMarkMessageResponseBody) GetMessages() []*MessageBody {
	if x != nil {
		return x.Messages
	}
	return nil
}

func (x *PullMarkMessageResponseBody) GetHasMore() bool {
	if x != nil {
		return x.HasMore
	}
	return false
}

func (x *PullMarkMessageResponseBody) GetNextCursor() int64 {
	if x != nil {
		return x.NextCursor
	}
	return 0
}

type MarkMsgUnreadCountReportResponseBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SetTotalStatus bool    `protobuf:"varint,1,opt,name=set_total_status,json=setTotalStatus,proto3" json:"set_total_status,omitempty"`
	FailedTagList  []int64 `protobuf:"varint,2,rep,packed,name=failed_tag_list,json=failedTagList,proto3" json:"failed_tag_list,omitempty"`
}

func (x *MarkMsgUnreadCountReportResponseBody) Reset() {
	*x = MarkMsgUnreadCountReportResponseBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[135]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarkMsgUnreadCountReportResponseBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkMsgUnreadCountReportResponseBody) ProtoMessage() {}

func (x *MarkMsgUnreadCountReportResponseBody) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[135]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkMsgUnreadCountReportResponseBody.ProtoReflect.Descriptor instead.
func (*MarkMsgUnreadCountReportResponseBody) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{135}
}

func (x *MarkMsgUnreadCountReportResponseBody) GetSetTotalStatus() bool {
	if x != nil {
		return x.SetTotalStatus
	}
	return false
}

func (x *MarkMsgUnreadCountReportResponseBody) GetFailedTagList() []int64 {
	if x != nil {
		return x.FailedTagList
	}
	return nil
}

type MarkMsgGetUnreadCountResponseBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalCount     int64           `protobuf:"varint,1,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	TagUnreadCount map[int64]int64 `protobuf:"bytes,2,rep,name=tag_unread_count,json=tagUnreadCount,proto3" json:"tag_unread_count,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	FailedTagList  []int64         `protobuf:"varint,3,rep,packed,name=failed_tag_list,json=failedTagList,proto3" json:"failed_tag_list,omitempty"`
}

func (x *MarkMsgGetUnreadCountResponseBody) Reset() {
	*x = MarkMsgGetUnreadCountResponseBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[136]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarkMsgGetUnreadCountResponseBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkMsgGetUnreadCountResponseBody) ProtoMessage() {}

func (x *MarkMsgGetUnreadCountResponseBody) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[136]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkMsgGetUnreadCountResponseBody.ProtoReflect.Descriptor instead.
func (*MarkMsgGetUnreadCountResponseBody) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{136}
}

func (x *MarkMsgGetUnreadCountResponseBody) GetTotalCount() int64 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *MarkMsgGetUnreadCountResponseBody) GetTagUnreadCount() map[int64]int64 {
	if x != nil {
		return x.TagUnreadCount
	}
	return nil
}

func (x *MarkMsgGetUnreadCountResponseBody) GetFailedTagList() []int64 {
	if x != nil {
		return x.FailedTagList
	}
	return nil
}

type BatchUnmarkMessageResponseBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerMessageId int64  `protobuf:"varint,1,opt,name=server_message_id,json=serverMessageId,proto3" json:"server_message_id,omitempty"`
	CheckCode       int64  `protobuf:"varint,2,opt,name=check_code,json=checkCode,proto3" json:"check_code,omitempty"`
	CheckMessage    string `protobuf:"bytes,3,opt,name=check_message,json=checkMessage,proto3" json:"check_message,omitempty"`
	Status          int32  `protobuf:"varint,4,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *BatchUnmarkMessageResponseBody) Reset() {
	*x = BatchUnmarkMessageResponseBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[137]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchUnmarkMessageResponseBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchUnmarkMessageResponseBody) ProtoMessage() {}

func (x *BatchUnmarkMessageResponseBody) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[137]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchUnmarkMessageResponseBody.ProtoReflect.Descriptor instead.
func (*BatchUnmarkMessageResponseBody) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{137}
}

func (x *BatchUnmarkMessageResponseBody) GetServerMessageId() int64 {
	if x != nil {
		return x.ServerMessageId
	}
	return 0
}

func (x *BatchUnmarkMessageResponseBody) GetCheckCode() int64 {
	if x != nil {
		return x.CheckCode
	}
	return 0
}

func (x *BatchUnmarkMessageResponseBody) GetCheckMessage() string {
	if x != nil {
		return x.CheckMessage
	}
	return ""
}

func (x *BatchUnmarkMessageResponseBody) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

type MessagesPerUserInitV2ResponseBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Messages      []*MessageBody        `protobuf:"bytes,1,rep,name=messages,proto3" json:"messages,omitempty"`
	Conversations []*ConversationInfoV2 `protobuf:"bytes,2,rep,name=conversations,proto3" json:"conversations,omitempty"`
	PerUserCursor int64                 `protobuf:"varint,3,opt,name=per_user_cursor,json=perUserCursor,proto3" json:"per_user_cursor,omitempty"`
	NextCursor    int64                 `protobuf:"varint,4,opt,name=next_cursor,json=nextCursor,proto3" json:"next_cursor,omitempty"`
	HasMore       bool                  `protobuf:"varint,5,opt,name=has_more,json=hasMore,proto3" json:"has_more,omitempty"`
}

func (x *MessagesPerUserInitV2ResponseBody) Reset() {
	*x = MessagesPerUserInitV2ResponseBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[138]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessagesPerUserInitV2ResponseBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessagesPerUserInitV2ResponseBody) ProtoMessage() {}

func (x *MessagesPerUserInitV2ResponseBody) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[138]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessagesPerUserInitV2ResponseBody.ProtoReflect.Descriptor instead.
func (*MessagesPerUserInitV2ResponseBody) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{138}
}

func (x *MessagesPerUserInitV2ResponseBody) GetMessages() []*MessageBody {
	if x != nil {
		return x.Messages
	}
	return nil
}

func (x *MessagesPerUserInitV2ResponseBody) GetConversations() []*ConversationInfoV2 {
	if x != nil {
		return x.Conversations
	}
	return nil
}

func (x *MessagesPerUserInitV2ResponseBody) GetPerUserCursor() int64 {
	if x != nil {
		return x.PerUserCursor
	}
	return 0
}

func (x *MessagesPerUserInitV2ResponseBody) GetNextCursor() int64 {
	if x != nil {
		return x.NextCursor
	}
	return 0
}

func (x *MessagesPerUserInitV2ResponseBody) GetHasMore() bool {
	if x != nil {
		return x.HasMore
	}
	return false
}

type NewP2PMessageNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SendType            int32             `protobuf:"varint,1,opt,name=send_type,json=sendType,proto3" json:"send_type,omitempty"`
	Sender              int64             `protobuf:"varint,2,opt,name=sender,proto3" json:"sender,omitempty"`
	SecSender           string            `protobuf:"bytes,3,opt,name=sec_sender,json=secSender,proto3" json:"sec_sender,omitempty"`
	ConversationId      string            `protobuf:"bytes,4,opt,name=conversation_id,json=conversationId,proto3" json:"conversation_id,omitempty"`
	ConversationShortId int64             `protobuf:"varint,5,opt,name=conversation_short_id,json=conversationShortId,proto3" json:"conversation_short_id,omitempty"`
	ConversationType    int32             `protobuf:"varint,6,opt,name=conversation_type,json=conversationType,proto3" json:"conversation_type,omitempty"`
	MessageType         int32             `protobuf:"varint,7,opt,name=message_type,json=messageType,proto3" json:"message_type,omitempty"`
	Content             string            `protobuf:"bytes,8,opt,name=content,proto3" json:"content,omitempty"`
	Ext                 map[string]string `protobuf:"bytes,9,rep,name=ext,proto3" json:"ext,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	CreateTime          int64             `protobuf:"varint,10,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
}

func (x *NewP2PMessageNotify) Reset() {
	*x = NewP2PMessageNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[139]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewP2PMessageNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewP2PMessageNotify) ProtoMessage() {}

func (x *NewP2PMessageNotify) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[139]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewP2PMessageNotify.ProtoReflect.Descriptor instead.
func (*NewP2PMessageNotify) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{139}
}

func (x *NewP2PMessageNotify) GetSendType() int32 {
	if x != nil {
		return x.SendType
	}
	return 0
}

func (x *NewP2PMessageNotify) GetSender() int64 {
	if x != nil {
		return x.Sender
	}
	return 0
}

func (x *NewP2PMessageNotify) GetSecSender() string {
	if x != nil {
		return x.SecSender
	}
	return ""
}

func (x *NewP2PMessageNotify) GetConversationId() string {
	if x != nil {
		return x.ConversationId
	}
	return ""
}

func (x *NewP2PMessageNotify) GetConversationShortId() int64 {
	if x != nil {
		return x.ConversationShortId
	}
	return 0
}

func (x *NewP2PMessageNotify) GetConversationType() int32 {
	if x != nil {
		return x.ConversationType
	}
	return 0
}

func (x *NewP2PMessageNotify) GetMessageType() int32 {
	if x != nil {
		return x.MessageType
	}
	return 0
}

func (x *NewP2PMessageNotify) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *NewP2PMessageNotify) GetExt() map[string]string {
	if x != nil {
		return x.Ext
	}
	return nil
}

func (x *NewP2PMessageNotify) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

type CreateConversationV2ResponseBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conversation *ConversationInfoV2 `protobuf:"bytes,1,opt,name=conversation,proto3" json:"conversation,omitempty"`
	CheckCode    int64               `protobuf:"varint,2,opt,name=check_code,json=checkCode,proto3" json:"check_code,omitempty"`
	CheckMessage string              `protobuf:"bytes,3,opt,name=check_message,json=checkMessage,proto3" json:"check_message,omitempty"`
	ExtraInfo    string              `protobuf:"bytes,4,opt,name=extra_info,json=extraInfo,proto3" json:"extra_info,omitempty"`
	Status       int32               `protobuf:"varint,5,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *CreateConversationV2ResponseBody) Reset() {
	*x = CreateConversationV2ResponseBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[140]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateConversationV2ResponseBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateConversationV2ResponseBody) ProtoMessage() {}

func (x *CreateConversationV2ResponseBody) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[140]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateConversationV2ResponseBody.ProtoReflect.Descriptor instead.
func (*CreateConversationV2ResponseBody) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{140}
}

func (x *CreateConversationV2ResponseBody) GetConversation() *ConversationInfoV2 {
	if x != nil {
		return x.Conversation
	}
	return nil
}

func (x *CreateConversationV2ResponseBody) GetCheckCode() int64 {
	if x != nil {
		return x.CheckCode
	}
	return 0
}

func (x *CreateConversationV2ResponseBody) GetCheckMessage() string {
	if x != nil {
		return x.CheckMessage
	}
	return ""
}

func (x *CreateConversationV2ResponseBody) GetExtraInfo() string {
	if x != nil {
		return x.ExtraInfo
	}
	return ""
}

func (x *CreateConversationV2ResponseBody) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

type GetConversationInfoListV2ResponseBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetConversationInfoListV2ResponseBody) Reset() {
	*x = GetConversationInfoListV2ResponseBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[141]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConversationInfoListV2ResponseBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConversationInfoListV2ResponseBody) ProtoMessage() {}

func (x *GetConversationInfoListV2ResponseBody) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[141]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConversationInfoListV2ResponseBody.ProtoReflect.Descriptor instead.
func (*GetConversationInfoListV2ResponseBody) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{141}
}

type GetConversationInfoListByFavoriteV2ResponseBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConversationInfoList []*ConversationInfoV2 `protobuf:"bytes,1,rep,name=conversation_info_list,json=conversationInfoList,proto3" json:"conversation_info_list,omitempty"`
	HasMore              bool                  `protobuf:"varint,2,opt,name=has_more,json=hasMore,proto3" json:"has_more,omitempty"`
	NextCursor           int64                 `protobuf:"varint,3,opt,name=next_cursor,json=nextCursor,proto3" json:"next_cursor,omitempty"`
}

func (x *GetConversationInfoListByFavoriteV2ResponseBody) Reset() {
	*x = GetConversationInfoListByFavoriteV2ResponseBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[142]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConversationInfoListByFavoriteV2ResponseBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConversationInfoListByFavoriteV2ResponseBody) ProtoMessage() {}

func (x *GetConversationInfoListByFavoriteV2ResponseBody) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[142]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConversationInfoListByFavoriteV2ResponseBody.ProtoReflect.Descriptor instead.
func (*GetConversationInfoListByFavoriteV2ResponseBody) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{142}
}

func (x *GetConversationInfoListByFavoriteV2ResponseBody) GetConversationInfoList() []*ConversationInfoV2 {
	if x != nil {
		return x.ConversationInfoList
	}
	return nil
}

func (x *GetConversationInfoListByFavoriteV2ResponseBody) GetHasMore() bool {
	if x != nil {
		return x.HasMore
	}
	return false
}

func (x *GetConversationInfoListByFavoriteV2ResponseBody) GetNextCursor() int64 {
	if x != nil {
		return x.NextCursor
	}
	return 0
}

type GetConversationInfoListByTopV2ResponseBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConversationInfoList []*ConversationInfoV2 `protobuf:"bytes,1,rep,name=conversation_info_list,json=conversationInfoList,proto3" json:"conversation_info_list,omitempty"`
	HasMore              bool                  `protobuf:"varint,2,opt,name=has_more,json=hasMore,proto3" json:"has_more,omitempty"`
	NextCursor           int64                 `protobuf:"varint,3,opt,name=next_cursor,json=nextCursor,proto3" json:"next_cursor,omitempty"`
}

func (x *GetConversationInfoListByTopV2ResponseBody) Reset() {
	*x = GetConversationInfoListByTopV2ResponseBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[143]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConversationInfoListByTopV2ResponseBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConversationInfoListByTopV2ResponseBody) ProtoMessage() {}

func (x *GetConversationInfoListByTopV2ResponseBody) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[143]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConversationInfoListByTopV2ResponseBody.ProtoReflect.Descriptor instead.
func (*GetConversationInfoListByTopV2ResponseBody) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{143}
}

func (x *GetConversationInfoListByTopV2ResponseBody) GetConversationInfoList() []*ConversationInfoV2 {
	if x != nil {
		return x.ConversationInfoList
	}
	return nil
}

func (x *GetConversationInfoListByTopV2ResponseBody) GetHasMore() bool {
	if x != nil {
		return x.HasMore
	}
	return false
}

func (x *GetConversationInfoListByTopV2ResponseBody) GetNextCursor() int64 {
	if x != nil {
		return x.NextCursor
	}
	return 0
}

type StrangerConversation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConversationShortId int64             `protobuf:"varint,1,opt,name=conversation_short_id,json=conversationShortId,proto3" json:"conversation_short_id,omitempty"`
	Unread              int32             `protobuf:"varint,2,opt,name=unread,proto3" json:"unread,omitempty"`
	LastMessage         *MessageBody      `protobuf:"bytes,3,opt,name=last_message,json=lastMessage,proto3" json:"last_message,omitempty"`
	ConversationId      string            `protobuf:"bytes,4,opt,name=conversation_id,json=conversationId,proto3" json:"conversation_id,omitempty"`
	Participants        []*Participant    `protobuf:"bytes,5,rep,name=participants,proto3" json:"participants,omitempty"`
	Ext                 map[string]string `protobuf:"bytes,7,rep,name=ext,proto3" json:"ext,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *StrangerConversation) Reset() {
	*x = StrangerConversation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[144]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StrangerConversation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StrangerConversation) ProtoMessage() {}

func (x *StrangerConversation) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[144]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StrangerConversation.ProtoReflect.Descriptor instead.
func (*StrangerConversation) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{144}
}

func (x *StrangerConversation) GetConversationShortId() int64 {
	if x != nil {
		return x.ConversationShortId
	}
	return 0
}

func (x *StrangerConversation) GetUnread() int32 {
	if x != nil {
		return x.Unread
	}
	return 0
}

func (x *StrangerConversation) GetLastMessage() *MessageBody {
	if x != nil {
		return x.LastMessage
	}
	return nil
}

func (x *StrangerConversation) GetConversationId() string {
	if x != nil {
		return x.ConversationId
	}
	return ""
}

func (x *StrangerConversation) GetParticipants() []*Participant {
	if x != nil {
		return x.Participants
	}
	return nil
}

func (x *StrangerConversation) GetExt() map[string]string {
	if x != nil {
		return x.Ext
	}
	return nil
}

type GetStrangerConversationListResponseBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NextCursor       int64                   `protobuf:"varint,1,opt,name=next_cursor,json=nextCursor,proto3" json:"next_cursor,omitempty"`
	HasMore          bool                    `protobuf:"varint,2,opt,name=has_more,json=hasMore,proto3" json:"has_more,omitempty"`
	TotalUnread      int32                   `protobuf:"varint,3,opt,name=total_unread,json=totalUnread,proto3" json:"total_unread,omitempty"`
	ConversationList []*StrangerConversation `protobuf:"bytes,4,rep,name=conversation_list,json=conversationList,proto3" json:"conversation_list,omitempty"`
}

func (x *GetStrangerConversationListResponseBody) Reset() {
	*x = GetStrangerConversationListResponseBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[145]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStrangerConversationListResponseBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStrangerConversationListResponseBody) ProtoMessage() {}

func (x *GetStrangerConversationListResponseBody) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[145]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStrangerConversationListResponseBody.ProtoReflect.Descriptor instead.
func (*GetStrangerConversationListResponseBody) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{145}
}

func (x *GetStrangerConversationListResponseBody) GetNextCursor() int64 {
	if x != nil {
		return x.NextCursor
	}
	return 0
}

func (x *GetStrangerConversationListResponseBody) GetHasMore() bool {
	if x != nil {
		return x.HasMore
	}
	return false
}

func (x *GetStrangerConversationListResponseBody) GetTotalUnread() int32 {
	if x != nil {
		return x.TotalUnread
	}
	return 0
}

func (x *GetStrangerConversationListResponseBody) GetConversationList() []*StrangerConversation {
	if x != nil {
		return x.ConversationList
	}
	return nil
}

type GetConversationParticipantsReadIndexV3ResponseBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetConversationParticipantsReadIndexV3ResponseBody) Reset() {
	*x = GetConversationParticipantsReadIndexV3ResponseBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[146]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConversationParticipantsReadIndexV3ResponseBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConversationParticipantsReadIndexV3ResponseBody) ProtoMessage() {}

func (x *GetConversationParticipantsReadIndexV3ResponseBody) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[146]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConversationParticipantsReadIndexV3ResponseBody.ProtoReflect.Descriptor instead.
func (*GetConversationParticipantsReadIndexV3ResponseBody) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{146}
}

type SendMessageP2PResponseBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SendMessageP2PResponseBody) Reset() {
	*x = SendMessageP2PResponseBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[147]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendMessageP2PResponseBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendMessageP2PResponseBody) ProtoMessage() {}

func (x *SendMessageP2PResponseBody) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[147]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendMessageP2PResponseBody.ProtoReflect.Descriptor instead.
func (*SendMessageP2PResponseBody) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{147}
}

type ResponseBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SendMessageBody                         *SendMessageResponseBody                            `protobuf:"bytes,100,opt,name=send_message_body,json=sendMessageBody,proto3" json:"send_message_body,omitempty"`
	MessagesPerUserBody                     *MessagesPerUserResponseBody                        `protobuf:"bytes,200,opt,name=messages_per_user_body,json=messagesPerUserBody,proto3" json:"messages_per_user_body,omitempty"`
	MessagesPerUserInitV2Body               *MessagesPerUserInitV2ResponseBody                  `protobuf:"bytes,203,opt,name=messages_per_user_init_v2_body,json=messagesPerUserInitV2Body,proto3" json:"messages_per_user_init_v2_body,omitempty"`
	GetMessageByIdBody                      *GetMessageByIdResponseBody                         `protobuf:"bytes,211,opt,name=get_message_by_id_body,json=getMessageByIdBody,proto3" json:"get_message_by_id_body,omitempty"`
	MessagesInConversationBody              *MessagesInConversationResponseBody                 `protobuf:"bytes,301,opt,name=messages_in_conversation_body,json=messagesInConversationBody,proto3" json:"messages_in_conversation_body,omitempty"`
	GetMessagesCheckinfoInConversationBody  *GetMessagesCheckInfoInConversationResponseBody     `protobuf:"bytes,302,opt,name=get_messages_checkinfo_in_conversation_body,json=getMessagesCheckinfoInConversationBody,proto3" json:"get_messages_checkinfo_in_conversation_body,omitempty"`
	HasNewMessageNotify                     *NewMessageNotify                                   `protobuf:"bytes,500,opt,name=has_new_message_notify,json=hasNewMessageNotify,proto3" json:"has_new_message_notify,omitempty"`
	HasNewP2PMessageNotify                  *NewP2PMessageNotify                                `protobuf:"bytes,504,opt,name=has_new_p2p_message_notify,json=hasNewP2pMessageNotify,proto3" json:"has_new_p2p_message_notify,omitempty"`
	GetConversationsCheckinfoBody           *GetConversationsCheckInfoResponseBody              `protobuf:"bytes,615,opt,name=get_conversations_checkinfo_body,json=getConversationsCheckinfoBody,proto3" json:"get_conversations_checkinfo_body,omitempty"`
	CreateConversationV2Body                *CreateConversationV2ResponseBody                   `protobuf:"bytes,609,opt,name=create_conversation_v2_body,json=createConversationV2Body,proto3" json:"create_conversation_v2_body,omitempty"`
	GetConversationInfoListV2Body           *GetConversationInfoListV2ResponseBody              `protobuf:"bytes,610,opt,name=get_conversation_info_list_v2_body,json=getConversationInfoListV2Body,proto3" json:"get_conversation_info_list_v2_body,omitempty"`
	GetConversationInfoListByFavoriteV2Body *GetConversationInfoListByFavoriteV2ResponseBody    `protobuf:"bytes,611,opt,name=get_conversation_info_list_by_favorite_v2_body,json=getConversationInfoListByFavoriteV2Body,proto3" json:"get_conversation_info_list_by_favorite_v2_body,omitempty"`
	GetConversationInfoListByTopV2Body      *GetConversationInfoListByTopV2ResponseBody         `protobuf:"bytes,612,opt,name=get_conversation_info_list_by_top_v2_body,json=getConversationInfoListByTopV2Body,proto3" json:"get_conversation_info_list_by_top_v2_body,omitempty"`
	ConversationParticipantsBody            *ConversationParticipantsListResponseBody           `protobuf:"bytes,605,opt,name=conversation_participants_body,json=conversationParticipantsBody,proto3" json:"conversation_participants_body,omitempty"`
	ConversationAddParticipantsBody         *ConversationAddParticipantsResponseBody            `protobuf:"bytes,650,opt,name=conversation_add_participants_body,json=conversationAddParticipantsBody,proto3" json:"conversation_add_participants_body,omitempty"`
	ConversationRemoveParticipantsBody      *ConversationRemoveParticipantsResponseBody         `protobuf:"bytes,651,opt,name=conversation_remove_participants_body,json=conversationRemoveParticipantsBody,proto3" json:"conversation_remove_participants_body,omitempty"`
	UpdateConversationParticipantBody       *UpdateConversationParticipantResponseBody          `protobuf:"bytes,655,opt,name=update_conversation_participant_body,json=updateConversationParticipantBody,proto3" json:"update_conversation_participant_body,omitempty"`
	ModifyMessagePropertyBody               *ModifyMessagePropertyResponseBody                  `protobuf:"bytes,705,opt,name=modify_message_property_body,json=modifyMessagePropertyBody,proto3" json:"modify_message_property_body,omitempty"`
	GetConversationCoreInfoBody             *GetConversationCoreInfoResponseBody                `protobuf:"bytes,901,opt,name=get_conversation_core_info_body,json=getConversationCoreInfoBody,proto3" json:"get_conversation_core_info_body,omitempty"`
	SetConversationCoreInfoBody             *SetConversationCoreInfoResponseBody                `protobuf:"bytes,902,opt,name=set_conversation_core_info_body,json=setConversationCoreInfoBody,proto3" json:"set_conversation_core_info_body,omitempty"`
	UpsertConversationCoreExtInfoBody       *UpsertConversationCoreExtInfoResponseBody          `protobuf:"bytes,904,opt,name=upsert_conversation_core_ext_info_body,json=upsertConversationCoreExtInfoBody,proto3" json:"upsert_conversation_core_ext_info_body,omitempty"`
	SetConversationSettingInfoBody          *SetConversationSettingInfoResponseBody             `protobuf:"bytes,921,opt,name=set_conversation_setting_info_body,json=setConversationSettingInfoBody,proto3" json:"set_conversation_setting_info_body,omitempty"`
	UpsertConversationSettingExtInfoBody    *UpsertConversationSettingExtInfoResponseBody       `protobuf:"bytes,922,opt,name=upsert_conversation_setting_ext_info_body,json=upsertConversationSettingExtInfoBody,proto3" json:"upsert_conversation_setting_ext_info_body,omitempty"`
	GetStrangerConversationBody             *GetStrangerConversationListResponseBody            `protobuf:"bytes,489,opt,name=get_stranger_conversation_body,json=getStrangerConversationBody,proto3" json:"get_stranger_conversation_body,omitempty"`
	GetStrangerMessagesBody                 *GetStrangerMessagesResponseBody                    `protobuf:"bytes,1001,opt,name=get_stranger_messages_body,json=getStrangerMessagesBody,proto3" json:"get_stranger_messages_body,omitempty"`
	ParticipantsReadIndexBody               *GetConversationParticipantsReadIndexV3ResponseBody `protobuf:"bytes,739,opt,name=participants_read_index_body,json=participantsReadIndexBody,proto3" json:"participants_read_index_body,omitempty"`
	GetUploadTokenBody                      *GetUploadTokenResponseBody                         `protobuf:"bytes,2003,opt,name=get_upload_token_body,json=getUploadTokenBody,proto3" json:"get_upload_token_body,omitempty"`
	GetMediaUrlsBody                        *GetMediaUrlsResponseBody                           `protobuf:"bytes,2004,opt,name=get_media_urls_body,json=getMediaUrlsBody,proto3" json:"get_media_urls_body,omitempty"`
	GetTicketBody                           *GetTicketResponseBody                              `protobuf:"bytes,2005,opt,name=get_ticket_body,json=getTicketBody,proto3" json:"get_ticket_body,omitempty"`
	GetConversationListBody                 *GetUserConversationListResponseBody                `protobuf:"bytes,2006,opt,name=get_conversation_list_body,json=getConversationListBody,proto3" json:"get_conversation_list_body,omitempty"`
	BroadcastSendMessageBody                *BroadcastSendMessageResponseBody                   `protobuf:"bytes,2007,opt,name=broadcast_send_message_body,json=broadcastSendMessageBody,proto3" json:"broadcast_send_message_body,omitempty"`
	BroadcastRecvMessageBody                *BroadcastRecvMessageResponseBody                   `protobuf:"bytes,2008,opt,name=broadcast_recv_message_body,json=broadcastRecvMessageBody,proto3" json:"broadcast_recv_message_body,omitempty"`
	BroadcastUserCounterBody                *BroadcastUserCounterResponseBody                   `protobuf:"bytes,2009,opt,name=broadcast_user_counter_body,json=broadcastUserCounterBody,proto3" json:"broadcast_user_counter_body,omitempty"`
	CreateVoipBody                          *CreateVoipResponseBody                             `protobuf:"bytes,2011,opt,name=create_voip_body,json=createVoipBody,proto3" json:"create_voip_body,omitempty"`
	CallVoipBody                            *CallVoipResponseBody                               `protobuf:"bytes,2012,opt,name=call_voip_body,json=callVoipBody,proto3" json:"call_voip_body,omitempty"`
	UpdateVoipBody                          *UpdateVoipResponseBody                             `protobuf:"bytes,2013,opt,name=update_voip_body,json=updateVoipBody,proto3" json:"update_voip_body,omitempty"`
	ProfileGetInfo                          *ProfileGetInfoResponseBody                         `protobuf:"bytes,2015,opt,name=profile_get_info,json=profileGetInfo,proto3" json:"profile_get_info,omitempty"`
	GetConfigsBody                          *GetConfigsResponseBody                             `protobuf:"bytes,2017,opt,name=get_configs_body,json=getConfigsBody,proto3" json:"get_configs_body,omitempty"`
	UnreadCountReportBody                   *UnReadCountReportResponseBody                      `protobuf:"bytes,2018,opt,name=unread_count_report_body,json=unreadCountReportBody,proto3" json:"unread_count_report_body,omitempty"`
	BlockMembersBody                        *BlockMembersResponseBody                           `protobuf:"bytes,2019,opt,name=block_members_body,json=blockMembersBody,proto3" json:"block_members_body,omitempty"`
	GetUnreadCountBody                      *GetUnreadCountResponseBody                         `protobuf:"bytes,2030,opt,name=get_unread_count_body,json=getUnreadCountBody,proto3" json:"get_unread_count_body,omitempty"`
	SendMessageP2PBody                      *SendMessageP2PResponseBody                         `protobuf:"bytes,2031,opt,name=send_message_p2p_body,json=sendMessageP2pBody,proto3" json:"send_message_p2p_body,omitempty"`
	GetBlocklistBody                        *GetBlockListResponseBody                           `protobuf:"bytes,2032,opt,name=get_blocklist_body,json=getBlocklistBody,proto3" json:"get_blocklist_body,omitempty"`
	SetBlocklistBody                        *SetBlocklistResponseBody                           `protobuf:"bytes,2033,opt,name=set_blocklist_body,json=setBlocklistBody,proto3" json:"set_blocklist_body,omitempty"`
	CheckInBlocklistBody                    *CheckInBlockListResponseBody                       `protobuf:"bytes,2034,opt,name=check_in_blocklist_body,json=checkInBlocklistBody,proto3" json:"check_in_blocklist_body,omitempty"`
	MarkMessageBody                         *MarkMessageResponseBody                            `protobuf:"bytes,2036,opt,name=mark_message_body,json=markMessageBody,proto3" json:"mark_message_body,omitempty"`
	PullMarkMessageBody                     *PullMarkMessageResponseBody                        `protobuf:"bytes,2037,opt,name=pull_mark_message_body,json=pullMarkMessageBody,proto3" json:"pull_mark_message_body,omitempty"`
	MarkMsgUnreadCountReport                *MarkMsgUnreadCountReportResponseBody               `protobuf:"bytes,2054,opt,name=mark_msg_unread_count_report,json=markMsgUnreadCountReport,proto3" json:"mark_msg_unread_count_report,omitempty"`
	MarkMsgGetUnreadCount                   *MarkMsgGetUnreadCountResponseBody                  `protobuf:"bytes,2055,opt,name=mark_msg_get_unread_count,json=markMsgGetUnreadCount,proto3" json:"mark_msg_get_unread_count,omitempty"`
	BatchUnmarkMessage                      *BatchUnmarkMessageResponseBody                     `protobuf:"bytes,2056,opt,name=batch_unmark_message,json=batchUnmarkMessage,proto3" json:"batch_unmark_message,omitempty"`
}

func (x *ResponseBody) Reset() {
	*x = ResponseBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[148]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseBody) ProtoMessage() {}

func (x *ResponseBody) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[148]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseBody.ProtoReflect.Descriptor instead.
func (*ResponseBody) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{148}
}

func (x *ResponseBody) GetSendMessageBody() *SendMessageResponseBody {
	if x != nil {
		return x.SendMessageBody
	}
	return nil
}

func (x *ResponseBody) GetMessagesPerUserBody() *MessagesPerUserResponseBody {
	if x != nil {
		return x.MessagesPerUserBody
	}
	return nil
}

func (x *ResponseBody) GetMessagesPerUserInitV2Body() *MessagesPerUserInitV2ResponseBody {
	if x != nil {
		return x.MessagesPerUserInitV2Body
	}
	return nil
}

func (x *ResponseBody) GetGetMessageByIdBody() *GetMessageByIdResponseBody {
	if x != nil {
		return x.GetMessageByIdBody
	}
	return nil
}

func (x *ResponseBody) GetMessagesInConversationBody() *MessagesInConversationResponseBody {
	if x != nil {
		return x.MessagesInConversationBody
	}
	return nil
}

func (x *ResponseBody) GetGetMessagesCheckinfoInConversationBody() *GetMessagesCheckInfoInConversationResponseBody {
	if x != nil {
		return x.GetMessagesCheckinfoInConversationBody
	}
	return nil
}

func (x *ResponseBody) GetHasNewMessageNotify() *NewMessageNotify {
	if x != nil {
		return x.HasNewMessageNotify
	}
	return nil
}

func (x *ResponseBody) GetHasNewP2PMessageNotify() *NewP2PMessageNotify {
	if x != nil {
		return x.HasNewP2PMessageNotify
	}
	return nil
}

func (x *ResponseBody) GetGetConversationsCheckinfoBody() *GetConversationsCheckInfoResponseBody {
	if x != nil {
		return x.GetConversationsCheckinfoBody
	}
	return nil
}

func (x *ResponseBody) GetCreateConversationV2Body() *CreateConversationV2ResponseBody {
	if x != nil {
		return x.CreateConversationV2Body
	}
	return nil
}

func (x *ResponseBody) GetGetConversationInfoListV2Body() *GetConversationInfoListV2ResponseBody {
	if x != nil {
		return x.GetConversationInfoListV2Body
	}
	return nil
}

func (x *ResponseBody) GetGetConversationInfoListByFavoriteV2Body() *GetConversationInfoListByFavoriteV2ResponseBody {
	if x != nil {
		return x.GetConversationInfoListByFavoriteV2Body
	}
	return nil
}

func (x *ResponseBody) GetGetConversationInfoListByTopV2Body() *GetConversationInfoListByTopV2ResponseBody {
	if x != nil {
		return x.GetConversationInfoListByTopV2Body
	}
	return nil
}

func (x *ResponseBody) GetConversationParticipantsBody() *ConversationParticipantsListResponseBody {
	if x != nil {
		return x.ConversationParticipantsBody
	}
	return nil
}

func (x *ResponseBody) GetConversationAddParticipantsBody() *ConversationAddParticipantsResponseBody {
	if x != nil {
		return x.ConversationAddParticipantsBody
	}
	return nil
}

func (x *ResponseBody) GetConversationRemoveParticipantsBody() *ConversationRemoveParticipantsResponseBody {
	if x != nil {
		return x.ConversationRemoveParticipantsBody
	}
	return nil
}

func (x *ResponseBody) GetUpdateConversationParticipantBody() *UpdateConversationParticipantResponseBody {
	if x != nil {
		return x.UpdateConversationParticipantBody
	}
	return nil
}

func (x *ResponseBody) GetModifyMessagePropertyBody() *ModifyMessagePropertyResponseBody {
	if x != nil {
		return x.ModifyMessagePropertyBody
	}
	return nil
}

func (x *ResponseBody) GetGetConversationCoreInfoBody() *GetConversationCoreInfoResponseBody {
	if x != nil {
		return x.GetConversationCoreInfoBody
	}
	return nil
}

func (x *ResponseBody) GetSetConversationCoreInfoBody() *SetConversationCoreInfoResponseBody {
	if x != nil {
		return x.SetConversationCoreInfoBody
	}
	return nil
}

func (x *ResponseBody) GetUpsertConversationCoreExtInfoBody() *UpsertConversationCoreExtInfoResponseBody {
	if x != nil {
		return x.UpsertConversationCoreExtInfoBody
	}
	return nil
}

func (x *ResponseBody) GetSetConversationSettingInfoBody() *SetConversationSettingInfoResponseBody {
	if x != nil {
		return x.SetConversationSettingInfoBody
	}
	return nil
}

func (x *ResponseBody) GetUpsertConversationSettingExtInfoBody() *UpsertConversationSettingExtInfoResponseBody {
	if x != nil {
		return x.UpsertConversationSettingExtInfoBody
	}
	return nil
}

func (x *ResponseBody) GetGetStrangerConversationBody() *GetStrangerConversationListResponseBody {
	if x != nil {
		return x.GetStrangerConversationBody
	}
	return nil
}

func (x *ResponseBody) GetGetStrangerMessagesBody() *GetStrangerMessagesResponseBody {
	if x != nil {
		return x.GetStrangerMessagesBody
	}
	return nil
}

func (x *ResponseBody) GetParticipantsReadIndexBody() *GetConversationParticipantsReadIndexV3ResponseBody {
	if x != nil {
		return x.ParticipantsReadIndexBody
	}
	return nil
}

func (x *ResponseBody) GetGetUploadTokenBody() *GetUploadTokenResponseBody {
	if x != nil {
		return x.GetUploadTokenBody
	}
	return nil
}

func (x *ResponseBody) GetGetMediaUrlsBody() *GetMediaUrlsResponseBody {
	if x != nil {
		return x.GetMediaUrlsBody
	}
	return nil
}

func (x *ResponseBody) GetGetTicketBody() *GetTicketResponseBody {
	if x != nil {
		return x.GetTicketBody
	}
	return nil
}

func (x *ResponseBody) GetGetConversationListBody() *GetUserConversationListResponseBody {
	if x != nil {
		return x.GetConversationListBody
	}
	return nil
}

func (x *ResponseBody) GetBroadcastSendMessageBody() *BroadcastSendMessageResponseBody {
	if x != nil {
		return x.BroadcastSendMessageBody
	}
	return nil
}

func (x *ResponseBody) GetBroadcastRecvMessageBody() *BroadcastRecvMessageResponseBody {
	if x != nil {
		return x.BroadcastRecvMessageBody
	}
	return nil
}

func (x *ResponseBody) GetBroadcastUserCounterBody() *BroadcastUserCounterResponseBody {
	if x != nil {
		return x.BroadcastUserCounterBody
	}
	return nil
}

func (x *ResponseBody) GetCreateVoipBody() *CreateVoipResponseBody {
	if x != nil {
		return x.CreateVoipBody
	}
	return nil
}

func (x *ResponseBody) GetCallVoipBody() *CallVoipResponseBody {
	if x != nil {
		return x.CallVoipBody
	}
	return nil
}

func (x *ResponseBody) GetUpdateVoipBody() *UpdateVoipResponseBody {
	if x != nil {
		return x.UpdateVoipBody
	}
	return nil
}

func (x *ResponseBody) GetProfileGetInfo() *ProfileGetInfoResponseBody {
	if x != nil {
		return x.ProfileGetInfo
	}
	return nil
}

func (x *ResponseBody) GetGetConfigsBody() *GetConfigsResponseBody {
	if x != nil {
		return x.GetConfigsBody
	}
	return nil
}

func (x *ResponseBody) GetUnreadCountReportBody() *UnReadCountReportResponseBody {
	if x != nil {
		return x.UnreadCountReportBody
	}
	return nil
}

func (x *ResponseBody) GetBlockMembersBody() *BlockMembersResponseBody {
	if x != nil {
		return x.BlockMembersBody
	}
	return nil
}

func (x *ResponseBody) GetGetUnreadCountBody() *GetUnreadCountResponseBody {
	if x != nil {
		return x.GetUnreadCountBody
	}
	return nil
}

func (x *ResponseBody) GetSendMessageP2PBody() *SendMessageP2PResponseBody {
	if x != nil {
		return x.SendMessageP2PBody
	}
	return nil
}

func (x *ResponseBody) GetGetBlocklistBody() *GetBlockListResponseBody {
	if x != nil {
		return x.GetBlocklistBody
	}
	return nil
}

func (x *ResponseBody) GetSetBlocklistBody() *SetBlocklistResponseBody {
	if x != nil {
		return x.SetBlocklistBody
	}
	return nil
}

func (x *ResponseBody) GetCheckInBlocklistBody() *CheckInBlockListResponseBody {
	if x != nil {
		return x.CheckInBlocklistBody
	}
	return nil
}

func (x *ResponseBody) GetMarkMessageBody() *MarkMessageResponseBody {
	if x != nil {
		return x.MarkMessageBody
	}
	return nil
}

func (x *ResponseBody) GetPullMarkMessageBody() *PullMarkMessageResponseBody {
	if x != nil {
		return x.PullMarkMessageBody
	}
	return nil
}

func (x *ResponseBody) GetMarkMsgUnreadCountReport() *MarkMsgUnreadCountReportResponseBody {
	if x != nil {
		return x.MarkMsgUnreadCountReport
	}
	return nil
}

func (x *ResponseBody) GetMarkMsgGetUnreadCount() *MarkMsgGetUnreadCountResponseBody {
	if x != nil {
		return x.MarkMsgGetUnreadCount
	}
	return nil
}

func (x *ResponseBody) GetBatchUnmarkMessage() *BatchUnmarkMessageResponseBody {
	if x != nil {
		return x.BatchUnmarkMessage
	}
	return nil
}

type Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd                    int32             `protobuf:"varint,1,opt,name=cmd,proto3" json:"cmd,omitempty"`
	SequenceId             int64             `protobuf:"varint,2,opt,name=sequence_id,json=sequenceId,proto3" json:"sequence_id,omitempty"`
	StatusCode             int32             `protobuf:"varint,3,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	ErrorDesc              string            `protobuf:"bytes,4,opt,name=error_desc,json=errorDesc,proto3" json:"error_desc,omitempty"`
	InboxType              int32             `protobuf:"varint,5,opt,name=inbox_type,json=inboxType,proto3" json:"inbox_type,omitempty"`
	Body                   *ResponseBody     `protobuf:"bytes,6,opt,name=body,proto3" json:"body,omitempty"`
	LogId                  string            `protobuf:"bytes,7,opt,name=log_id,json=logId,proto3" json:"log_id,omitempty"`
	Headers                map[string]string `protobuf:"bytes,8,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	StartTimeStamp         int64             `protobuf:"varint,9,opt,name=start_time_stamp,json=startTimeStamp,proto3" json:"start_time_stamp,omitempty"`
	RequestArrivedTime     int64             `protobuf:"varint,10,opt,name=request_arrived_time,json=requestArrivedTime,proto3" json:"request_arrived_time,omitempty"`
	ServerExecutionEndTime int64             `protobuf:"varint,11,opt,name=server_execution_end_time,json=serverExecutionEndTime,proto3" json:"server_execution_end_time,omitempty"`
}

func (x *Response) Reset() {
	*x = Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ws_payload_proto_msgTypes[149]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_ws_payload_proto_msgTypes[149]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_ws_payload_proto_rawDescGZIP(), []int{149}
}

func (x *Response) GetCmd() int32 {
	if x != nil {
		return x.Cmd
	}
	return 0
}

func (x *Response) GetSequenceId() int64 {
	if x != nil {
		return x.SequenceId
	}
	return 0
}

func (x *Response) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *Response) GetErrorDesc() string {
	if x != nil {
		return x.ErrorDesc
	}
	return ""
}

func (x *Response) GetInboxType() int32 {
	if x != nil {
		return x.InboxType
	}
	return 0
}

func (x *Response) GetBody() *ResponseBody {
	if x != nil {
		return x.Body
	}
	return nil
}

func (x *Response) GetLogId() string {
	if x != nil {
		return x.LogId
	}
	return ""
}

func (x *Response) GetHeaders() map[string]string {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *Response) GetStartTimeStamp() int64 {
	if x != nil {
		return x.StartTimeStamp
	}
	return 0
}

func (x *Response) GetRequestArrivedTime() int64 {
	if x != nil {
		return x.RequestArrivedTime
	}
	return 0
}

func (x *Response) GetServerExecutionEndTime() int64 {
	if x != nil {
		return x.ServerExecutionEndTime
	}
	return 0
}

var File_ws_payload_proto protoreflect.FileDescriptor

var file_ws_payload_proto_rawDesc = []byte{
	0x0a, 0x10, 0x77, 0x73, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x30, 0x0a, 0x06, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0xf0, 0x01, 0x0a, 0x05, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x65, 0x71, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x73,
	0x65, 0x71, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x6f, 0x67, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x05, 0x6c, 0x6f, 0x67, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x21, 0x0a, 0x07,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x07, 0x2e,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12,
	0x29, 0x0a, 0x10, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x65, 0x6e, 0x63, 0x6f, 0x64,
	0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x79, 0x0a, 0x20, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x50, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x69, 0x74, 0x56, 0x32,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x63,
	0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x63, 0x75, 0x72,
	0x73, 0x6f, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x65, 0x77, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6e, 0x65, 0x77, 0x55, 0x73, 0x65, 0x72, 0x12, 0x22,
	0x0a, 0x0d, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x69, 0x6e, 0x69, 0x74, 0x53, 0x75, 0x62, 0x54, 0x79,
	0x70, 0x65, 0x22, 0xbe, 0x01, 0x0a, 0x15, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x32, 0x0a, 0x15,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x68, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x68, 0x69, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x72,
	0x6f, 0x6f, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x17,
	0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x6e,
	0x76, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x72,
	0x6f, 0x6f, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x22, 0xf2, 0x03, 0x0a, 0x16, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x27,
	0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x13, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x12, 0x32, 0x0a, 0x03, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x2e, 0x45, 0x78, 0x74, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x03, 0x65, 0x78, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x69, 0x63,
	0x6b, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x27, 0x0a,
	0x0f, 0x6d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x73,
	0x18, 0x09, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0e, 0x6d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x65,
	0x64, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x38, 0x0a, 0x0c, 0x72, 0x65, 0x66, 0x5f, 0x6d, 0x73,
	0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x72, 0x65, 0x66, 0x4d, 0x73, 0x67, 0x49, 0x6e, 0x66, 0x6f,
	0x1a, 0x36, 0x0a, 0x08, 0x45, 0x78, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x4a, 0x0a, 0x1a, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x50, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x22, 0xd1, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f,
	0x64, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x63,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x22, 0x84, 0x02, 0x0a, 0x21, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x49, 0x6e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x27,
	0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x13, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72,
	0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x61, 0x6e,
	0x63, 0x68, 0x6f, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22,
	0xce, 0x02, 0x0a, 0x2d, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x6e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64,
	0x79, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x13, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x68,
	0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2b,
	0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x63,
	0x75, 0x72, 0x73, 0x6f, 0x72, 0x5f, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x5f, 0x62, 0x65,
	0x67, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x63, 0x75, 0x72, 0x73, 0x6f,
	0x72, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x12, 0x2c, 0x0a,
	0x12, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x5f, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x5f,
	0x65, 0x6e, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x63, 0x75, 0x72, 0x73, 0x6f,
	0x72, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x45, 0x6e, 0x64, 0x12, 0x33, 0x0a, 0x16, 0x65,
	0x78, 0x70, 0x65, 0x63, 0x74, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x65, 0x78, 0x70,
	0x65, 0x63, 0x74, 0x4d, 0x73, 0x67, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0xbd, 0x02, 0x0a, 0x19, 0x53, 0x65, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x27,
	0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x13, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3b, 0x0a, 0x05, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x55,
	0x73, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x42, 0x6f, 0x64, 0x79, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0xb6, 0x02, 0x0a, 0x1a, 0x53, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x12,
	0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x3c, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x2e, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a,
	0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xd7, 0x01, 0x0a, 0x1d, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x63,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x13, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x22, 0xb3, 0x02, 0x0a, 0x1f, 0x4d, 0x61, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x32, 0x0a, 0x15, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x13, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x68, 0x6f,
	0x72, 0x74, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x10, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x72,
	0x65, 0x61, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x2a, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x76, 0x5f, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x76,
	0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x55, 0x6e,
	0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xe1, 0x01, 0x0a, 0x27, 0x43, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x32,
	0x0a, 0x15, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73,
	0x68, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x63,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x68, 0x6f, 0x72, 0x74,
	0x49, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x63,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0xab, 0x01,
	0x0a, 0x1f, 0x44, 0x69, 0x73, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64,
	0x79, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x63, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x2b,
	0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x22, 0x8e, 0x03, 0x0a, 0x1f,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x56, 0x32, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x12,
	0x2b, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x03, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73,
	0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74,
	0x12, 0x23, 0x0a, 0x0d, 0x69, 0x64, 0x65, 0x6d, 0x70, 0x6f, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x64, 0x65, 0x6d, 0x70, 0x6f, 0x74,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61,
	0x76, 0x61, 0x74, 0x61, 0x72, 0x55, 0x72, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x07, 0x62, 0x69,
	0x7a, 0x5f, 0x65, 0x78, 0x74, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x56, 0x32, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x2e, 0x42, 0x69,
	0x7a, 0x45, 0x78, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x62, 0x69, 0x7a, 0x45, 0x78,
	0x74, 0x1a, 0x39, 0x0a, 0x0b, 0x42, 0x69, 0x7a, 0x45, 0x78, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x26, 0x0a, 0x24,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x32, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x42, 0x6f, 0x64, 0x79, 0x22, 0x5b, 0x0a, 0x2b, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x42, 0x79, 0x46, 0x61,
	0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x56, 0x32, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42,
	0x6f, 0x64, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x22, 0x56, 0x0a, 0x26, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x50, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x42, 0x79, 0x54, 0x6f, 0x70, 0x56, 0x32,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x63,
	0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x63, 0x75, 0x72,
	0x73, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0xdf, 0x02, 0x0a, 0x26, 0x43, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x64, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x42, 0x6f, 0x64, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x32, 0x0a,
	0x15, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x68,
	0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x63, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x49,
	0x64, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x63, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22,
	0x0a, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x03, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e,
	0x74, 0x73, 0x12, 0x4c, 0x0a, 0x07, 0x62, 0x69, 0x7a, 0x5f, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x41, 0x64, 0x64, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x2e, 0x42, 0x69, 0x7a,
	0x45, 0x78, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x62, 0x69, 0x7a, 0x45, 0x78, 0x74,
	0x1a, 0x39, 0x0a, 0x0b, 0x42, 0x69, 0x7a, 0x45, 0x78, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xe5, 0x02, 0x0a, 0x29,
	0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x13, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x68, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x4f, 0x0a, 0x07, 0x62, 0x69, 0x7a, 0x5f, 0x65,
	0x78, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x42, 0x6f, 0x64, 0x79, 0x2e, 0x42, 0x69, 0x7a, 0x45, 0x78, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x06, 0x62, 0x69, 0x7a, 0x45, 0x78, 0x74, 0x1a, 0x39, 0x0a, 0x0b, 0x42, 0x69, 0x7a, 0x45,
	0x78, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0xa8, 0x01, 0x0a, 0x1c, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x42, 0x6f, 0x64, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x32, 0x0a,
	0x15, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x68,
	0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x63, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x49,
	0x64, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x63, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x22, 0xa4,
	0x03, 0x0a, 0x28, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x63,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x13, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x6f,
	0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x20, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x61,
	0x6c, 0x69, 0x61, 0x73, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a,
	0x69, 0x73, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x53, 0x65, 0x74, 0x12, 0x4e, 0x0a, 0x07, 0x62, 0x69,
	0x7a, 0x5f, 0x65, 0x78, 0x74, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x2e, 0x42, 0x69, 0x7a, 0x45, 0x78, 0x74, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x06, 0x62, 0x69, 0x7a, 0x45, 0x78, 0x74, 0x1a, 0x39, 0x0a, 0x0b, 0x42, 0x69,
	0x7a, 0x45, 0x78, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc3, 0x01, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f,
	0x64, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x63,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x68, 0x6f, 0x72,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x63, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12,
	0x2b, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x22, 0xd0, 0x01, 0x0a, 0x18,
	0x52, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x13, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x68,
	0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x10, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x22, 0x82,
	0x01, 0x0a, 0x15, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x69, 0x64, 0x65, 0x6d, 0x70, 0x6f, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x64, 0x65, 0x6d, 0x70, 0x6f, 0x74, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x22, 0xc6, 0x02, 0x0a, 0x12, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10,
	0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x32, 0x0a, 0x15, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x13, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x68, 0x6f,
	0x72, 0x74, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64,
	0x12, 0x2a, 0x0a, 0x11, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x4e, 0x0a, 0x17,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x15, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x74, 0x0a, 0x20,
	0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79,
	0x12, 0x38, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79,
	0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x0c, 0x70, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x22, 0xae, 0x01, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x13, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x68, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x22, 0x86, 0x03, 0x0a, 0x22, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x13, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x68, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x12, 0x0a, 0x04,
	0x69, 0x63, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e,
	0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69,
	0x73, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x74, 0x12, 0x1e, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x64,
	0x65, 0x73, 0x63, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69,
	0x73, 0x44, 0x65, 0x73, 0x63, 0x53, 0x65, 0x74, 0x12, 0x1e, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x69,
	0x63, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69,
	0x73, 0x49, 0x63, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x6e,
	0x6f, 0x74, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0b, 0x69, 0x73, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x53, 0x65, 0x74, 0x22, 0xb2, 0x02, 0x0a,
	0x28, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x72, 0x65, 0x45, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x13, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x68, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x44, 0x0a, 0x03, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x32, 0x2e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x72, 0x65, 0x45, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x2e, 0x45, 0x78, 0x74, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x03, 0x65, 0x78, 0x74, 0x1a, 0x36, 0x0a, 0x08, 0x45, 0x78, 0x74,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x98, 0x02, 0x0a, 0x25, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x63,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x13, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x10, 0x73, 0x65, 0x74, 0x5f, 0x73, 0x74, 0x69,
	0x63, 0x6b, 0x5f, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0d, 0x73, 0x65, 0x74, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x4f, 0x6e, 0x54, 0x6f, 0x70, 0x12, 0x19,
	0x0a, 0x08, 0x73, 0x65, 0x74, 0x5f, 0x6d, 0x75, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x73, 0x65, 0x74, 0x4d, 0x75, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x74,
	0x5f, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0b, 0x73, 0x65, 0x74, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x22, 0xb8, 0x02, 0x0a,
	0x2b, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x45, 0x78, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x27, 0x0a, 0x0f,
	0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x47, 0x0a, 0x03, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x45,
	0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64,
	0x79, 0x2e, 0x45, 0x78, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x03, 0x65, 0x78, 0x74, 0x1a,
	0x36, 0x0a, 0x08, 0x45, 0x78, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x82, 0x01, 0x0a, 0x26, 0x47, 0x65, 0x74, 0x53,
	0x74, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f,
	0x64, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x2a, 0x0a, 0x11, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x75,
	0x6e, 0x72, 0x65, 0x61, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x73, 0x68, 0x6f,
	0x77, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x22, 0x82, 0x01, 0x0a,
	0x1e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x12,
	0x32, 0x0a, 0x15, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13,
	0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x68, 0x6f, 0x72,
	0x74, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x75, 0x6e, 0x72,
	0x65, 0x61, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x10, 0x72, 0x65, 0x73, 0x65, 0x74, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0x82, 0x01, 0x0a, 0x20, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x74, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x49, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x13, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x68, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x22, 0x27, 0x0a, 0x25, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x53, 0x74, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x22,
	0x2a, 0x0a, 0x28, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x74, 0x72, 0x61, 0x6e, 0x67, 0x65,
	0x72, 0x41, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x22, 0x29, 0x0a, 0x27, 0x4d,
	0x61, 0x72, 0x6b, 0x53, 0x74, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x22, 0x2c, 0x0a, 0x2a, 0x4d, 0x61, 0x72, 0x6b, 0x53, 0x74,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x72, 0x41, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x42, 0x6f, 0x64, 0x79, 0x22, 0xbc, 0x01, 0x0a, 0x30, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x6e, 0x74, 0x73, 0x4d, 0x69, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x56, 0x33, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x2b, 0x0a,
	0x11, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x22, 0x5d, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79,
	0x12, 0x21, 0x0a, 0x0c, 0x76, 0x73, 0x64, 0x6b, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x76, 0x73, 0x64, 0x6b, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x22, 0x97, 0x03, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x55,
	0x72, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x21,
	0x0a, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x70, 0x70, 0x69,
	0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x75, 0x72, 0x69, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64,
	0x12, 0x2b, 0x0a, 0x0b, 0x69, 0x6d, 0x67, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x49, 0x6d, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0a, 0x69, 0x6d, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x31, 0x0a,
	0x0d, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0c, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x31, 0x0a, 0x0d, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x2e, 0x0a, 0x0c, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x46, 0x69, 0x6c, 0x65,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x66, 0x69, 0x6c, 0x65, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64,
	0x5f, 0x75, 0x72, 0x69, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x65, 0x64, 0x55, 0x72, 0x69, 0x12, 0x22, 0x0a, 0x0d, 0x72, 0x65, 0x61, 0x64,
	0x5f, 0x75, 0x72, 0x6c, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x72, 0x65, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x46, 0x72, 0x6f, 0x6d, 0x22, 0x97, 0x02, 0x0a,
	0x14, 0x47, 0x65, 0x74, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x05, 0x74, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x74, 0x6f, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x03,
	0x65, 0x78, 0x74, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x47, 0x65, 0x74, 0x54,
	0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79,
	0x2e, 0x45, 0x78, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x03, 0x65, 0x78, 0x74, 0x1a, 0x36,
	0x0a, 0x08, 0x45, 0x78, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xed, 0x01, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x1b, 0x0a,
	0x09, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x73, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x75,
	0x72, 0x73, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x63, 0x75, 0x72, 0x73,
	0x6f, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x72,
	0x6f, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x69, 0x6e, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x65, 0x78,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x69, 0x74,
	0x68, 0x5f, 0x63, 0x6f, 0x6c, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x77, 0x69,
	0x74, 0x68, 0x43, 0x6f, 0x6c, 0x64, 0x22, 0xca, 0x03, 0x0a, 0x1f, 0x42, 0x72, 0x6f, 0x61, 0x64,
	0x63, 0x61, 0x73, 0x74, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10,
	0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x32, 0x0a, 0x15, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x13, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x68, 0x6f,
	0x72, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x3b,
	0x0a, 0x03, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x42, 0x72,
	0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x2e, 0x45, 0x78,
	0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x03, 0x65, 0x78, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x6d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0e, 0x6d, 0x65, 0x6e,
	0x74, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x73, 0x1a, 0x36, 0x0a, 0x08, 0x45,
	0x78, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0xbd, 0x01, 0x0a, 0x31, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x61, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x56, 0x33, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x2b, 0x0a,
	0x11, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x22, 0x90, 0x02, 0x0a, 0x1f, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73,
	0x74, 0x52, 0x65, 0x63, 0x76, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x2b, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x63, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x32, 0x0a,
	0x15, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x68,
	0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x63, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x75, 0x6c,
	0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x75,
	0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x22, 0x21, 0x0a, 0x1f, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63,
	0x61, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x22, 0xe3, 0x01, 0x0a, 0x14, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x41, 0x43, 0x4b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f,
	0x64, 0x79, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x10, 0x0a, 0x03,
	0x63, 0x6d, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x21,
	0x0a, 0x0c, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x6f, 0x67, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x6c, 0x6f, 0x67, 0x69, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x22,
	0xd6, 0x01, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x6f, 0x69, 0x70, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x64, 0x65,
	0x6d, 0x70, 0x6f, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x69, 0x64, 0x65, 0x6d, 0x70, 0x6f, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x15,
	0x0a, 0x06, 0x76, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x76, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x5f, 0x73, 0x68, 0x6f,
	0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x6f, 0x6e,
	0x53, 0x68, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x0a, 0x73, 0x72, 0x76, 0x5f, 0x6d,
	0x73, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x72, 0x76,
	0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x72, 0x65, 0x66, 0x5f, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72,
	0x65, 0x66, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x76,
	0x6f, 0x69, 0x70, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x76, 0x6f, 0x69, 0x70, 0x4d, 0x6f, 0x64, 0x65, 0x22, 0x96, 0x02, 0x0a, 0x13, 0x43, 0x61, 0x6c,
	0x6c, 0x56, 0x6f, 0x69, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x03, 0x52, 0x09, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x65, 0x49, 0x64, 0x73, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x15,
	0x0a, 0x06, 0x76, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x76, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2f, 0x0a, 0x03, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x56, 0x6f, 0x69, 0x70, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x2e, 0x45, 0x78, 0x74, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x03, 0x65, 0x78, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x65, 0x66, 0x5f, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0f, 0x72, 0x65, 0x66, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x73, 0x65,
	0x72, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x6e, 0x49, 0x64, 0x1a, 0x36, 0x0a, 0x08, 0x45, 0x78, 0x74,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x65, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x6f, 0x69, 0x70, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x15, 0x0a, 0x06, 0x76, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x76, 0x54, 0x79, 0x70, 0x65, 0x22, 0x1d, 0x0a, 0x1b, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x48, 0x65, 0x61, 0x72, 0x74, 0x42, 0x65, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x22, 0x1b, 0x0a, 0x19, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x42, 0x6f, 0x64, 0x79, 0x22, 0x20, 0x0a, 0x1e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x22, 0x17, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x22,
	0xf9, 0x01, 0x0a, 0x1b, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x45, 0x78, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x12,
	0x32, 0x0a, 0x15, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13,
	0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x68, 0x6f, 0x72,
	0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x37, 0x0a, 0x03, 0x65, 0x78,
	0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x78, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x42, 0x6f, 0x64, 0x79, 0x2e, 0x45, 0x78, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x03,
	0x65, 0x78, 0x74, 0x1a, 0x36, 0x0a, 0x08, 0x45, 0x78, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x85, 0x01, 0x0a, 0x0f,
	0x43, 0x6f, 0x6e, 0x76, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12,
	0x22, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x76, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x76, 0x53, 0x68, 0x6f, 0x72,
	0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x75, 0x6e, 0x72, 0x65, 0x61,
	0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x22, 0x8a, 0x01, 0x0a, 0x1c, 0x55, 0x6e, 0x52, 0x65, 0x61, 0x64, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x42, 0x6f, 0x64, 0x79, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x75, 0x6e,
	0x72, 0x65, 0x61, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x76, 0x5f, 0x75, 0x6e, 0x72, 0x65, 0x61,
	0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x43, 0x6f, 0x6e, 0x76, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52,
	0x0f, 0x63, 0x6f, 0x6e, 0x76, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0xb6, 0x03, 0x0a, 0x17, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x21, 0x0a, 0x0c,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x46, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x2e, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x76, 0x5f,
	0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x63, 0x6f, 0x6e, 0x76, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x63,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x3d, 0x0a, 0x07, 0x62, 0x69, 0x7a, 0x5f, 0x65, 0x78, 0x74, 0x18, 0x0b, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x2e, 0x42, 0x69, 0x7a,
	0x45, 0x78, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x62, 0x69, 0x7a, 0x45, 0x78, 0x74,
	0x1a, 0x3c, 0x0a, 0x0e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x39,
	0x0a, 0x0b, 0x42, 0x69, 0x7a, 0x45, 0x78, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xe7, 0x01, 0x0a, 0x1c, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x76, 0x5f, 0x73, 0x68, 0x6f, 0x72,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x76,
	0x53, 0x68, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x5f, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x4f,
	0x6e, 0x6c, 0x79, 0x22, 0x5c, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79,
	0x12, 0x1b, 0x0a, 0x09, 0x67, 0x65, 0x74, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x67, 0x65, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x22, 0x0a,
	0x0d, 0x63, 0x6f, 0x6e, 0x76, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x76, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x49,
	0x64, 0x22, 0xe4, 0x03, 0x0a, 0x19, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x50, 0x32, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x12,
	0x1b, 0x0a, 0x09, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x0f,
	0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x10, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x13, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x68, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c,
	0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x05, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0b, 0x76, 0x69,
	0x73, 0x69, 0x62, 0x6c, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x76,
	0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x03, 0x52, 0x0d, 0x69, 0x6e, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x35, 0x0a,
	0x03, 0x65, 0x78, 0x74, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x53, 0x65, 0x6e,
	0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x32, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x2e, 0x45, 0x78, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x03, 0x65, 0x78, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64,
	0x1a, 0x36, 0x0a, 0x08, 0x45, 0x78, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x47, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42,
	0x6f, 0x64, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x22, 0x5d, 0x0a, 0x17, 0x53, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x6c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x24, 0x0a, 0x0e,
	0x73, 0x65, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x73, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74,
	0x22, 0x1d, 0x0a, 0x1b, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x22,
	0xbb, 0x02, 0x0a, 0x16, 0x4d, 0x61, 0x72, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10,
	0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x32, 0x0a, 0x15, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x13, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x68, 0x6f,
	0x72, 0x74, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x64, 0x6f, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x64, 0x6f, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a,
	0x0b, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x73, 0x6f, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x74,
	0x61, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x74, 0x61, 0x67, 0x22, 0xc7, 0x02,
	0x0a, 0x1a, 0x50, 0x75, 0x6c, 0x6c, 0x4d, 0x61, 0x72, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x27, 0x0a, 0x0f,
	0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x10, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x13, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x68, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x73, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x03, 0x61, 0x73, 0x63, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x6c, 0x65,
	0x61, 0x72, 0x5f, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x55, 0x6e, 0x72, 0x65,
	0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x84, 0x03, 0x0a, 0x23, 0x4d, 0x61, 0x72, 0x6b,
	0x4d, 0x73, 0x67, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x12,
	0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x55, 0x6e, 0x72, 0x65,
	0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x62, 0x0a, 0x10, 0x74, 0x61, 0x67, 0x5f, 0x75,
	0x6e, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x38, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x4d, 0x73, 0x67, 0x55, 0x6e, 0x72, 0x65, 0x61,
	0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x2e, 0x54, 0x61, 0x67, 0x55, 0x6e, 0x72, 0x65, 0x61,
	0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x74, 0x61, 0x67,
	0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x41, 0x0a, 0x13, 0x54,
	0x61, 0x67, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xdd,
	0x01, 0x0a, 0x20, 0x4d, 0x61, 0x72, 0x6b, 0x4d, 0x73, 0x67, 0x47, 0x65, 0x74, 0x55, 0x6e, 0x72,
	0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42,
	0x6f, 0x64, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x11,
	0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x67, 0x65, 0x74, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x67, 0x65, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61,
	0x67, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x03, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x22, 0x8a,
	0x02, 0x0a, 0x1d, 0x42, 0x61, 0x74, 0x63, 0x68, 0x55, 0x6e, 0x6d, 0x61, 0x72, 0x6b, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79,
	0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x03, 0x52, 0x10, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x74, 0x61, 0x67, 0x22, 0xc7, 0x31, 0x0a, 0x0b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x43, 0x0a, 0x11, 0x73,
	0x65, 0x6e, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x62, 0x6f, 0x64, 0x79,
	0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x52,
	0x0f, 0x73, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x64, 0x79,
	0x12, 0x51, 0x0a, 0x16, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x70, 0x65, 0x72,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0xc8, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x50, 0x65, 0x72, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x13,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x50, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x42,
	0x6f, 0x64, 0x79, 0x12, 0x65, 0x0a, 0x1e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f,
	0x70, 0x65, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x76, 0x32,
	0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0xcb, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x50, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e,
	0x69, 0x74, 0x56, 0x32, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x52,
	0x19, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x50, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x6e, 0x69, 0x74, 0x56, 0x32, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x4f, 0x0a, 0x16, 0x67, 0x65,
	0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x5f,
	0x62, 0x6f, 0x64, 0x79, 0x18, 0xd3, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x47, 0x65,
	0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x12, 0x67, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x42, 0x79, 0x49, 0x64, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x66, 0x0a, 0x1d, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0xad, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x49, 0x6e,
	0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x1a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x49, 0x6e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x6f, 0x64, 0x79, 0x12, 0x8c, 0x01, 0x0a, 0x2b, 0x67, 0x65, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x69,
	0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62,
	0x6f, 0x64, 0x79, 0x18, 0xae, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x47, 0x65, 0x74,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x66,
	0x6f, 0x49, 0x6e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x26, 0x67, 0x65, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e, 0x66, 0x6f,
	0x49, 0x6e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6f,
	0x64, 0x79, 0x12, 0x4e, 0x0a, 0x15, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x9a, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x12,
	0x73, 0x65, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6f,
	0x64, 0x79, 0x12, 0x51, 0x0a, 0x16, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x9b, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79,
	0x52, 0x13, 0x73, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x59, 0x0a, 0x18, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f,
	0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x6f, 0x64,
	0x79, 0x18, 0xdb, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x16, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x64, 0x79,
	0x12, 0x60, 0x0a, 0x1b, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18,
	0xdc, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x43, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x18, 0x6d, 0x61, 0x72, 0x6b, 0x43, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x61, 0x64, 0x42, 0x6f,
	0x64, 0x79, 0x12, 0x6f, 0x0a, 0x1e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x5f,
	0x62, 0x6f, 0x64, 0x79, 0x18, 0xdd, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x43, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x1c, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x42,
	0x6f, 0x64, 0x79, 0x12, 0x5f, 0x0a, 0x1a, 0x64, 0x69, 0x73, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x5f,
	0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x6f, 0x64,
	0x79, 0x18, 0xe6, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x44, 0x69, 0x73, 0x73, 0x6f,
	0x6c, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x18, 0x64, 0x69, 0x73, 0x73,
	0x6f, 0x6c, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x6f, 0x64, 0x79, 0x12, 0x60, 0x0a, 0x1b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x63,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x32, 0x5f, 0x62,
	0x6f, 0x64, 0x79, 0x18, 0xe1, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56,
	0x32, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x18, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x56, 0x32, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x71, 0x0a, 0x22, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x5f, 0x76, 0x32, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0xe2, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x32, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x1d, 0x67, 0x65, 0x74, 0x43,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x4c,
	0x69, 0x73, 0x74, 0x56, 0x32, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x8e, 0x01, 0x0a, 0x2e, 0x67, 0x65,
	0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x62, 0x79, 0x5f, 0x66, 0x61, 0x76, 0x6f,
	0x72, 0x69, 0x74, 0x65, 0x5f, 0x76, 0x32, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0xe3, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x50, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x42, 0x79, 0x46, 0x61, 0x76, 0x6f,
	0x72, 0x69, 0x74, 0x65, 0x56, 0x32, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64,
	0x79, 0x52, 0x27, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x46, 0x61, 0x76, 0x6f,
	0x72, 0x69, 0x74, 0x65, 0x56, 0x32, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x7f, 0x0a, 0x29, 0x67, 0x65,
	0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x62, 0x79, 0x5f, 0x74, 0x6f, 0x70, 0x5f,
	0x76, 0x32, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0xe4, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x65,
	0x72, 0x55, 0x73, 0x65, 0x72, 0x42, 0x79, 0x54, 0x6f, 0x70, 0x56, 0x32, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x22, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74,
	0x42, 0x79, 0x54, 0x6f, 0x70, 0x56, 0x32, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x75, 0x0a, 0x22, 0x63,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x5f,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x5f, 0x62, 0x6f, 0x64,
	0x79, 0x18, 0x8a, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x64, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64,
	0x79, 0x52, 0x1f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41,
	0x64, 0x64, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x42, 0x6f,
	0x64, 0x79, 0x12, 0x7e, 0x0a, 0x25, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x8b, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x22,
	0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x42, 0x6f,
	0x64, 0x79, 0x12, 0x56, 0x0a, 0x17, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x8c, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42,
	0x6f, 0x64, 0x79, 0x52, 0x15, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x7b, 0x0a, 0x24, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x5f, 0x62, 0x6f,
	0x64, 0x79, 0x18, 0x8f, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x42, 0x6f, 0x64, 0x79, 0x52, 0x21, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x6e, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x4a, 0x0a, 0x13, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0xbd,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79,
	0x52, 0x11, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42,
	0x6f, 0x64, 0x79, 0x12, 0x4a, 0x0a, 0x13, 0x72, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0xbe, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x52, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x11, 0x72, 0x65,
	0x63, 0x61, 0x6c, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x12,
	0x63, 0x0a, 0x1c, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18,
	0xc1, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x19, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,
	0x42, 0x6f, 0x64, 0x79, 0x12, 0x6a, 0x0a, 0x1f, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x85, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42,
	0x6f, 0x64, 0x79, 0x52, 0x1b, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x6f, 0x64, 0x79,
	0x12, 0x6a, 0x0a, 0x1f, 0x73, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x62,
	0x6f, 0x64, 0x79, 0x18, 0x86, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x53, 0x65, 0x74,
	0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x72, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x52,
	0x1b, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x7d, 0x0a, 0x26,
	0x75, 0x70, 0x73, 0x65, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x88, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x72, 0x65, 0x45, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x21, 0x75, 0x70, 0x73, 0x65, 0x72, 0x74,
	0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x72, 0x65,
	0x45, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x73, 0x0a, 0x22, 0x73,
	0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x62, 0x6f, 0x64,
	0x79, 0x18, 0x99, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x53, 0x65, 0x74, 0x43, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79,
	0x52, 0x1e, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x6f, 0x64, 0x79,
	0x12, 0x86, 0x01, 0x0a, 0x29, 0x75, 0x70, 0x73, 0x65, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x65, 0x78, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x9a,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x43, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x45, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42,
	0x6f, 0x64, 0x79, 0x52, 0x24, 0x75, 0x70, 0x73, 0x65, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x45, 0x78,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x6d, 0x0a, 0x1e, 0x67, 0x65, 0x74,
	0x5f, 0x73, 0x74, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0xe3, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x1b, 0x67, 0x65, 0x74,
	0x53, 0x74, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x5d, 0x0a, 0x1a, 0x67, 0x65, 0x74, 0x5f,
	0x73, 0x74, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0xe9, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x47, 0x65, 0x74, 0x53, 0x74, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x17,
	0x67, 0x65, 0x74, 0x53, 0x74, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x63, 0x0a, 0x1c, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0xea, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x74, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x72, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64,
	0x79, 0x52, 0x19, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x74, 0x72, 0x61, 0x6e, 0x67, 0x65,
	0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x72, 0x0a, 0x21,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x72, 0x5f,
	0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x6f, 0x64,
	0x79, 0x18, 0xeb, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x53, 0x74, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79,
	0x52, 0x1e, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x74, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x64, 0x79,
	0x12, 0x7c, 0x0a, 0x25, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x6e,
	0x67, 0x65, 0x72, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0xec, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x74, 0x72, 0x61, 0x6e, 0x67, 0x65,
	0x72, 0x41, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x21, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x53, 0x74, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x72, 0x41, 0x6c, 0x6c, 0x43, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x79,
	0x0a, 0x24, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x72, 0x5f,
	0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x61,
	0x64, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0xed, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x4d, 0x61, 0x72, 0x6b, 0x53, 0x74, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x20, 0x6d, 0x61, 0x72, 0x6b, 0x53, 0x74, 0x72,
	0x61, 0x6e, 0x67, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x61, 0x64, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x83, 0x01, 0x0a, 0x28, 0x6d, 0x61,
	0x72, 0x6b, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x72, 0x5f, 0x61, 0x6c, 0x6c, 0x5f,
	0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x61,
	0x64, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0xee, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x4d, 0x61, 0x72, 0x6b, 0x53, 0x74, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x72, 0x41, 0x6c, 0x6c, 0x43,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x61, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x23, 0x6d, 0x61, 0x72, 0x6b,
	0x53, 0x74, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x72, 0x41, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x61, 0x64, 0x42, 0x6f, 0x64, 0x79, 0x12,
	0x74, 0x0a, 0x1c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x5f,
	0x72, 0x65, 0x61, 0x64, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18,
	0xe3, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x61, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x56, 0x33, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x19, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x61, 0x64, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x71, 0x0a, 0x1b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,
	0x70, 0x61, 0x6e, 0x74, 0x73, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f,
	0x62, 0x6f, 0x64, 0x79, 0x18, 0xd1, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x4d, 0x69, 0x6e, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x56, 0x33, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x18,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x4d, 0x69, 0x6e, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x4e, 0x0a, 0x15, 0x67, 0x65, 0x74, 0x5f,
	0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x62, 0x6f, 0x64,
	0x79, 0x18, 0xd3, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x42, 0x6f, 0x64, 0x79, 0x52, 0x12, 0x67, 0x65, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x48, 0x0a, 0x13, 0x67, 0x65, 0x74, 0x5f,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x75, 0x72, 0x6c, 0x73, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18,
	0xd4, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x64, 0x69,
	0x61, 0x55, 0x72, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79,
	0x52, 0x10, 0x67, 0x65, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x55, 0x72, 0x6c, 0x73, 0x42, 0x6f,
	0x64, 0x79, 0x12, 0x3e, 0x0a, 0x0f, 0x67, 0x65, 0x74, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0xd5, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x47,
	0x65, 0x74, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42,
	0x6f, 0x64, 0x79, 0x52, 0x0d, 0x67, 0x65, 0x74, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x42, 0x6f,
	0x64, 0x79, 0x12, 0x61, 0x0a, 0x1a, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x62, 0x6f, 0x64, 0x79,
	0x18, 0xd6, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x17, 0x67, 0x65,
	0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73,
	0x74, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x60, 0x0a, 0x1b, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61,
	0x73, 0x74, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f,
	0x62, 0x6f, 0x64, 0x79, 0x18, 0xd7, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x42, 0x72,
	0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x18, 0x62,
	0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x60, 0x0a, 0x1b, 0x62, 0x72, 0x6f, 0x61, 0x64,
	0x63, 0x61, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x76, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0xd8, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x52, 0x65, 0x63, 0x76, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x52,
	0x18, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x52, 0x65, 0x63, 0x76, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x60, 0x0a, 0x1b, 0x62, 0x72, 0x6f,
	0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0xd9, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64,
	0x79, 0x52, 0x18, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x3e, 0x0a, 0x0f, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x63, 0x6b, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0xda,
	0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x43,
	0x4b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x0d, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x6b, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x41, 0x0a, 0x10, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x76, 0x6f, 0x69, 0x70, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18,
	0xdb, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56,
	0x6f, 0x69, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x0e,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x6f, 0x69, 0x70, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x3b,
	0x0a, 0x0e, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x76, 0x6f, 0x69, 0x70, 0x5f, 0x62, 0x6f, 0x64, 0x79,
	0x18, 0xdc, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x56, 0x6f,
	0x69, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x0c, 0x63,
	0x61, 0x6c, 0x6c, 0x56, 0x6f, 0x69, 0x70, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x41, 0x0a, 0x10, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x76, 0x6f, 0x69, 0x70, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18,
	0xdd, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56,
	0x6f, 0x69, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x0e,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x6f, 0x69, 0x70, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x53,
	0x0a, 0x16, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62,
	0x65, 0x61, 0x74, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0xde, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x48, 0x65, 0x61, 0x72, 0x74, 0x42, 0x65,
	0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x14, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x42,
	0x6f, 0x64, 0x79, 0x12, 0x45, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x67,
	0x65, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0xdf, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x5d, 0x0a, 0x1a, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0xe0, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79,
	0x52, 0x17, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x41, 0x0a, 0x10, 0x67, 0x65, 0x74,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0xe1, 0x0f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x0e, 0x67, 0x65,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x54, 0x0a, 0x17,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x65,
	0x78, 0x74, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0xe5, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x78,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x14, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x78, 0x74, 0x42, 0x6f,
	0x64, 0x79, 0x12, 0x57, 0x0a, 0x18, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0xe2,
	0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x55, 0x6e, 0x52, 0x65, 0x61, 0x64, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x42, 0x6f, 0x64, 0x79, 0x52, 0x15, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x47, 0x0a, 0x12, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x5f, 0x62, 0x6f, 0x64,
	0x79, 0x18, 0xe3, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f,
	0x64, 0x79, 0x52, 0x10, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x42, 0x6f, 0x64, 0x79, 0x12, 0x56, 0x0a, 0x17, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x63, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18,
	0xe4, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x15, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x4e, 0x0a, 0x15,
	0x67, 0x65, 0x74, 0x5f, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0xee, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x47,
	0x65, 0x74, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x12, 0x67, 0x65, 0x74, 0x55, 0x6e, 0x72,
	0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x4e, 0x0a, 0x15,
	0x73, 0x65, 0x6e, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x32, 0x70,
	0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0xef, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x53,
	0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x32, 0x50, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x12, 0x73, 0x65, 0x6e, 0x64, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x32, 0x70, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x47, 0x0a, 0x12,
	0x67, 0x65, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x62, 0x6f,
	0x64, 0x79, 0x18, 0xf0, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x47, 0x65, 0x74, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42,
	0x6f, 0x64, 0x79, 0x52, 0x10, 0x67, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x6c, 0x69, 0x73,
	0x74, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x47, 0x0a, 0x12, 0x73, 0x65, 0x74, 0x5f, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0xf1, 0x0f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x53, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x6c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x10, 0x73, 0x65,
	0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x54,
	0x0a, 0x17, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x6c, 0x69, 0x73, 0x74, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0xf2, 0x0f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x14,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74,
	0x42, 0x6f, 0x64, 0x79, 0x12, 0x44, 0x0a, 0x11, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0xf4, 0x0f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x0f, 0x6d, 0x61, 0x72, 0x6b, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x51, 0x0a, 0x16, 0x70, 0x75,
	0x6c, 0x6c, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f,
	0x62, 0x6f, 0x64, 0x79, 0x18, 0xf5, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x50, 0x75,
	0x6c, 0x6c, 0x4d, 0x61, 0x72, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x13, 0x70, 0x75, 0x6c, 0x6c, 0x4d, 0x61,
	0x72, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x65, 0x0a,
	0x1c, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x86, 0x10,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x4d, 0x73, 0x67, 0x55, 0x6e,
	0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x18, 0x6d, 0x61, 0x72, 0x6b,
	0x4d, 0x73, 0x67, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x12, 0x5c, 0x0a, 0x19, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x6d, 0x73, 0x67,
	0x5f, 0x67, 0x65, 0x74, 0x5f, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x87, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x4d,
	0x73, 0x67, 0x47, 0x65, 0x74, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x15, 0x6d, 0x61, 0x72,
	0x6b, 0x4d, 0x73, 0x67, 0x47, 0x65, 0x74, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x51, 0x0a, 0x14, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x75, 0x6e, 0x6d, 0x61,
	0x72, 0x6b, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x88, 0x10, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x55, 0x6e, 0x6d, 0x61, 0x72, 0x6b, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64,
	0x79, 0x52, 0x12, 0x62, 0x61, 0x74, 0x63, 0x68, 0x55, 0x6e, 0x6d, 0x61, 0x72, 0x6b, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x09, 0x0a, 0x07, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73,
	0x22, 0x82, 0x05, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x73, 0x64, 0x6b, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x64, 0x6b, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x66, 0x65, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x72, 0x65, 0x66, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a,
	0x69, 0x6e, 0x62, 0x6f, 0x78, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x62,
	0x75, 0x69, 0x6c, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x20,
	0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79,
	0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x21, 0x0a, 0x0c, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x2f, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x0f,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69,
	0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49,
	0x64, 0x12, 0x29, 0x0a, 0x0a, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09,
	0x61, 0x75, 0x74, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x61, 0x75, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65, 0x1a, 0x3a, 0x0a, 0x0c, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x86, 0x01, 0x0a, 0x09, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0xec,
	0x01, 0x0a, 0x17, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2a, 0x0a,
	0x11, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xcc, 0x02,
	0x0a, 0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x27, 0x0a,
	0x0f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12,
	0x32, 0x0a, 0x15, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x6e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x13, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x68, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x83, 0x01, 0x0a,
	0x1b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x50, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x28, 0x0a, 0x08,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x08, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x63,
	0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6e, 0x65, 0x78,
	0x74, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x68, 0x61, 0x73, 0x5f, 0x6d,
	0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x68, 0x61, 0x73, 0x4d, 0x6f,
	0x72, 0x65, 0x22, 0x47, 0x0a, 0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x04, 0x62, 0x6f, 0x64,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x22, 0x45, 0x0a, 0x1a, 0x47,
	0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x27, 0x0a, 0x08, 0x6d, 0x73, 0x67,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x6d, 0x73, 0x67, 0x49, 0x6e,
	0x66, 0x6f, 0x22, 0x8a, 0x01, 0x0a, 0x22, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x49,
	0x6e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x28, 0x0a, 0x08, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x73,
	0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6e, 0x65, 0x78, 0x74, 0x43, 0x75,
	0x72, 0x73, 0x6f, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x68, 0x61, 0x73, 0x5f, 0x6d, 0x6f, 0x72, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x68, 0x61, 0x73, 0x4d, 0x6f, 0x72, 0x65, 0x22,
	0xa7, 0x01, 0x0a, 0x11, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x24, 0x0a, 0x0e, 0x68, 0x65, 0x61, 0x64, 0x5f, 0x6d, 0x73,
	0x67, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x68,
	0x65, 0x61, 0x64, 0x4d, 0x73, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x24, 0x0a, 0x0e, 0x74,
	0x61, 0x69, 0x6c, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0c, 0x74, 0x61, 0x69, 0x6c, 0x4d, 0x73, 0x67, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x73, 0x67, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6d, 0x73, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x29,
	0x0a, 0x10, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73,
	0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65,
	0x73, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x22, 0xd5, 0x01, 0x0a, 0x2e, 0x47, 0x65,
	0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e,
	0x66, 0x6f, 0x49, 0x6e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x42, 0x0a, 0x13,
	0x6d, 0x73, 0x67, 0x73, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x11, 0x6d,
	0x73, 0x67, 0x73, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x2f, 0x0a, 0x14, 0x72, 0x65, 0x61, 0x6c, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11,
	0x72, 0x65, 0x61, 0x6c, 0x4d, 0x73, 0x67, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x5f, 0x72, 0x65, 0x76, 0x65,
	0x72, 0x73, 0x65, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11,
	0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x4e, 0x65, 0x78,
	0x74, 0x22, 0x9c, 0x02, 0x0a, 0x0d, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x32, 0x0a, 0x15, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x13, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x64, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x69, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x69, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x72,
	0x65, 0x66, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x72, 0x65, 0x66, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3a, 0x0a, 0x19, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x17, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x26, 0x0a, 0x0f, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x72, 0x6f, 0x6f, 0x74,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x17, 0x72, 0x6f, 0x6f,
	0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x72, 0x6f, 0x6f, 0x74,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x22, 0xe1, 0x02, 0x0a, 0x10, 0x4e, 0x65, 0x77, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2b,
	0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73,
	0x5f, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x70,
	0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x12, 0x1f, 0x0a,
	0x0b, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x6e, 0x65, 0x78, 0x74, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x12, 0x32,
	0x0a, 0x15, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x49, 0x6e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x0c, 0x72, 0x65, 0x66, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x72, 0x65, 0x66, 0x4d, 0x73, 0x67,
	0x49, 0x6e, 0x66, 0x6f, 0x22, 0xa1, 0x01, 0x0a, 0x15, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x32,
	0x0a, 0x15, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73,
	0x68, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x63,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x68, 0x6f, 0x72, 0x74,
	0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x63,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x22, 0x7f, 0x0a, 0x25, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64,
	0x79, 0x12, 0x56, 0x0a, 0x1b, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x19,
	0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x69, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xca, 0x01, 0x0a, 0x0b, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x73,
	0x65, 0x63, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65,
	0x63, 0x55, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x26,
	0x0a, 0x0f, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6c, 0x65, 0x66, 0x74, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x77, 0x0a, 0x10, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x50, 0x61, 0x67, 0x65, 0x12, 0x30, 0x0a, 0x0c, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x52, 0x0c,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x19, 0x0a, 0x08,
	0x68, 0x61, 0x73, 0x5f, 0x6d, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x68, 0x61, 0x73, 0x4d, 0x6f, 0x72, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x22,
	0x6a, 0x0a, 0x28, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x3e, 0x0a, 0x11, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x5f, 0x70, 0x61, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,
	0x70, 0x61, 0x6e, 0x74, 0x73, 0x50, 0x61, 0x67, 0x65, 0x52, 0x10, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x50, 0x61, 0x67, 0x65, 0x22, 0x37, 0x0a, 0x0a, 0x53,
	0x65, 0x63, 0x55, 0x69, 0x64, 0x50, 0x61, 0x69, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x73,
	0x65, 0x63, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65,
	0x63, 0x55, 0x69, 0x64, 0x22, 0x94, 0x03, 0x0a, 0x27, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x64, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79,
	0x12, 0x31, 0x0a, 0x14, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x13,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x6e, 0x74, 0x73, 0x12, 0x2f, 0x0a, 0x13, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03,
	0x52, 0x12, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x6e, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x65, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x45, 0x0a, 0x18, 0x73, 0x65, 0x63, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0b, 0x2e, 0x53, 0x65, 0x63, 0x55, 0x69, 0x64, 0x50, 0x61, 0x69, 0x72, 0x52, 0x16,
	0x73, 0x65, 0x63, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x43, 0x0a, 0x17, 0x73, 0x65, 0x63, 0x5f, 0x66, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74,
	0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x53, 0x65, 0x63, 0x55, 0x69, 0x64,
	0x50, 0x61, 0x69, 0x72, 0x52, 0x15, 0x73, 0x65, 0x63, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x22, 0x9d, 0x02, 0x0a, 0x2a,
	0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x2f, 0x0a, 0x13, 0x66, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x12, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x43, 0x0a, 0x17, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x5f, 0x73, 0x65, 0x63, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x53, 0x65, 0x63, 0x55, 0x69, 0x64,
	0x50, 0x61, 0x69, 0x72, 0x52, 0x15, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x53, 0x65, 0x63, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x22, 0xd6, 0x01, 0x0a, 0x29,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x2e, 0x0a, 0x0b, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x52, 0x0b, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0x55, 0x0a, 0x21, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x05, 0x0a, 0x03, 0x45,
	0x78, 0x74, 0x22, 0xd3, 0x03, 0x0a, 0x14, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x27, 0x0a, 0x0f, 0x63,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x13, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x69, 0x6e, 0x66,
	0x6f, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x65, 0x73, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63,
	0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x69, 0x63, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x12, 0x30, 0x0a, 0x03, 0x65,
	0x78, 0x74, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e,
	0x45, 0x78, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x03, 0x65, 0x78, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x63, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x63, 0x4f, 0x77, 0x6e, 0x65, 0x72,
	0x1a, 0x36, 0x0a, 0x08, 0x45, 0x78, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x72, 0x0a, 0x23, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x72, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x12,
	0x4b, 0x0a, 0x16, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x63, 0x6f, 0x72, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x14, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xed, 0x01, 0x0a,
	0x23, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x42, 0x6f, 0x64, 0x79, 0x12, 0x4b, 0x0a, 0x16, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x14, 0x63, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x72, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xda, 0x01, 0x0a,
	0x29, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x72, 0x65, 0x45, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x32, 0x0a, 0x09, 0x63, 0x6f,
	0x72, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x72, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x63, 0x6f, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xb4, 0x04, 0x0a, 0x17, 0x43, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x32,
	0x0a, 0x15, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73,
	0x68, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x63,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x68, 0x6f, 0x72, 0x74,
	0x49, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x63,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x6d, 0x69, 0x6e, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1d, 0x0a, 0x0a,
	0x72, 0x65, 0x61, 0x64, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x72, 0x65, 0x61, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x6d,
	0x75, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6d, 0x75, 0x74, 0x65, 0x12,
	0x20, 0x0a, 0x0c, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x5f, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x70, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x4f, 0x6e, 0x54, 0x6f,
	0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x33, 0x0a, 0x03, 0x65, 0x78, 0x74, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x03, 0x65, 0x78, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a,
	0x0a, 0x08, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x73, 0x65,
	0x74, 0x5f, 0x74, 0x6f, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x73, 0x65, 0x74, 0x54, 0x6f, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11,
	0x73, 0x65, 0x74, 0x5f, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x73, 0x65, 0x74, 0x46, 0x61, 0x76, 0x6f,
	0x72, 0x69, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0x36, 0x0a, 0x08, 0x45, 0x78, 0x74, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0xe0, 0x01, 0x0a, 0x26, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x3b, 0x0a, 0x0c, 0x73,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x73, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x78, 0x74, 0x72, 0x61, 0x49,
	0x6e, 0x66, 0x6f, 0x22, 0xe6, 0x01, 0x0a, 0x2c, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x43, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x45, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x42, 0x6f, 0x64, 0x79, 0x12, 0x3b, 0x0a, 0x0c, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x43, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x65, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x4b, 0x0a, 0x1f,
	0x47, 0x65, 0x74, 0x53, 0x74, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x12,
	0x28, 0x0a, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x52,
	0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x22, 0x86, 0x01, 0x0a, 0x1a, 0x47, 0x65,
	0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x68, 0x6f, 0x73, 0x74, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x22, 0x63, 0x0a, 0x09, 0x49, 0x6d, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x70, 0x6c, 0x76, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x70, 0x6c, 0x76, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x72, 0x6c, 0x73, 0x18, 0x64, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x04, 0x75, 0x72, 0x6c, 0x73, 0x22, 0x6f, 0x0a, 0x0b, 0x56, 0x69, 0x64, 0x65, 0x6f,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x76, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x55, 0x72, 0x69, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x72, 0x6c, 0x73, 0x18, 0x64, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x04, 0x75, 0x72, 0x6c, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x73, 0x18, 0x65, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x73, 0x22, 0x33, 0x0a, 0x0b, 0x41, 0x75, 0x64, 0x69,
	0x6f, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x76, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x72, 0x6c,
	0x73, 0x18, 0x64, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x75, 0x72, 0x6c, 0x73, 0x22, 0x21, 0x0a,
	0x0a, 0x46, 0x69, 0x6c, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x13, 0x0a, 0x04, 0x75,
	0x72, 0x6c, 0x73, 0x18, 0xac, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x75, 0x72, 0x6c, 0x73,
	0x22, 0xb5, 0x02, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x55, 0x72, 0x6c,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x72, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x69, 0x12,
	0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2b,
	0x0a, 0x0b, 0x69, 0x6d, 0x67, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x49, 0x6d, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0a, 0x69, 0x6d, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x31, 0x0a, 0x0d, 0x76,
	0x69, 0x64, 0x65, 0x6f, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0c, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x31,
	0x0a, 0x0d, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x2e, 0x0a, 0x0c, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x66, 0x69, 0x6c, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x75,
	0x72, 0x6c, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x6e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x65, 0x64, 0x55, 0x72, 0x6c, 0x73, 0x22, 0x2f, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x54,
	0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64,
	0x79, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x22, 0xc4, 0x04, 0x0a, 0x12, 0x43, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x56, 0x32,
	0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x2b, 0x0a,
	0x11, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x12, 0x49, 0x0a, 0x17, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e,
	0x74, 0x73, 0x50, 0x61, 0x67, 0x65, 0x52, 0x15, 0x66, 0x69, 0x72, 0x73, 0x74, 0x50, 0x61, 0x67,
	0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x2d, 0x0a,
	0x12, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e,
	0x69, 0x73, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x29, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x6e, 0x74, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4b, 0x0a,
	0x16, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f,
	0x72, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x72, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x14, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x54, 0x0a, 0x19, 0x63, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x17, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f,
	0x22, 0x8a, 0x01, 0x0a, 0x23, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x27, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x56, 0x32, 0x52, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x12, 0x19, 0x0a, 0x08, 0x68, 0x61, 0x73, 0x5f, 0x6d, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x68, 0x61, 0x73, 0x4d, 0x6f, 0x72, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x6e, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x6e, 0x65, 0x78, 0x74, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x22, 0xf5, 0x01,
	0x0a, 0x20, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x53, 0x65, 0x6e, 0x64, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f,
	0x64, 0x79, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x65, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x88, 0x01, 0x0a, 0x20, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63,
	0x61, 0x73, 0x74, 0x52, 0x65, 0x63, 0x76, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x28, 0x0a, 0x08, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x68, 0x61, 0x73, 0x5f, 0x6d, 0x6f, 0x72, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x68, 0x61, 0x73, 0x4d, 0x6f, 0x72, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6e, 0x65, 0x78, 0x74, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72,
	0x22, 0x8e, 0x01, 0x0a, 0x11, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x10, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x22, 0x4c, 0x0a, 0x20, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x28, 0x0a, 0x05, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x22,
	0xd1, 0x02, 0x0a, 0x08, 0x56, 0x6f, 0x69, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x1b, 0x0a, 0x09, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x4d, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73, 0x12, 0x20, 0x0a, 0x0c,
	0x63, 0x6f, 0x6e, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x15,
	0x0a, 0x06, 0x76, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x76, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x0a, 0x73, 0x72, 0x76, 0x5f, 0x6d, 0x73, 0x67,
	0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x72, 0x76, 0x4d, 0x73,
	0x67, 0x49, 0x64, 0x22, 0x75, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x6f, 0x69,
	0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x1d, 0x0a,
	0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x56, 0x6f,
	0x69, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x0a, 0x0b,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x76, 0x6f, 0x69, 0x70, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x76, 0x6f, 0x69, 0x70, 0x4d, 0x6f, 0x64, 0x65, 0x22, 0x92, 0x02, 0x0a, 0x14, 0x43,
	0x61, 0x6c, 0x6c, 0x56, 0x6f, 0x69, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42,
	0x6f, 0x64, 0x79, 0x12, 0x1d, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x09, 0x2e, 0x56, 0x6f, 0x69, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e,
	0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x65, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x09, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x65, 0x49, 0x64,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x24, 0x0a, 0x0e,
	0x72, 0x65, 0x66, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x6f, 0x69, 0x70, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x76, 0x6f, 0x69, 0x70, 0x4d, 0x6f, 0x64, 0x65, 0x22,
	0x8f, 0x01, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x6f, 0x69, 0x70, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x1d, 0x0a, 0x04, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x56, 0x6f, 0x69, 0x70, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x6f,
	0x69, 0x70, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x76,
	0x6f, 0x69, 0x70, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x61, 0x6c, 0x6c, 0x65,
	0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x03, 0x52, 0x07, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x65,
	0x73, 0x22, 0x90, 0x01, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x6e, 0x69, 0x63, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72,
	0x6f, 0x74, 0x72, 0x61, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72,
	0x6f, 0x74, 0x72, 0x61, 0x69, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x62, 0x61, 0x73, 0x69, 0x63, 0x5f,
	0x65, 0x78, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x62, 0x61, 0x73, 0x69, 0x63, 0x45, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x26, 0x0a, 0x0f,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x65, 0x78, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x45, 0x78, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x22, 0x40, 0x0a, 0x1a, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x47,
	0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f,
	0x64, 0x79, 0x12, 0x22, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x07, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x22, 0x44, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x55, 0x0a, 0x16,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x21, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x07, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x73, 0x22, 0x73, 0x0a, 0x1d, 0x55, 0x6e, 0x52, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x42, 0x6f, 0x64, 0x79, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x65, 0x74, 0x5f, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e,
	0x73, 0x65, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x28,
	0x0a, 0x10, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0e, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x43, 0x6f, 0x6e, 0x76, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x41, 0x0a, 0x18, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x42, 0x6f, 0x64, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0d, 0x66, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x22, 0x96, 0x02, 0x0a, 0x1a,
	0x47, 0x65, 0x74, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x55, 0x6e, 0x72,
	0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x5c, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x76,
	0x5f, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79,
	0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x76, 0x55, 0x6e, 0x72, 0x65, 0x61,
	0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03,
	0x52, 0x0e, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x76, 0x4c, 0x69, 0x73, 0x74,
	0x1a, 0x42, 0x0a, 0x14, 0x43, 0x6f, 0x6e, 0x76, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x49, 0x0a, 0x0d, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22,
	0x83, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x2b, 0x0a, 0x09,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x68, 0x61, 0x73,
	0x5f, 0x6d, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x68, 0x61, 0x73,
	0x4d, 0x6f, 0x72, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x75, 0x72,
	0x73, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6e, 0x65, 0x78, 0x74, 0x43,
	0x75, 0x72, 0x73, 0x6f, 0x72, 0x22, 0x3b, 0x0a, 0x18, 0x53, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64,
	0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0a, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x4c, 0x69,
	0x73, 0x74, 0x22, 0x41, 0x0a, 0x1c, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f,
	0x64, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x6e, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xa1, 0x01, 0x0a, 0x17, 0x4d, 0x61, 0x72, 0x6b, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64,
	0x79, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x83, 0x01, 0x0a, 0x1b, 0x50, 0x75,
	0x6c, 0x6c, 0x4d, 0x61, 0x72, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x28, 0x0a, 0x08, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x68, 0x61, 0x73, 0x5f, 0x6d, 0x6f, 0x72, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x68, 0x61, 0x73, 0x4d, 0x6f, 0x72, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x6e, 0x65, 0x78, 0x74, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x22,
	0x78, 0x0a, 0x24, 0x4d, 0x61, 0x72, 0x6b, 0x4d, 0x73, 0x67, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x65, 0x74, 0x5f, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0e, 0x73, 0x65, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x26, 0x0a, 0x0f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0d, 0x66, 0x61, 0x69, 0x6c,
	0x65, 0x64, 0x54, 0x61, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x91, 0x02, 0x0a, 0x21, 0x4d, 0x61,
	0x72, 0x6b, 0x4d, 0x73, 0x67, 0x47, 0x65, 0x74, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x12,
	0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x60, 0x0a, 0x10, 0x74, 0x61, 0x67, 0x5f, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x4d, 0x61, 0x72,
	0x6b, 0x4d, 0x73, 0x67, 0x47, 0x65, 0x74, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x2e, 0x54,
	0x61, 0x67, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0e, 0x74, 0x61, 0x67, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x74, 0x61, 0x67,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0d, 0x66, 0x61, 0x69,
	0x6c, 0x65, 0x64, 0x54, 0x61, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0x41, 0x0a, 0x13, 0x54, 0x61,
	0x67, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa8, 0x01,
	0x0a, 0x1e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x55, 0x6e, 0x6d, 0x61, 0x72, 0x6b, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79,
	0x12, 0x2a, 0x0a, 0x11, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xec, 0x01, 0x0a, 0x21, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x50, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x69, 0x74,
	0x56, 0x32, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x28,
	0x0a, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x08,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x56, 0x32, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x65, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x70, 0x65,
	0x72, 0x55, 0x73, 0x65, 0x72, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x6e,
	0x65, 0x78, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x6e, 0x65, 0x78, 0x74, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x12, 0x19, 0x0a, 0x08,
	0x68, 0x61, 0x73, 0x5f, 0x6d, 0x6f, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x68, 0x61, 0x73, 0x4d, 0x6f, 0x72, 0x65, 0x22, 0xba, 0x03, 0x0a, 0x13, 0x4e, 0x65, 0x77, 0x50,
	0x32, 0x50, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12,
	0x1b, 0x0a, 0x09, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x63, 0x5f, 0x73, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x63, 0x53, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x15,
	0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x68, 0x6f,
	0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x63, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x49, 0x64,
	0x12, 0x2b, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x63, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x03, 0x65, 0x78,
	0x74, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x4e, 0x65, 0x77, 0x50, 0x32, 0x50,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x45, 0x78,
	0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x03, 0x65, 0x78, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0x36, 0x0a, 0x08,
	0x45, 0x78, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0xd6, 0x01, 0x0a, 0x20, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x32, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x37, 0x0a, 0x0c, 0x63, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x56, 0x32, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x27, 0x0a,
	0x25, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x32, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x22, 0xb8, 0x01, 0x0a, 0x2f, 0x47, 0x65, 0x74, 0x43, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69,
	0x73, 0x74, 0x42, 0x79, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x56, 0x32, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x49, 0x0a, 0x16, 0x63, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x43, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x56, 0x32, 0x52,
	0x14, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x68, 0x61, 0x73, 0x5f, 0x6d, 0x6f, 0x72,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x68, 0x61, 0x73, 0x4d, 0x6f, 0x72, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6e, 0x65, 0x78, 0x74, 0x43, 0x75, 0x72, 0x73, 0x6f,
	0x72, 0x22, 0xb3, 0x01, 0x0a, 0x2a, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x54,
	0x6f, 0x70, 0x56, 0x32, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79,
	0x12, 0x49, 0x0a, 0x16, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x56, 0x32, 0x52, 0x14, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x68,
	0x61, 0x73, 0x5f, 0x6d, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x68,
	0x61, 0x73, 0x4d, 0x6f, 0x72, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x63,
	0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6e, 0x65, 0x78,
	0x74, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x22, 0xd8, 0x02, 0x0a, 0x14, 0x53, 0x74, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x32, 0x0a, 0x15, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x13, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x68, 0x6f,
	0x72, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x12, 0x2f, 0x0a, 0x0c,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x64, 0x79,
	0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x27, 0x0a,
	0x0f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x30, 0x0a, 0x03, 0x65, 0x78, 0x74, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x53, 0x74, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x78, 0x74,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x03, 0x65, 0x78, 0x74, 0x1a, 0x36, 0x0a, 0x08, 0x45, 0x78,
	0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0xcc, 0x01, 0x0a, 0x27, 0x47, 0x65, 0x74, 0x53, 0x74, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x1f,
	0x0a, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x6e, 0x65, 0x78, 0x74, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x12,
	0x19, 0x0a, 0x08, 0x68, 0x61, 0x73, 0x5f, 0x6d, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x68, 0x61, 0x73, 0x4d, 0x6f, 0x72, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x12, 0x42, 0x0a,
	0x11, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x53, 0x74, 0x72, 0x61, 0x6e,
	0x67, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x10, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73,
	0x74, 0x22, 0x34, 0x0a, 0x32, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73,
	0x52, 0x65, 0x61, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x56, 0x33, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x22, 0x1c, 0x0a, 0x1a, 0x53, 0x65, 0x6e, 0x64, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x32, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x42, 0x6f, 0x64, 0x79, 0x22, 0xee, 0x25, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x44, 0x0a, 0x11, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x64, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x0f, 0x73, 0x65, 0x6e,
	0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x52, 0x0a, 0x16,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0xc8, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x50, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x13, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x50, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x42, 0x6f, 0x64, 0x79,
	0x12, 0x66, 0x0a, 0x1e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x70, 0x65, 0x72,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x76, 0x32, 0x5f, 0x62, 0x6f,
	0x64, 0x79, 0x18, 0xcb, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x50, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x69, 0x74, 0x56,
	0x32, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x19, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x50, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e,
	0x69, 0x74, 0x56, 0x32, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x50, 0x0a, 0x16, 0x67, 0x65, 0x74, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x5f, 0x62, 0x6f,
	0x64, 0x79, 0x18, 0xd3, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x47, 0x65, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x12, 0x67, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x42, 0x79, 0x49, 0x64, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x67, 0x0a, 0x1d, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0xad, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x49, 0x6e, 0x43,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x1a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x49, 0x6e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x6f, 0x64, 0x79, 0x12, 0x8d, 0x01, 0x0a, 0x2b, 0x67, 0x65, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x69,
	0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62,
	0x6f, 0x64, 0x79, 0x18, 0xae, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x47, 0x65, 0x74,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x66,
	0x6f, 0x49, 0x6e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x26, 0x67, 0x65, 0x74,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e, 0x66,
	0x6f, 0x49, 0x6e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x6f, 0x64, 0x79, 0x12, 0x47, 0x0a, 0x16, 0x68, 0x61, 0x73, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x18, 0xf4, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x4e, 0x65, 0x77, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x52, 0x13, 0x68, 0x61, 0x73, 0x4e, 0x65, 0x77, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x51, 0x0a, 0x1a,
	0x68, 0x61, 0x73, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x70, 0x32, 0x70, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x18, 0xf8, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x4e, 0x65, 0x77, 0x50, 0x32, 0x50, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x52, 0x16, 0x68, 0x61, 0x73, 0x4e, 0x65, 0x77, 0x50,
	0x32, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12,
	0x70, 0x0a, 0x20, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x62,
	0x6f, 0x64, 0x79, 0x18, 0xe7, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f,
	0x64, 0x79, 0x52, 0x1d, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e, 0x66, 0x6f, 0x42, 0x6f, 0x64,
	0x79, 0x12, 0x61, 0x0a, 0x1b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x32, 0x5f, 0x62, 0x6f, 0x64, 0x79,
	0x18, 0xe1, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x32, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x18, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x32,
	0x42, 0x6f, 0x64, 0x79, 0x12, 0x72, 0x0a, 0x22, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x5f, 0x76, 0x32, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0xe2, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x32, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x1d, 0x67, 0x65, 0x74, 0x43, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69,
	0x73, 0x74, 0x56, 0x32, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x92, 0x01, 0x0a, 0x2e, 0x67, 0x65, 0x74,
	0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x62, 0x79, 0x5f, 0x66, 0x61, 0x76, 0x6f, 0x72,
	0x69, 0x74, 0x65, 0x5f, 0x76, 0x32, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0xe3, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x30, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x46, 0x61,
	0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x56, 0x32, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x42, 0x6f, 0x64, 0x79, 0x52, 0x27, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x46,
	0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x56, 0x32, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x83, 0x01,
	0x0a, 0x29, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x62, 0x79, 0x5f,
	0x74, 0x6f, 0x70, 0x5f, 0x76, 0x32, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0xe4, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x54, 0x6f,
	0x70, 0x56, 0x32, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x52,
	0x22, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x54, 0x6f, 0x70, 0x56, 0x32, 0x42,
	0x6f, 0x64, 0x79, 0x12, 0x70, 0x0a, 0x1e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73,
	0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0xdd, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x43,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x1c, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74,
	0x73, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x76, 0x0a, 0x22, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x8a, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x64, 0x64, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x1f, 0x63, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x64, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x7f, 0x0a,
	0x25, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74,
	0x73, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x8b, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x22, 0x63, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x7c,
	0x0a, 0x24, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e,
	0x74, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x8f, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x21, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x64, 0x0a, 0x1c,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x70,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0xc1, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x19, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x42, 0x6f,
	0x64, 0x79, 0x12, 0x6b, 0x0a, 0x1f, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x85, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x47,
	0x65, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f,
	0x64, 0x79, 0x52, 0x1b, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x6f, 0x64, 0x79, 0x12,
	0x6b, 0x0a, 0x1f, 0x73, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x62, 0x6f,
	0x64, 0x79, 0x18, 0x86, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x53, 0x65, 0x74, 0x43,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x72, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x52,
	0x1b, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x7e, 0x0a, 0x26,
	0x75, 0x70, 0x73, 0x65, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x88, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x72, 0x65, 0x45, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x21, 0x75, 0x70, 0x73, 0x65, 0x72,
	0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x72,
	0x65, 0x45, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x74, 0x0a, 0x22,
	0x73, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x62, 0x6f,
	0x64, 0x79, 0x18, 0x99, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x53, 0x65, 0x74, 0x43,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f,
	0x64, 0x79, 0x52, 0x1e, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x6f,
	0x64, 0x79, 0x12, 0x87, 0x01, 0x0a, 0x29, 0x75, 0x70, 0x73, 0x65, 0x72, 0x74, 0x5f, 0x63, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x5f, 0x65, 0x78, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x62, 0x6f, 0x64, 0x79,
	0x18, 0x9a, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74,
	0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x45, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x24, 0x75, 0x70, 0x73, 0x65, 0x72, 0x74, 0x43, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x45, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x6e, 0x0a, 0x1e,
	0x67, 0x65, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0xe9,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x72, 0x61, 0x6e,
	0x67, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x52,
	0x1b, 0x67, 0x65, 0x74, 0x53, 0x74, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x5e, 0x0a, 0x1a,
	0x67, 0x65, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0xe9, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x72, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42,
	0x6f, 0x64, 0x79, 0x52, 0x17, 0x67, 0x65, 0x74, 0x53, 0x74, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x72,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x75, 0x0a, 0x1c,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x61,
	0x64, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0xe3, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74,
	0x73, 0x52, 0x65, 0x61, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x56, 0x33, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x19, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x61, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x42,
	0x6f, 0x64, 0x79, 0x12, 0x4f, 0x0a, 0x15, 0x67, 0x65, 0x74, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0xd3, 0x0f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79,
	0x52, 0x12, 0x67, 0x65, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x42, 0x6f, 0x64, 0x79, 0x12, 0x49, 0x0a, 0x13, 0x67, 0x65, 0x74, 0x5f, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x5f, 0x75, 0x72, 0x6c, 0x73, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0xd4, 0x0f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x55, 0x72, 0x6c,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x10, 0x67,
	0x65, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x55, 0x72, 0x6c, 0x73, 0x42, 0x6f, 0x64, 0x79, 0x12,
	0x3f, 0x0a, 0x0f, 0x67, 0x65, 0x74, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x62, 0x6f,
	0x64, 0x79, 0x18, 0xd5, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x47, 0x65, 0x74, 0x54,
	0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64,
	0x79, 0x52, 0x0d, 0x67, 0x65, 0x74, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x42, 0x6f, 0x64, 0x79,
	0x12, 0x62, 0x0a, 0x1a, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0xd6,
	0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x17, 0x67, 0x65, 0x74,
	0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74,
	0x42, 0x6f, 0x64, 0x79, 0x12, 0x61, 0x0a, 0x1b, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73,
	0x74, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x62,
	0x6f, 0x64, 0x79, 0x18, 0xd7, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x42, 0x72, 0x6f,
	0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x18, 0x62,
	0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x61, 0x0a, 0x1b, 0x62, 0x72, 0x6f, 0x61, 0x64,
	0x63, 0x61, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x76, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0xd8, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x52, 0x65, 0x63, 0x76, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79,
	0x52, 0x18, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x52, 0x65, 0x63, 0x76, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x61, 0x0a, 0x1b, 0x62, 0x72,
	0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0xd9, 0x0f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42,
	0x6f, 0x64, 0x79, 0x52, 0x18, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x42, 0x0a,
	0x10, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x76, 0x6f, 0x69, 0x70, 0x5f, 0x62, 0x6f, 0x64,
	0x79, 0x18, 0xdb, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x56, 0x6f, 0x69, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64,
	0x79, 0x52, 0x0e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x6f, 0x69, 0x70, 0x42, 0x6f, 0x64,
	0x79, 0x12, 0x3c, 0x0a, 0x0e, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x76, 0x6f, 0x69, 0x70, 0x5f, 0x62,
	0x6f, 0x64, 0x79, 0x18, 0xdc, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x43, 0x61, 0x6c,
	0x6c, 0x56, 0x6f, 0x69, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64,
	0x79, 0x52, 0x0c, 0x63, 0x61, 0x6c, 0x6c, 0x56, 0x6f, 0x69, 0x70, 0x42, 0x6f, 0x64, 0x79, 0x12,
	0x42, 0x0a, 0x10, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x76, 0x6f, 0x69, 0x70, 0x5f, 0x62,
	0x6f, 0x64, 0x79, 0x18, 0xdd, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x56, 0x6f, 0x69, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42,
	0x6f, 0x64, 0x79, 0x52, 0x0e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x6f, 0x69, 0x70, 0x42,
	0x6f, 0x64, 0x79, 0x12, 0x46, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x67,
	0x65, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0xdf, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x0e, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x42, 0x0a, 0x10, 0x67,
	0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18,
	0xe1, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x52,
	0x0e, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x42, 0x6f, 0x64, 0x79, 0x12,
	0x58, 0x0a, 0x18, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0xe2, 0x0f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x55, 0x6e, 0x52, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f,
	0x64, 0x79, 0x52, 0x15, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x48, 0x0a, 0x12, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18,
	0xe3, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64,
	0x79, 0x52, 0x10, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x42,
	0x6f, 0x64, 0x79, 0x12, 0x4f, 0x0a, 0x15, 0x67, 0x65, 0x74, 0x5f, 0x75, 0x6e, 0x72, 0x65, 0x61,
	0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0xee, 0x0f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79,
	0x52, 0x12, 0x67, 0x65, 0x74, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x42, 0x6f, 0x64, 0x79, 0x12, 0x4f, 0x0a, 0x15, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x32, 0x70, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0xef, 0x0f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x50, 0x32, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64,
	0x79, 0x52, 0x12, 0x73, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x32,
	0x70, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x48, 0x0a, 0x12, 0x67, 0x65, 0x74, 0x5f, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0xf0, 0x0f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x10, 0x67,
	0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x12,
	0x48, 0x0a, 0x12, 0x73, 0x65, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74,
	0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0xf1, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x53,
	0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x10, 0x73, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x6c, 0x69, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x55, 0x0a, 0x17, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x5f,
	0x62, 0x6f, 0x64, 0x79, 0x18, 0xf2, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x49, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x14, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x49, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79,
	0x12, 0x45, 0x0a, 0x11, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0xf4, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x4d,
	0x61, 0x72, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x0f, 0x6d, 0x61, 0x72, 0x6b, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x52, 0x0a, 0x16, 0x70, 0x75, 0x6c, 0x6c, 0x5f,
	0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x62, 0x6f, 0x64,
	0x79, 0x18, 0xf5, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x50, 0x75, 0x6c, 0x6c, 0x4d,
	0x61, 0x72, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x13, 0x70, 0x75, 0x6c, 0x6c, 0x4d, 0x61, 0x72, 0x6b,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x66, 0x0a, 0x1c, 0x6d,
	0x61, 0x72, 0x6b, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x86, 0x10, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x4d, 0x73, 0x67, 0x55, 0x6e, 0x72, 0x65,
	0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x18, 0x6d, 0x61, 0x72, 0x6b, 0x4d,
	0x73, 0x67, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x12, 0x5d, 0x0a, 0x19, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x6d, 0x73, 0x67, 0x5f,
	0x67, 0x65, 0x74, 0x5f, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x87, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x4d, 0x73,
	0x67, 0x47, 0x65, 0x74, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x15, 0x6d, 0x61, 0x72,
	0x6b, 0x4d, 0x73, 0x67, 0x47, 0x65, 0x74, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x52, 0x0a, 0x14, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x75, 0x6e, 0x6d, 0x61,
	0x72, 0x6b, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x88, 0x10, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x55, 0x6e, 0x6d, 0x61, 0x72, 0x6b, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f,
	0x64, 0x79, 0x52, 0x12, 0x62, 0x61, 0x74, 0x63, 0x68, 0x55, 0x6e, 0x6d, 0x61, 0x72, 0x6b, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xdb, 0x03, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x44, 0x65, 0x73, 0x63, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x69, 0x6e, 0x62, 0x6f,
	0x78, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f,
	0x64, 0x79, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x12, 0x15, 0x0a, 0x06, 0x6c, 0x6f, 0x67, 0x5f,
	0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x6f, 0x67, 0x49, 0x64, 0x12,
	0x30, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x73, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x30, 0x0a, 0x14, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x61, 0x72, 0x72, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x41, 0x72, 0x72, 0x69, 0x76, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x39, 0x0a,
	0x19, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x16, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0x3a, 0x0a, 0x0c, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x42, 0x0a, 0x5a, 0x08, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ws_payload_proto_rawDescOnce sync.Once
	file_ws_payload_proto_rawDescData = file_ws_payload_proto_rawDesc
)

func file_ws_payload_proto_rawDescGZIP() []byte {
	file_ws_payload_proto_rawDescOnce.Do(func() {
		file_ws_payload_proto_rawDescData = protoimpl.X.CompressGZIP(file_ws_payload_proto_rawDescData)
	})
	return file_ws_payload_proto_rawDescData
}

var file_ws_payload_proto_msgTypes = make([]protoimpl.MessageInfo, 175)
var file_ws_payload_proto_goTypes = []interface{}{
	(*Header)(nil),                                            // 0: Header
	(*Frame)(nil),                                             // 1: Frame
	(*MessagesPerUserInitV2RequestBody)(nil),                  // 2: MessagesPerUserInitV2RequestBody
	(*ReferencedMessageInfo)(nil),                             // 3: ReferencedMessageInfo
	(*SendMessageRequestBody)(nil),                            // 4: SendMessageRequestBody
	(*MessagesPerUserRequestBody)(nil),                        // 5: MessagesPerUserRequestBody
	(*GetMessageByIdRequestBody)(nil),                         // 6: GetMessageByIdRequestBody
	(*MessagesInConversationRequestBody)(nil),                 // 7: MessagesInConversationRequestBody
	(*GetMessagesCheckInfoInConversationRequestBody)(nil),     // 8: GetMessagesCheckInfoInConversationRequestBody
	(*SendUserActionRequestBody)(nil),                         // 9: SendUserActionRequestBody
	(*SendInputStatusRequestBody)(nil),                        // 10: SendInputStatusRequestBody
	(*DeleteConversationRequestBody)(nil),                     // 11: DeleteConversationRequestBody
	(*MarkConversationReadRequestBody)(nil),                   // 12: MarkConversationReadRequestBody
	(*ConversationParticipantsListRequestBody)(nil),           // 13: ConversationParticipantsListRequestBody
	(*DissolveConversationRequestBody)(nil),                   // 14: DissolveConversationRequestBody
	(*CreateConversationV2RequestBody)(nil),                   // 15: CreateConversationV2RequestBody
	(*GetConversationInfoListV2RequestBody)(nil),              // 16: GetConversationInfoListV2RequestBody
	(*ConversationsPerUserByFavoriteV2RequestBody)(nil),       // 17: ConversationsPerUserByFavoriteV2RequestBody
	(*ConversationsPerUserByTopV2RequestBody)(nil),            // 18: ConversationsPerUserByTopV2RequestBody
	(*ConversationAddParticipantsRequestBody)(nil),            // 19: ConversationAddParticipantsRequestBody
	(*ConversationRemoveParticipantsRequestBody)(nil),         // 20: ConversationRemoveParticipantsRequestBody
	(*ConversationLeaveRequestBody)(nil),                      // 21: ConversationLeaveRequestBody
	(*UpdateConversationParticipantRequestBody)(nil),          // 22: UpdateConversationParticipantRequestBody
	(*DeleteMessageRequestBody)(nil),                          // 23: DeleteMessageRequestBody
	(*RecallMessageRequestBody)(nil),                          // 24: RecallMessageRequestBody
	(*ModifyPropertyContent)(nil),                             // 25: ModifyPropertyContent
	(*ModifyPropertyBody)(nil),                                // 26: ModifyPropertyBody
	(*ModifyMessagePropertyRequestBody)(nil),                  // 27: ModifyMessagePropertyRequestBody
	(*GetConversationCoreInfoRequestBody)(nil),                // 28: GetConversationCoreInfoRequestBody
	(*SetConversationCoreInfoRequestBody)(nil),                // 29: SetConversationCoreInfoRequestBody
	(*UpsertConversationCoreExtInfoRequestBody)(nil),          // 30: UpsertConversationCoreExtInfoRequestBody
	(*SetConversationSettingInfoRequestBody)(nil),             // 31: SetConversationSettingInfoRequestBody
	(*UpsertConversationSettingExtInfoRequestBody)(nil),       // 32: UpsertConversationSettingExtInfoRequestBody
	(*GetStrangerConversationListRequestBody)(nil),            // 33: GetStrangerConversationListRequestBody
	(*GetStrangerMessagesRequestBody)(nil),                    // 34: GetStrangerMessagesRequestBody
	(*DeleteStrangerMessageRequestBody)(nil),                  // 35: DeleteStrangerMessageRequestBody
	(*DeleteStrangerConversationRequestBody)(nil),             // 36: DeleteStrangerConversationRequestBody
	(*DeleteStrangerAllConversationRequestBody)(nil),          // 37: DeleteStrangerAllConversationRequestBody
	(*MarkStrangerConversationReadRequestBody)(nil),           // 38: MarkStrangerConversationReadRequestBody
	(*MarkStrangerAllConversationReadRequestBody)(nil),        // 39: MarkStrangerAllConversationReadRequestBody
	(*GetConversationParticipantsMinIndexV3RequestBody)(nil),  // 40: GetConversationParticipantsMinIndexV3RequestBody
	(*GetUploadTokenRequestBody)(nil),                         // 41: GetUploadTokenRequestBody
	(*GetMediaUrlsRequestBody)(nil),                           // 42: GetMediaUrlsRequestBody
	(*GetTicketRequestBody)(nil),                              // 43: GetTicketRequestBody
	(*GetUserConversationListRequestBody)(nil),                // 44: GetUserConversationListRequestBody
	(*BroadcastSendMessageRequestBody)(nil),                   // 45: BroadcastSendMessageRequestBody
	(*GetConversationParticipantsReadIndexV3RequestBody)(nil), // 46: GetConversationParticipantsReadIndexV3RequestBody
	(*BroadcastRecvMessageRequestBody)(nil),                   // 47: BroadcastRecvMessageRequestBody
	(*BroadcastUserCounterRequestBody)(nil),                   // 48: BroadcastUserCounterRequestBody
	(*ClientACKRequestBody)(nil),                              // 49: ClientACKRequestBody
	(*CreateVoipRequestBody)(nil),                             // 50: CreateVoipRequestBody
	(*CallVoipRequestBody)(nil),                               // 51: CallVoipRequestBody
	(*UpdateVoipRequestBody)(nil),                             // 52: UpdateVoipRequestBody
	(*ChannelHeartBeatRequestBody)(nil),                       // 53: ChannelHeartBeatRequestBody
	(*ProfileGetInfoRequestBody)(nil),                         // 54: ProfileGetInfoRequestBody
	(*ReportClientMetricsRequestBody)(nil),                    // 55: ReportClientMetricsRequestBody
	(*GetConfigsRequestBody)(nil),                             // 56: GetConfigsRequestBody
	(*ModifyMessageExtRequestBody)(nil),                       // 57: ModifyMessageExtRequestBody
	(*ConvCountReport)(nil),                                   // 58: ConvCountReport
	(*UnReadCountReportRequestBody)(nil),                      // 59: UnReadCountReportRequestBody
	(*BlockMembersRequestBody)(nil),                           // 60: BlockMembersRequestBody
	(*BlockConversationRequestBody)(nil),                      // 61: BlockConversationRequestBody
	(*GetUnreadCountRequestBody)(nil),                         // 62: GetUnreadCountRequestBody
	(*SendMessageP2PRequestBody)(nil),                         // 63: SendMessageP2PRequestBody
	(*GetBlockListRequestBody)(nil),                           // 64: GetBlockListRequestBody
	(*SetBlocklistRequestBody)(nil),                           // 65: SetBlocklistRequestBody
	(*CheckInBlockListRequestBody)(nil),                       // 66: CheckInBlockListRequestBody
	(*MarkMessageRequestBody)(nil),                            // 67: MarkMessageRequestBody
	(*PullMarkMessageRequestBody)(nil),                        // 68: PullMarkMessageRequestBody
	(*MarkMsgUnreadCountReportRequestBody)(nil),               // 69: MarkMsgUnreadCountReportRequestBody
	(*MarkMsgGetUnreadCountRequestBody)(nil),                  // 70: MarkMsgGetUnreadCountRequestBody
	(*BatchUnmarkMessageRequestBody)(nil),                     // 71: BatchUnmarkMessageRequestBody
	(*RequestBody)(nil),                                       // 72: RequestBody
	(*Headers)(nil),                                           // 73: Headers
	(*Request)(nil),                                           // 74: Request
	(*TokenInfo)(nil),                                         // 75: TokenInfo
	(*SendMessageResponseBody)(nil),                           // 76: SendMessageResponseBody
	(*MessageBody)(nil),                                       // 77: MessageBody
	(*MessagesPerUserResponseBody)(nil),                       // 78: MessagesPerUserResponseBody
	(*MessageInfo)(nil),                                       // 79: MessageInfo
	(*GetMessageByIdResponseBody)(nil),                        // 80: GetMessageByIdResponseBody
	(*MessagesInConversationResponseBody)(nil),                // 81: MessagesInConversationResponseBody
	(*MessagesCheckInfo)(nil),                                 // 82: MessagesCheckInfo
	(*GetMessagesCheckInfoInConversationResponseBody)(nil),    // 83: GetMessagesCheckInfoInConversationResponseBody
	(*ReferenceInfo)(nil),                                     // 84: ReferenceInfo
	(*NewMessageNotify)(nil),                                  // 85: NewMessageNotify
	(*ConversationCheckInfo)(nil),                             // 86: ConversationCheckInfo
	(*GetConversationsCheckInfoResponseBody)(nil),             // 87: GetConversationsCheckInfoResponseBody
	(*Participant)(nil),                                       // 88: Participant
	(*ParticipantsPage)(nil),                                  // 89: ParticipantsPage
	(*ConversationParticipantsListResponseBody)(nil),          // 90: ConversationParticipantsListResponseBody
	(*SecUidPair)(nil),                                        // 91: SecUidPair
	(*ConversationAddParticipantsResponseBody)(nil),           // 92: ConversationAddParticipantsResponseBody
	(*ConversationRemoveParticipantsResponseBody)(nil),        // 93: ConversationRemoveParticipantsResponseBody
	(*UpdateConversationParticipantResponseBody)(nil),         // 94: UpdateConversationParticipantResponseBody
	(*ModifyMessagePropertyResponseBody)(nil),                 // 95: ModifyMessagePropertyResponseBody
	(*Ext)(nil),                                                // 96: Ext
	(*ConversationCoreInfo)(nil),                               // 97: ConversationCoreInfo
	(*GetConversationCoreInfoResponseBody)(nil),                // 98: GetConversationCoreInfoResponseBody
	(*SetConversationCoreInfoResponseBody)(nil),                // 99: SetConversationCoreInfoResponseBody
	(*UpsertConversationCoreExtInfoResponseBody)(nil),          // 100: UpsertConversationCoreExtInfoResponseBody
	(*ConversationSettingInfo)(nil),                            // 101: ConversationSettingInfo
	(*SetConversationSettingInfoResponseBody)(nil),             // 102: SetConversationSettingInfoResponseBody
	(*UpsertConversationSettingExtInfoResponseBody)(nil),       // 103: UpsertConversationSettingExtInfoResponseBody
	(*GetStrangerMessagesResponseBody)(nil),                    // 104: GetStrangerMessagesResponseBody
	(*GetUploadTokenResponseBody)(nil),                         // 105: GetUploadTokenResponseBody
	(*ImgOption)(nil),                                          // 106: ImgOption
	(*VideoOption)(nil),                                        // 107: VideoOption
	(*AudioOption)(nil),                                        // 108: AudioOption
	(*FileOption)(nil),                                         // 109: FileOption
	(*GetMediaUrlsResponseBody)(nil),                           // 110: GetMediaUrlsResponseBody
	(*GetTicketResponseBody)(nil),                              // 111: GetTicketResponseBody
	(*ConversationInfoV2)(nil),                                 // 112: ConversationInfoV2
	(*GetUserConversationListResponseBody)(nil),                // 113: GetUserConversationListResponseBody
	(*BroadcastSendMessageResponseBody)(nil),                   // 114: BroadcastSendMessageResponseBody
	(*BroadcastRecvMessageResponseBody)(nil),                   // 115: BroadcastRecvMessageResponseBody
	(*BroadcastUserInfo)(nil),                                  // 116: BroadcastUserInfo
	(*BroadcastUserCounterResponseBody)(nil),                   // 117: BroadcastUserCounterResponseBody
	(*VoipInfo)(nil),                                           // 118: VoipInfo
	(*CreateVoipResponseBody)(nil),                             // 119: CreateVoipResponseBody
	(*CallVoipResponseBody)(nil),                               // 120: CallVoipResponseBody
	(*UpdateVoipResponseBody)(nil),                             // 121: UpdateVoipResponseBody
	(*Profile)(nil),                                            // 122: Profile
	(*ProfileGetInfoResponseBody)(nil),                         // 123: ProfileGetInfoResponseBody
	(*Config)(nil),                                             // 124: Config
	(*GetConfigsResponseBody)(nil),                             // 125: GetConfigsResponseBody
	(*UnReadCountReportResponseBody)(nil),                      // 126: UnReadCountReportResponseBody
	(*BlockMembersResponseBody)(nil),                           // 127: BlockMembersResponseBody
	(*GetUnreadCountResponseBody)(nil),                         // 128: GetUnreadCountResponseBody
	(*BlockUserInfo)(nil),                                      // 129: BlockUserInfo
	(*GetBlockListResponseBody)(nil),                           // 130: GetBlockListResponseBody
	(*SetBlocklistResponseBody)(nil),                           // 131: SetBlocklistResponseBody
	(*CheckInBlockListResponseBody)(nil),                       // 132: CheckInBlockListResponseBody
	(*MarkMessageResponseBody)(nil),                            // 133: MarkMessageResponseBody
	(*PullMarkMessageResponseBody)(nil),                        // 134: PullMarkMessageResponseBody
	(*MarkMsgUnreadCountReportResponseBody)(nil),               // 135: MarkMsgUnreadCountReportResponseBody
	(*MarkMsgGetUnreadCountResponseBody)(nil),                  // 136: MarkMsgGetUnreadCountResponseBody
	(*BatchUnmarkMessageResponseBody)(nil),                     // 137: BatchUnmarkMessageResponseBody
	(*MessagesPerUserInitV2ResponseBody)(nil),                  // 138: MessagesPerUserInitV2ResponseBody
	(*NewP2PMessageNotify)(nil),                                // 139: NewP2PMessageNotify
	(*CreateConversationV2ResponseBody)(nil),                   // 140: CreateConversationV2ResponseBody
	(*GetConversationInfoListV2ResponseBody)(nil),              // 141: GetConversationInfoListV2ResponseBody
	(*GetConversationInfoListByFavoriteV2ResponseBody)(nil),    // 142: GetConversationInfoListByFavoriteV2ResponseBody
	(*GetConversationInfoListByTopV2ResponseBody)(nil),         // 143: GetConversationInfoListByTopV2ResponseBody
	(*StrangerConversation)(nil),                               // 144: StrangerConversation
	(*GetStrangerConversationListResponseBody)(nil),            // 145: GetStrangerConversationListResponseBody
	(*GetConversationParticipantsReadIndexV3ResponseBody)(nil), // 146: GetConversationParticipantsReadIndexV3ResponseBody
	(*SendMessageP2PResponseBody)(nil),                         // 147: SendMessageP2PResponseBody
	(*ResponseBody)(nil),                                       // 148: ResponseBody
	(*Response)(nil),                                           // 149: Response
	nil,                                                        // 150: SendMessageRequestBody.ExtEntry
	nil,                                                        // 151: SendUserActionRequestBody.ExtraEntry
	nil,                                                        // 152: SendInputStatusRequestBody.ExtraEntry
	nil,                                                        // 153: CreateConversationV2RequestBody.BizExtEntry
	nil,                                                        // 154: ConversationAddParticipantsRequestBody.BizExtEntry
	nil,                                                        // 155: ConversationRemoveParticipantsRequestBody.BizExtEntry
	nil,                                                        // 156: UpdateConversationParticipantRequestBody.BizExtEntry
	nil,                                                        // 157: UpsertConversationCoreExtInfoRequestBody.ExtEntry
	nil,                                                        // 158: UpsertConversationSettingExtInfoRequestBody.ExtEntry
	nil,                                                        // 159: GetTicketRequestBody.ExtEntry
	nil,                                                        // 160: BroadcastSendMessageRequestBody.ExtEntry
	nil,                                                        // 161: CallVoipRequestBody.ExtEntry
	nil,                                                        // 162: ModifyMessageExtRequestBody.ExtEntry
	nil,                                                        // 163: BlockMembersRequestBody.BlockTimeEntry
	nil,                                                        // 164: BlockMembersRequestBody.BizExtEntry
	nil,                                                        // 165: SendMessageP2PRequestBody.ExtEntry
	nil,                                                        // 166: MarkMsgUnreadCountReportRequestBody.TagUnreadCountEntry
	nil,                                                        // 167: Request.HeadersEntry
	nil,                                                        // 168: ConversationCoreInfo.ExtEntry
	nil,                                                        // 169: ConversationSettingInfo.ExtEntry
	nil,                                                        // 170: GetUnreadCountResponseBody.ConvUnreadCountEntry
	nil,                                                        // 171: MarkMsgGetUnreadCountResponseBody.TagUnreadCountEntry
	nil,                                                        // 172: NewP2PMessageNotify.ExtEntry
	nil,                                                        // 173: StrangerConversation.ExtEntry
	nil,                                                        // 174: Response.HeadersEntry
}
var file_ws_payload_proto_depIdxs = []int32{
	0,   // 0: Frame.headers:type_name -> Header
	150, // 1: SendMessageRequestBody.ext:type_name -> SendMessageRequestBody.ExtEntry
	3,   // 2: SendMessageRequestBody.ref_msg_info:type_name -> ReferencedMessageInfo
	151, // 3: SendUserActionRequestBody.extra:type_name -> SendUserActionRequestBody.ExtraEntry
	152, // 4: SendInputStatusRequestBody.extra:type_name -> SendInputStatusRequestBody.ExtraEntry
	153, // 5: CreateConversationV2RequestBody.biz_ext:type_name -> CreateConversationV2RequestBody.BizExtEntry
	154, // 6: ConversationAddParticipantsRequestBody.biz_ext:type_name -> ConversationAddParticipantsRequestBody.BizExtEntry
	155, // 7: ConversationRemoveParticipantsRequestBody.biz_ext:type_name -> ConversationRemoveParticipantsRequestBody.BizExtEntry
	156, // 8: UpdateConversationParticipantRequestBody.biz_ext:type_name -> UpdateConversationParticipantRequestBody.BizExtEntry
	25,  // 9: ModifyPropertyBody.modify_property_content:type_name -> ModifyPropertyContent
	26,  // 10: ModifyMessagePropertyRequestBody.property_list:type_name -> ModifyPropertyBody
	157, // 11: UpsertConversationCoreExtInfoRequestBody.ext:type_name -> UpsertConversationCoreExtInfoRequestBody.ExtEntry
	158, // 12: UpsertConversationSettingExtInfoRequestBody.ext:type_name -> UpsertConversationSettingExtInfoRequestBody.ExtEntry
	106, // 13: GetMediaUrlsRequestBody.img_options:type_name -> ImgOption
	107, // 14: GetMediaUrlsRequestBody.video_options:type_name -> VideoOption
	108, // 15: GetMediaUrlsRequestBody.audio_options:type_name -> AudioOption
	109, // 16: GetMediaUrlsRequestBody.file_options:type_name -> FileOption
	159, // 17: GetTicketRequestBody.ext:type_name -> GetTicketRequestBody.ExtEntry
	160, // 18: BroadcastSendMessageRequestBody.ext:type_name -> BroadcastSendMessageRequestBody.ExtEntry
	161, // 19: CallVoipRequestBody.ext:type_name -> CallVoipRequestBody.ExtEntry
	162, // 20: ModifyMessageExtRequestBody.ext:type_name -> ModifyMessageExtRequestBody.ExtEntry
	58,  // 21: UnReadCountReportRequestBody.conv_unread_count:type_name -> ConvCountReport
	163, // 22: BlockMembersRequestBody.block_time:type_name -> BlockMembersRequestBody.BlockTimeEntry
	164, // 23: BlockMembersRequestBody.biz_ext:type_name -> BlockMembersRequestBody.BizExtEntry
	165, // 24: SendMessageP2PRequestBody.ext:type_name -> SendMessageP2PRequestBody.ExtEntry
	166, // 25: MarkMsgUnreadCountReportRequestBody.tag_unread_count:type_name -> MarkMsgUnreadCountReportRequestBody.TagUnreadCountEntry
	4,   // 26: RequestBody.send_message_body:type_name -> SendMessageRequestBody
	5,   // 27: RequestBody.messages_per_user_body:type_name -> MessagesPerUserRequestBody
	2,   // 28: RequestBody.messages_per_user_init_v2_body:type_name -> MessagesPerUserInitV2RequestBody
	6,   // 29: RequestBody.get_message_by_id_body:type_name -> GetMessageByIdRequestBody
	7,   // 30: RequestBody.messages_in_conversation_body:type_name -> MessagesInConversationRequestBody
	8,   // 31: RequestBody.get_messages_checkinfo_in_conversation_body:type_name -> GetMessagesCheckInfoInConversationRequestBody
	9,   // 32: RequestBody.send_user_action_body:type_name -> SendUserActionRequestBody
	10,  // 33: RequestBody.send_input_status_body:type_name -> SendInputStatusRequestBody
	11,  // 34: RequestBody.delete_conversation_body:type_name -> DeleteConversationRequestBody
	12,  // 35: RequestBody.mark_conversation_read_body:type_name -> MarkConversationReadRequestBody
	13,  // 36: RequestBody.conversation_participants_body:type_name -> ConversationParticipantsListRequestBody
	14,  // 37: RequestBody.dissolve_conversation_body:type_name -> DissolveConversationRequestBody
	15,  // 38: RequestBody.create_conversation_v2_body:type_name -> CreateConversationV2RequestBody
	16,  // 39: RequestBody.get_conversation_info_list_v2_body:type_name -> GetConversationInfoListV2RequestBody
	17,  // 40: RequestBody.get_conversation_info_list_by_favorite_v2_body:type_name -> ConversationsPerUserByFavoriteV2RequestBody
	18,  // 41: RequestBody.get_conversation_info_list_by_top_v2_body:type_name -> ConversationsPerUserByTopV2RequestBody
	19,  // 42: RequestBody.conversation_add_participants_body:type_name -> ConversationAddParticipantsRequestBody
	20,  // 43: RequestBody.conversation_remove_participants_body:type_name -> ConversationRemoveParticipantsRequestBody
	21,  // 44: RequestBody.leave_conversation_body:type_name -> ConversationLeaveRequestBody
	22,  // 45: RequestBody.update_conversation_participant_body:type_name -> UpdateConversationParticipantRequestBody
	23,  // 46: RequestBody.delete_message_body:type_name -> DeleteMessageRequestBody
	24,  // 47: RequestBody.recall_message_body:type_name -> RecallMessageRequestBody
	27,  // 48: RequestBody.modify_message_property_body:type_name -> ModifyMessagePropertyRequestBody
	28,  // 49: RequestBody.get_conversation_core_info_body:type_name -> GetConversationCoreInfoRequestBody
	29,  // 50: RequestBody.set_conversation_core_info_body:type_name -> SetConversationCoreInfoRequestBody
	30,  // 51: RequestBody.upsert_conversation_core_ext_info_body:type_name -> UpsertConversationCoreExtInfoRequestBody
	31,  // 52: RequestBody.set_conversation_setting_info_body:type_name -> SetConversationSettingInfoRequestBody
	32,  // 53: RequestBody.upsert_conversation_setting_ext_info_body:type_name -> UpsertConversationSettingExtInfoRequestBody
	33,  // 54: RequestBody.get_stranger_conversation_body:type_name -> GetStrangerConversationListRequestBody
	34,  // 55: RequestBody.get_stranger_messages_body:type_name -> GetStrangerMessagesRequestBody
	35,  // 56: RequestBody.delete_stranger_message_body:type_name -> DeleteStrangerMessageRequestBody
	36,  // 57: RequestBody.delete_stranger_conversation_body:type_name -> DeleteStrangerConversationRequestBody
	37,  // 58: RequestBody.delete_stranger_all_conversation_body:type_name -> DeleteStrangerAllConversationRequestBody
	38,  // 59: RequestBody.mark_stranger_conversation_read_body:type_name -> MarkStrangerConversationReadRequestBody
	39,  // 60: RequestBody.mark_stranger_all_conversation_read_body:type_name -> MarkStrangerAllConversationReadRequestBody
	46,  // 61: RequestBody.participants_read_index_body:type_name -> GetConversationParticipantsReadIndexV3RequestBody
	40,  // 62: RequestBody.participants_min_index_body:type_name -> GetConversationParticipantsMinIndexV3RequestBody
	41,  // 63: RequestBody.get_upload_token_body:type_name -> GetUploadTokenRequestBody
	42,  // 64: RequestBody.get_media_urls_body:type_name -> GetMediaUrlsRequestBody
	43,  // 65: RequestBody.get_ticket_body:type_name -> GetTicketRequestBody
	44,  // 66: RequestBody.get_conversation_list_body:type_name -> GetUserConversationListRequestBody
	45,  // 67: RequestBody.broadcast_send_message_body:type_name -> BroadcastSendMessageRequestBody
	47,  // 68: RequestBody.broadcast_recv_message_body:type_name -> BroadcastRecvMessageRequestBody
	48,  // 69: RequestBody.broadcast_user_counter_body:type_name -> BroadcastUserCounterRequestBody
	49,  // 70: RequestBody.client_ack_body:type_name -> ClientACKRequestBody
	50,  // 71: RequestBody.create_voip_body:type_name -> CreateVoipRequestBody
	51,  // 72: RequestBody.call_voip_body:type_name -> CallVoipRequestBody
	52,  // 73: RequestBody.update_voip_body:type_name -> UpdateVoipRequestBody
	53,  // 74: RequestBody.channel_heartbeat_body:type_name -> ChannelHeartBeatRequestBody
	54,  // 75: RequestBody.profile_get_info:type_name -> ProfileGetInfoRequestBody
	55,  // 76: RequestBody.report_client_metrics_body:type_name -> ReportClientMetricsRequestBody
	56,  // 77: RequestBody.get_configs_body:type_name -> GetConfigsRequestBody
	57,  // 78: RequestBody.modify_message_ext_body:type_name -> ModifyMessageExtRequestBody
	59,  // 79: RequestBody.unread_count_report_body:type_name -> UnReadCountReportRequestBody
	60,  // 80: RequestBody.block_members_body:type_name -> BlockMembersRequestBody
	61,  // 81: RequestBody.block_conversation_body:type_name -> BlockConversationRequestBody
	62,  // 82: RequestBody.get_unread_count_body:type_name -> GetUnreadCountRequestBody
	63,  // 83: RequestBody.send_message_p2p_body:type_name -> SendMessageP2PRequestBody
	64,  // 84: RequestBody.get_blocklist_body:type_name -> GetBlockListRequestBody
	65,  // 85: RequestBody.set_blocklist_body:type_name -> SetBlocklistRequestBody
	66,  // 86: RequestBody.check_in_blocklist_body:type_name -> CheckInBlockListRequestBody
	67,  // 87: RequestBody.mark_message_body:type_name -> MarkMessageRequestBody
	68,  // 88: RequestBody.pull_mark_message_body:type_name -> PullMarkMessageRequestBody
	69,  // 89: RequestBody.mark_msg_unread_count_report:type_name -> MarkMsgUnreadCountReportRequestBody
	70,  // 90: RequestBody.mark_msg_get_unread_count:type_name -> MarkMsgGetUnreadCountRequestBody
	71,  // 91: RequestBody.batch_unmark_message:type_name -> BatchUnmarkMessageRequestBody
	72,  // 92: Request.body:type_name -> RequestBody
	167, // 93: Request.headers:type_name -> Request.HeadersEntry
	75,  // 94: Request.token_info:type_name -> TokenInfo
	77,  // 95: MessagesPerUserResponseBody.messages:type_name -> MessageBody
	77,  // 96: MessageInfo.body:type_name -> MessageBody
	79,  // 97: GetMessageByIdResponseBody.msg_info:type_name -> MessageInfo
	77,  // 98: MessagesInConversationResponseBody.messages:type_name -> MessageBody
	82,  // 99: GetMessagesCheckInfoInConversationResponseBody.msgs_checkinfo_list:type_name -> MessagesCheckInfo
	77,  // 100: NewMessageNotify.message:type_name -> MessageBody
	84,  // 101: NewMessageNotify.ref_msg_info:type_name -> ReferenceInfo
	86,  // 102: GetConversationsCheckInfoResponseBody.conversation_checkinfo_list:type_name -> ConversationCheckInfo
	88,  // 103: ParticipantsPage.participants:type_name -> Participant
	89,  // 104: ConversationParticipantsListResponseBody.participants_page:type_name -> ParticipantsPage
	91,  // 105: ConversationAddParticipantsResponseBody.sec_success_participants:type_name -> SecUidPair
	91,  // 106: ConversationAddParticipantsResponseBody.sec_failed_participants:type_name -> SecUidPair
	91,  // 107: ConversationRemoveParticipantsResponseBody.failed_sec_participants:type_name -> SecUidPair
	88,  // 108: UpdateConversationParticipantResponseBody.participant:type_name -> Participant
	168, // 109: ConversationCoreInfo.ext:type_name -> ConversationCoreInfo.ExtEntry
	97,  // 110: GetConversationCoreInfoResponseBody.conversation_core_info:type_name -> ConversationCoreInfo
	97,  // 111: SetConversationCoreInfoResponseBody.conversation_core_info:type_name -> ConversationCoreInfo
	97,  // 112: UpsertConversationCoreExtInfoResponseBody.core_info:type_name -> ConversationCoreInfo
	169, // 113: ConversationSettingInfo.ext:type_name -> ConversationSettingInfo.ExtEntry
	101, // 114: SetConversationSettingInfoResponseBody.setting_info:type_name -> ConversationSettingInfo
	101, // 115: UpsertConversationSettingExtInfoResponseBody.setting_info:type_name -> ConversationSettingInfo
	77,  // 116: GetStrangerMessagesResponseBody.messages:type_name -> MessageBody
	106, // 117: GetMediaUrlsResponseBody.img_options:type_name -> ImgOption
	107, // 118: GetMediaUrlsResponseBody.video_options:type_name -> VideoOption
	108, // 119: GetMediaUrlsResponseBody.audio_options:type_name -> AudioOption
	109, // 120: GetMediaUrlsResponseBody.file_options:type_name -> FileOption
	89,  // 121: ConversationInfoV2.first_page_participants:type_name -> ParticipantsPage
	88,  // 122: ConversationInfoV2.user_info:type_name -> Participant
	97,  // 123: ConversationInfoV2.conversation_core_info:type_name -> ConversationCoreInfo
	101, // 124: ConversationInfoV2.conversation_setting_info:type_name -> ConversationSettingInfo
	112, // 125: GetUserConversationListResponseBody.list:type_name -> ConversationInfoV2
	77,  // 126: BroadcastRecvMessageResponseBody.messages:type_name -> MessageBody
	116, // 127: BroadcastUserCounterResponseBody.infos:type_name -> BroadcastUserInfo
	118, // 128: CreateVoipResponseBody.info:type_name -> VoipInfo
	118, // 129: CallVoipResponseBody.info:type_name -> VoipInfo
	118, // 130: UpdateVoipResponseBody.info:type_name -> VoipInfo
	122, // 131: ProfileGetInfoResponseBody.profile:type_name -> Profile
	124, // 132: GetConfigsResponseBody.configs:type_name -> Config
	170, // 133: GetUnreadCountResponseBody.conv_unread_count:type_name -> GetUnreadCountResponseBody.ConvUnreadCountEntry
	129, // 134: GetBlockListResponseBody.user_info:type_name -> BlockUserInfo
	77,  // 135: PullMarkMessageResponseBody.messages:type_name -> MessageBody
	171, // 136: MarkMsgGetUnreadCountResponseBody.tag_unread_count:type_name -> MarkMsgGetUnreadCountResponseBody.TagUnreadCountEntry
	77,  // 137: MessagesPerUserInitV2ResponseBody.messages:type_name -> MessageBody
	112, // 138: MessagesPerUserInitV2ResponseBody.conversations:type_name -> ConversationInfoV2
	172, // 139: NewP2PMessageNotify.ext:type_name -> NewP2PMessageNotify.ExtEntry
	112, // 140: CreateConversationV2ResponseBody.conversation:type_name -> ConversationInfoV2
	112, // 141: GetConversationInfoListByFavoriteV2ResponseBody.conversation_info_list:type_name -> ConversationInfoV2
	112, // 142: GetConversationInfoListByTopV2ResponseBody.conversation_info_list:type_name -> ConversationInfoV2
	77,  // 143: StrangerConversation.last_message:type_name -> MessageBody
	88,  // 144: StrangerConversation.participants:type_name -> Participant
	173, // 145: StrangerConversation.ext:type_name -> StrangerConversation.ExtEntry
	144, // 146: GetStrangerConversationListResponseBody.conversation_list:type_name -> StrangerConversation
	76,  // 147: ResponseBody.send_message_body:type_name -> SendMessageResponseBody
	78,  // 148: ResponseBody.messages_per_user_body:type_name -> MessagesPerUserResponseBody
	138, // 149: ResponseBody.messages_per_user_init_v2_body:type_name -> MessagesPerUserInitV2ResponseBody
	80,  // 150: ResponseBody.get_message_by_id_body:type_name -> GetMessageByIdResponseBody
	81,  // 151: ResponseBody.messages_in_conversation_body:type_name -> MessagesInConversationResponseBody
	83,  // 152: ResponseBody.get_messages_checkinfo_in_conversation_body:type_name -> GetMessagesCheckInfoInConversationResponseBody
	85,  // 153: ResponseBody.has_new_message_notify:type_name -> NewMessageNotify
	139, // 154: ResponseBody.has_new_p2p_message_notify:type_name -> NewP2PMessageNotify
	87,  // 155: ResponseBody.get_conversations_checkinfo_body:type_name -> GetConversationsCheckInfoResponseBody
	140, // 156: ResponseBody.create_conversation_v2_body:type_name -> CreateConversationV2ResponseBody
	141, // 157: ResponseBody.get_conversation_info_list_v2_body:type_name -> GetConversationInfoListV2ResponseBody
	142, // 158: ResponseBody.get_conversation_info_list_by_favorite_v2_body:type_name -> GetConversationInfoListByFavoriteV2ResponseBody
	143, // 159: ResponseBody.get_conversation_info_list_by_top_v2_body:type_name -> GetConversationInfoListByTopV2ResponseBody
	90,  // 160: ResponseBody.conversation_participants_body:type_name -> ConversationParticipantsListResponseBody
	92,  // 161: ResponseBody.conversation_add_participants_body:type_name -> ConversationAddParticipantsResponseBody
	93,  // 162: ResponseBody.conversation_remove_participants_body:type_name -> ConversationRemoveParticipantsResponseBody
	94,  // 163: ResponseBody.update_conversation_participant_body:type_name -> UpdateConversationParticipantResponseBody
	95,  // 164: ResponseBody.modify_message_property_body:type_name -> ModifyMessagePropertyResponseBody
	98,  // 165: ResponseBody.get_conversation_core_info_body:type_name -> GetConversationCoreInfoResponseBody
	99,  // 166: ResponseBody.set_conversation_core_info_body:type_name -> SetConversationCoreInfoResponseBody
	100, // 167: ResponseBody.upsert_conversation_core_ext_info_body:type_name -> UpsertConversationCoreExtInfoResponseBody
	102, // 168: ResponseBody.set_conversation_setting_info_body:type_name -> SetConversationSettingInfoResponseBody
	103, // 169: ResponseBody.upsert_conversation_setting_ext_info_body:type_name -> UpsertConversationSettingExtInfoResponseBody
	145, // 170: ResponseBody.get_stranger_conversation_body:type_name -> GetStrangerConversationListResponseBody
	104, // 171: ResponseBody.get_stranger_messages_body:type_name -> GetStrangerMessagesResponseBody
	146, // 172: ResponseBody.participants_read_index_body:type_name -> GetConversationParticipantsReadIndexV3ResponseBody
	105, // 173: ResponseBody.get_upload_token_body:type_name -> GetUploadTokenResponseBody
	110, // 174: ResponseBody.get_media_urls_body:type_name -> GetMediaUrlsResponseBody
	111, // 175: ResponseBody.get_ticket_body:type_name -> GetTicketResponseBody
	113, // 176: ResponseBody.get_conversation_list_body:type_name -> GetUserConversationListResponseBody
	114, // 177: ResponseBody.broadcast_send_message_body:type_name -> BroadcastSendMessageResponseBody
	115, // 178: ResponseBody.broadcast_recv_message_body:type_name -> BroadcastRecvMessageResponseBody
	117, // 179: ResponseBody.broadcast_user_counter_body:type_name -> BroadcastUserCounterResponseBody
	119, // 180: ResponseBody.create_voip_body:type_name -> CreateVoipResponseBody
	120, // 181: ResponseBody.call_voip_body:type_name -> CallVoipResponseBody
	121, // 182: ResponseBody.update_voip_body:type_name -> UpdateVoipResponseBody
	123, // 183: ResponseBody.profile_get_info:type_name -> ProfileGetInfoResponseBody
	125, // 184: ResponseBody.get_configs_body:type_name -> GetConfigsResponseBody
	126, // 185: ResponseBody.unread_count_report_body:type_name -> UnReadCountReportResponseBody
	127, // 186: ResponseBody.block_members_body:type_name -> BlockMembersResponseBody
	128, // 187: ResponseBody.get_unread_count_body:type_name -> GetUnreadCountResponseBody
	147, // 188: ResponseBody.send_message_p2p_body:type_name -> SendMessageP2PResponseBody
	130, // 189: ResponseBody.get_blocklist_body:type_name -> GetBlockListResponseBody
	131, // 190: ResponseBody.set_blocklist_body:type_name -> SetBlocklistResponseBody
	132, // 191: ResponseBody.check_in_blocklist_body:type_name -> CheckInBlockListResponseBody
	133, // 192: ResponseBody.mark_message_body:type_name -> MarkMessageResponseBody
	134, // 193: ResponseBody.pull_mark_message_body:type_name -> PullMarkMessageResponseBody
	135, // 194: ResponseBody.mark_msg_unread_count_report:type_name -> MarkMsgUnreadCountReportResponseBody
	136, // 195: ResponseBody.mark_msg_get_unread_count:type_name -> MarkMsgGetUnreadCountResponseBody
	137, // 196: ResponseBody.batch_unmark_message:type_name -> BatchUnmarkMessageResponseBody
	148, // 197: Response.body:type_name -> ResponseBody
	174, // 198: Response.headers:type_name -> Response.HeadersEntry
	199, // [199:199] is the sub-list for method output_type
	199, // [199:199] is the sub-list for method input_type
	199, // [199:199] is the sub-list for extension type_name
	199, // [199:199] is the sub-list for extension extendee
	0,   // [0:199] is the sub-list for field type_name
}

func init() { file_ws_payload_proto_init() }
func file_ws_payload_proto_init() {
	if File_ws_payload_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ws_payload_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Header); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Frame); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessagesPerUserInitV2RequestBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReferencedMessageInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendMessageRequestBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessagesPerUserRequestBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMessageByIdRequestBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessagesInConversationRequestBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMessagesCheckInfoInConversationRequestBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendUserActionRequestBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendInputStatusRequestBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteConversationRequestBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarkConversationReadRequestBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConversationParticipantsListRequestBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DissolveConversationRequestBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateConversationV2RequestBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetConversationInfoListV2RequestBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConversationsPerUserByFavoriteV2RequestBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConversationsPerUserByTopV2RequestBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConversationAddParticipantsRequestBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConversationRemoveParticipantsRequestBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConversationLeaveRequestBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateConversationParticipantRequestBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteMessageRequestBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecallMessageRequestBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifyPropertyContent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifyPropertyBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifyMessagePropertyRequestBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetConversationCoreInfoRequestBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetConversationCoreInfoRequestBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertConversationCoreExtInfoRequestBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetConversationSettingInfoRequestBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertConversationSettingExtInfoRequestBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStrangerConversationListRequestBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStrangerMessagesRequestBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteStrangerMessageRequestBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteStrangerConversationRequestBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteStrangerAllConversationRequestBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarkStrangerConversationReadRequestBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarkStrangerAllConversationReadRequestBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetConversationParticipantsMinIndexV3RequestBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUploadTokenRequestBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMediaUrlsRequestBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTicketRequestBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserConversationListRequestBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BroadcastSendMessageRequestBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetConversationParticipantsReadIndexV3RequestBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BroadcastRecvMessageRequestBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BroadcastUserCounterRequestBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientACKRequestBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateVoipRequestBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallVoipRequestBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateVoipRequestBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelHeartBeatRequestBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProfileGetInfoRequestBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportClientMetricsRequestBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetConfigsRequestBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifyMessageExtRequestBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConvCountReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnReadCountReportRequestBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockMembersRequestBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockConversationRequestBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUnreadCountRequestBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendMessageP2PRequestBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBlockListRequestBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetBlocklistRequestBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckInBlockListRequestBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarkMessageRequestBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PullMarkMessageRequestBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarkMsgUnreadCountReportRequestBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarkMsgGetUnreadCountRequestBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchUnmarkMessageRequestBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Headers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TokenInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendMessageResponseBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessagesPerUserResponseBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMessageByIdResponseBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessagesInConversationResponseBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessagesCheckInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMessagesCheckInfoInConversationResponseBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReferenceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewMessageNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConversationCheckInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetConversationsCheckInfoResponseBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Participant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParticipantsPage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConversationParticipantsListResponseBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecUidPair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConversationAddParticipantsResponseBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConversationRemoveParticipantsResponseBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateConversationParticipantResponseBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifyMessagePropertyResponseBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConversationCoreInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetConversationCoreInfoResponseBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetConversationCoreInfoResponseBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertConversationCoreExtInfoResponseBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConversationSettingInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetConversationSettingInfoResponseBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertConversationSettingExtInfoResponseBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStrangerMessagesResponseBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUploadTokenResponseBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImgOption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VideoOption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AudioOption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileOption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMediaUrlsResponseBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTicketResponseBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConversationInfoV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserConversationListResponseBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BroadcastSendMessageResponseBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BroadcastRecvMessageResponseBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BroadcastUserInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BroadcastUserCounterResponseBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VoipInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateVoipResponseBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallVoipResponseBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateVoipResponseBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Profile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProfileGetInfoResponseBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetConfigsResponseBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnReadCountReportResponseBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[127].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockMembersResponseBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[128].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUnreadCountResponseBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[129].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockUserInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[130].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBlockListResponseBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[131].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetBlocklistResponseBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[132].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckInBlockListResponseBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[133].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarkMessageResponseBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[134].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PullMarkMessageResponseBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[135].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarkMsgUnreadCountReportResponseBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[136].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarkMsgGetUnreadCountResponseBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[137].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchUnmarkMessageResponseBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[138].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessagesPerUserInitV2ResponseBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[139].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewP2PMessageNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[140].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateConversationV2ResponseBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[141].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetConversationInfoListV2ResponseBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[142].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetConversationInfoListByFavoriteV2ResponseBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[143].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetConversationInfoListByTopV2ResponseBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[144].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StrangerConversation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[145].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStrangerConversationListResponseBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[146].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetConversationParticipantsReadIndexV3ResponseBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[147].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendMessageP2PResponseBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[148].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ws_payload_proto_msgTypes[149].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ws_payload_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   175,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ws_payload_proto_goTypes,
		DependencyIndexes: file_ws_payload_proto_depIdxs,
		MessageInfos:      file_ws_payload_proto_msgTypes,
	}.Build()
	File_ws_payload_proto = out.File
	file_ws_payload_proto_rawDesc = nil
	file_ws_payload_proto_goTypes = nil
	file_ws_payload_proto_depIdxs = nil
}
